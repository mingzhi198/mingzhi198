<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>db on Li. Mingzhi</title>
    <link>/tags/db/</link>
    <description>Recent content in db on Li. Mingzhi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Mar 2021 19:00:52 +0800</lastBuildDate><atom:link href="/tags/db/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Note: Trees</title>
      <link>/p/note-trees/</link>
      <pubDate>Wed, 03 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/note-trees/</guid>
      <description>二叉树, 二叉搜索树(BST), 平衡二叉树(AVL), 红黑树, B树,B+树  二叉树 无序插入, 当需要查找的时候，还是得一个一个挨着去遍历查找
二叉搜索树(BST) 插入的数据有序，左子树必须小于根节点，右子树必须大于根节点;
使用二分查找来提高效率
但是如果插入的顺序是升序或者降序的话，树的形状会变成如下：
此时二叉搜索树就会退化成链表，时间复杂度又会变成O(n)
平衡二叉树(AVL) 为了解决上述问题，通过左旋转或右旋转让树平衡
最短子树跟最长子树高度只差不能超过1
由图我们可以看到，当顺序插入的时候，会自动的进行旋转，以达到平衡
但是会通过插入性能的损失来弥补查询性能的提升
 当我们插入的数据很多时候，而查询很少的时候，由于插入数据会旋转同样会消耗很多时间  4. 红黑树 同样是经过左右旋让树平衡起来，还要变色的行为
最长子树只要不超过最短子树的两倍即可
查询性能和插入性能近似取得平衡
 但是随着数据的插入、发现树的深度会变深，树的深度会越来越深，意味着IO次数越多，影响数据读取的效率  5. B树 为了解决上述数据插入过多，树深度变深的问题，我们采用B树
把原来的有序二叉树变成有序多叉树
举例： 如果要查询select * from table where id=14？ 第一步，将磁盘一加载到内存中，发现14&amp;lt;16,寻找地址磁盘2 第二步，将磁盘二加载到内存中，发现14&amp;gt;11,寻找地址磁盘7 第三步，将磁盘七加载到内存中，发现14=14，读取data，取出data，结束  问题   B树不支持范围查询的快速查找  如果我们查询一个范围的数据，查找到范围一个边界时，需要回到根节点重新遍历查找，需要从根节点进行多次遍历，即便找到范围的另一个边界，查询效率会降低。 如果data存储的是行记录，行的大小随着列数的增多，所占空间会变大。  这时，一个页中可存储的数据量就会变少，树相应就会变高，磁盘IO次数就会变大。 6. B+树 B+树对B树进行了改进，把数据全放在了叶子节点中，叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表。
例如： 查询范围 select * from table where id between 11 and 35？ 第一步，将磁盘一加载到内存中，发现11&amp;lt;28,寻找地址磁盘2 第二步，将磁盘二加载到内存中，发现10&amp;gt;11&amp;gt;17,寻找地址磁盘5 第三步，将磁盘五加载到内存中，发现11=11，读取data 第四步，继续向右查询，读取磁盘5，发现35=35，读取11-35之间数据，结束 由此可见，这样的范围查询比B树速度提高了不少  B+树相对B树的优点  1.</description>
    </item>
    
    <item>
      <title>Note: Network</title>
      <link>/p/note-network/</link>
      <pubDate>Mon, 01 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/note-network/</guid>
      <description>http各版本的区别(http0.9, http1.0, http1.1, http2.0)  1. HTTP&amp;amp;HTTPS 1. HTTPS证书的申请流程  在服务器上生成CSR文件（证书申请文件，内容包括证书公钥、使用的Hash算法、申请的域名、公司名称、职位等信息） 把CSR文件和其他可能的证件上传到CA认证机构 CA机构收到证书申请之后，使用申请中的Hash算法，对部分内容进行摘要，然后使用CA机构自己的私钥对这段摘要信息进行签名  CA机构把签名过的证书通过发送给申请者。  2. HTTPs客户端和服务端的交互流程 1. 客户端向服务器发出加密通信的请求 (1) 支持的协议版本，比如 TLS 1.0 (2) 客户端生成的随机数 random1, 稍后用于生成 会话密钥 (3) 支持的加密算法， 比如RSA非对称加密 (4) 支持的压缩算法 2. 服务器收到请求，然后响应 (1) 确认使用的加密通信协议，比如 TLS 1.0版本。 若客户端与服务器支持的版本不一致，则服务器关闭加密通信。 (2) 服务器生成随机数 random2, 稍后用于生成 会话密钥 (3) 确认使用的加密方法，比如 RSA非对称加密 (4) 服务器的证书 3. 客户端验证服务器证书  验证流程  1. CA机构在签发证书的时候，用签名算法(sha256RSA)对证书内容进行摘要，用自己的私钥对摘要进行签名E 2. 浏览器用预置在系统中的CA机构的公钥对服务器证书进行验签：用CA机构的公钥解密签名后的摘要E 3. 验签通过后得到CA机构使用的证书摘要S 4. 浏览器用相同的签名算法对证书内容进行一次摘要S1，若得到的值S1与验证签之后得到的摘要S相同，则验签通过  生成随机密钥 pre-master secret  验证通过后，客户端生成一个随机数 pre-master secret, 然后用证书中的公钥进行加密，并传给服务端。 服务端端用私钥将其解密； 即客户端和服务端都有一套相同的数据：pre-master secret, random1, random2  pre-master secret  pre-master secret 前两个字节是TLS版本号。 在 Client 在第一次请求的时候会明文发送一份加密套件列表和当前支持的SSL/TLS版本号给服务端， 若服务端对密文中解密出来的pre-master版本号跟之前客户端发送的版本号不一致，则停止通信 4.</description>
    </item>
    
    <item>
      <title>Note: MySQL</title>
      <link>/p/note-mysql/</link>
      <pubDate>Fri, 26 Feb 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/note-mysql/</guid>
      <description>[TOC]
1. 事务 1.1 事务的四个重要特性(ACID)：  原子性（Atomicity）   事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。  一致性（Consistency）   指事务将数据库从一种状态转变为另一种一致的的状态。事务开始前和结束后，数据库的完整性约束没有被破坏。 例如工号带有唯一属性，如果经过一个修改工号的事务后，工号变的非唯一了，则表明一致性遭到了破坏。  隔离性（Isolation）   要求每个读写事务的对象对其他事务的操作对象能互相分离，即该事务提交前对其他事务不可见。 也可以理解为多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。 注：MySQL 通过锁机制来保证事务的隔离性。  持久性（Durability）   事务一旦提交，则其结果就是永久性的 1.2 事务的隔离级别  SQL 标准定义的四种隔离级别被 ANSI（美国国家标准学会）和 ISO/IEC（国际标准）采用，每种级别对事务的处理能力会有不同程度的影响。  READ UNCOMMITTED（读未提交）   初始化测试数据库： SET @@session.transaction_isolation = &#39;READ-UNCOMMITTED&#39;; create database test; use test; create table test(id int primary key); insert into test(id) values(1); 1. 打开终端1，开启一个事务，修改ID为1的记录更新为2： SET @@session.transaction_isolation = &#39;READ-UNCOMMITTED&#39;; begin; update test set id = 2 where id = 1; select * from test; -- 此时看到一条ID为2的记录 2.</description>
    </item>
    
    <item>
      <title>Note: Redis</title>
      <link>/p/note-redis/</link>
      <pubDate>Fri, 26 Feb 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/note-redis/</guid>
      <description>Redis   Redis数据类型及应用场景
  Redis进程模型及其高效原理
  Redis有序集的实现方式
  </description>
    </item>
    
  </channel>
</rss>
