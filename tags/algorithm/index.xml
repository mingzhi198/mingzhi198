<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Li. Mingzhi</title>
    <link>/tags/algorithm/</link>
    <description>Recent content in algorithm on Li. Mingzhi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Mar 2021 18:36:08 +0800</lastBuildDate><atom:link href="/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cp2. InnoDB</title>
      <link>/p/cp2.-innodb/</link>
      <pubDate>Wed, 24 Mar 2021 18:36:08 +0800</pubDate>
      
      <guid>/p/cp2.-innodb/</guid>
      <description>Statement  这篇文件是我从这本书中的学习笔记: MySQL技术内幕（InnoDB存储引擎）. 非商业用途转载请注明出处，若要更详细了解书中内容，请参考原作。  1. InnoDB体系结构 InnoDB存储引擎有多个内存块组成的一个大的内存池，负责如下工作：
 维护所有进程/线程要访问的内部数据结构 缓存磁盘上的数据 重做日志(redo log)缓冲  1.1. 后台线程  Master Thread  核心线程，负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性 IO Thread
InnoDB存储引擎大量使用了AIO（Async IO)来处理写IO请求；
InnoDB 1.0版本之前共有4个IO Thread: write, read, insert buffer and log IO thread   查看InnoDB中的 IO Thread:
 show engine innodb status\G 3. Purge Thread
事务被提交后，其所使用的undolog可能不再需要，Purge Thread可以回收已经使用并分配的undo页。
从InnoDB 1.2版本开始，支持多个 Purge Thread, 从而加入undo页的回收；
另外 Purge Thread 离散地读取 undo 页，可以利用磁盘的随机读取性能。
mysql root@127.0.0.1:test&amp;gt; show variables like &amp;#39;innodb_purge_threads&amp;#39; \G ***************************[ 1.</description>
    </item>
    
    <item>
      <title>Algorithm: 3. Reverse Linked List</title>
      <link>/p/algorithm-3.-reverse-linked-list/</link>
      <pubDate>Tue, 23 Mar 2021 15:00:52 +0800</pubDate>
      
      <guid>/p/algorithm-3.-reverse-linked-list/</guid>
      <description>Statement  This article is my study notes about algorithms. Please refer to the original work for more details and indicate the source for reprinting.  1. How to reverse a list? We can reverse linked list in two ways, which is iteration and recursion.
1.1 Iteration 1. We define three pointer variables: prev, cur, next and header, prev points to the previous node, which points to NULL at the beginning of the iteration.</description>
    </item>
    
    <item>
      <title>Algorithm: 2. Remove Char From String</title>
      <link>/p/algorithm-2.-remove-char-from-string/</link>
      <pubDate>Tue, 23 Mar 2021 14:30:27 +0800</pubDate>
      
      <guid>/p/algorithm-2.-remove-char-from-string/</guid>
      <description>Statement  This article is my study notes about algorithms. Please refer to the original work for more details and indicate the source for reprinting.  1. How to remove charcter from a string? Basically, we have two pinters, i and j;
i is the index of iteration, and j is the index of the target character.
After the iteration, we set the bit indexed by j to &amp;lsquo;\0&amp;rsquo;;
2. Implementation #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>Algorithm: 1. Bubble Sort</title>
      <link>/p/algorithm-1.-bubble-sort/</link>
      <pubDate>Fri, 05 Mar 2021 14:30:27 +0800</pubDate>
      
      <guid>/p/algorithm-1.-bubble-sort/</guid>
      <description>Statement  This article is my study notes about algorithms. Please refer to the original work for more details and indicate the source for reprinting.  1. What is Bubble Sort? Bubble Sort is a sorting algorithm that is simple and obvious.
We do it in the following steps:
1. We iterate elements of an array in pairs and then switch them if the sequence of elements in a pair is not correct.</description>
    </item>
    
    <item>
      <title>Algorithm: 2. Insert Sort</title>
      <link>/p/algorithm-2.-insert-sort/</link>
      <pubDate>Fri, 05 Mar 2021 14:30:27 +0800</pubDate>
      
      <guid>/p/algorithm-2.-insert-sort/</guid>
      <description>Statement  This article is my study notes about algorithms. Please refer to the original work for more details and indicate the source for reprinting.  1. What is Insert Sort? Anyone who has played poker would understand what insert sort is.
Be cautious that elements to the left of the beginning index are already sorted, thus we can stop redundant comparison if the beginning indexed element is bigger than the previous one.</description>
    </item>
    
    <item>
      <title>GA: 7. Dijkstra&#39;s algorithm</title>
      <link>/p/ga-7.-dijkstras-algorithm/</link>
      <pubDate>Sun, 13 Dec 2020 23:44:52 +0800</pubDate>
      
      <guid>/p/ga-7.-dijkstras-algorithm/</guid>
      <description>Statement  This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people. Please refer to the original work for more details and indicate the source for reprinting.    Weighted graphs: assigning weight to some edges. Dijkstra&amp;rsquo;s algorithm: What&amp;rsquo;s the shortest path to X? Cycles in graphs will make Dijkstra&amp;rsquo;s algorithm not work.  Dijkstra&amp;rsquo;s algorithm Sometimes the shortest path is not the fastest path, since there are different weights with various edges.</description>
    </item>
    
    <item>
      <title>GA: 6. Breadth-first search</title>
      <link>/p/ga-6.-breadth-first-search/</link>
      <pubDate>Thu, 10 Dec 2020 23:02:27 +0800</pubDate>
      
      <guid>/p/ga-6.-breadth-first-search/</guid>
      <description>Statement  This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people. Please refer to the original work for more details and indicate the source for reprinting.    From this chapter we get to know graphs, which is a new data structure and can help us model a network. We also get to know a new algorhtim named breadth-first search, which can help us find the shortest path.</description>
    </item>
    
    <item>
      <title>GA: 5. Hash tables</title>
      <link>/p/ga-5.-hash-tables/</link>
      <pubDate>Wed, 09 Dec 2020 23:09:04 +0800</pubDate>
      
      <guid>/p/ga-5.-hash-tables/</guid>
      <description>Statement  This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people. Please refer to the original work for more details and indicate the source for reprinting.  1. Requirements for hash function  It needs to be consistent. It should map different workds to different numbers.  You get a hash table by putting a hash function and an array together.</description>
    </item>
    
    <item>
      <title>GA: 4. Quicksort</title>
      <link>/p/ga-4.-quicksort/</link>
      <pubDate>Wed, 09 Dec 2020 08:32:27 +0800</pubDate>
      
      <guid>/p/ga-4.-quicksort/</guid>
      <description>Statement  This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people. Please refer to the original work for more details and indicate the source for reprinting.   This chapter I learned divide-and-conquer and quicksort, both of which can help me solve problems elegently.
 1. Divide &amp;amp; Conquer  It can take us some time to understand D&amp;amp;C. Therefore, we will see some problems to learn about it.</description>
    </item>
    
    <item>
      <title>GA: 3. Recursion</title>
      <link>/p/ga-3.-recursion/</link>
      <pubDate>Tue, 08 Dec 2020 18:36:08 +0800</pubDate>
      
      <guid>/p/ga-3.-recursion/</guid>
      <description>Statement  This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people. Please refer to the original work for more details and indicate the source for reprinting.   In this chapter, I learned about recursion, which is very useful in many algorithms.
Also, this chapter shows us how to break down a problem into a base case and a recursive case.</description>
    </item>
    
    <item>
      <title>GA: 2. Selection sort</title>
      <link>/p/ga-2.-selection-sort/</link>
      <pubDate>Fri, 04 Dec 2020 23:44:52 +0800</pubDate>
      
      <guid>/p/ga-2.-selection-sort/</guid>
      <description>Statement  This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people. Please refer to the original work for more details and indicate the source for reprinting.  Chapter 2: Selection Sort 1. Tips About Selection Sort  Your computer’s memory is like a giant set of drawers. When you want to store multiple elements, use an array or a list.</description>
    </item>
    
    <item>
      <title>GA: 1. Binary search</title>
      <link>/p/ga-1.-binary-search/</link>
      <pubDate>Thu, 03 Dec 2020 23:44:52 +0800</pubDate>
      
      <guid>/p/ga-1.-binary-search/</guid>
      <description>Statement  This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people. Please refer to the original work for more details and indicate the source for reprinting.  Chapter 1: Binary Search 1. Tips About Binary Search * Binary search is a lot faster than simple search. * O(log n) is faster than O(n), but it gets a lot faster once the list of items you’re searching through grows.</description>
    </item>
    
  </channel>
</rss>
