<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cap on Li. Mingzhi</title>
    <link>/tags/cap/</link>
    <description>Recent content in cap on Li. Mingzhi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Mar 2021 15:00:52 +0800</lastBuildDate><atom:link href="/tags/cap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang: Channel底层实现</title>
      <link>/p/golang-channel%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 09 Mar 2021 15:00:52 +0800</pubDate>
      
      <guid>/p/golang-channel%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.   1. channel结构  buf 是有缓冲的channel所特有的结构，用来存储缓存数据。是个循环链表 sendx和recvx用于记录buf这个循环链表中的发送或者接收的index lock lock是个互斥锁 recvq和sendq分别是接收(&amp;lt;-channel)或者发送(channel &amp;lt;- xxx)的goroutine抽象出来的结构体(sudog)的队列。是个双向链表  hchan源码: src/runtime/chan.go
2. 创建channel ch := make(chan int, 5) 创建channel的时候会在内存中实例化一个hchan的结构体,并返回一个ch指针.
hchan包含了一个互斥锁, 让goroutine可以FIFO的方式进入一个结构体中.
3. channel中的队列 channel中有个缓存buf，是用来缓存数据的, 当使用send (ch &amp;lt;- xx)或者recv ( &amp;lt;-ch)的时候，首先要锁住hchan这个结构体。
然后开始send (ch &amp;lt;- xx)数据。
recv ( &amp;lt;-ch)是个逆向的操作，也是需要加锁。
recvx和sendx是根据循环链表buf的变动而改变的。
4. send/recv的细化操作 每一步的操作的细节可以细化为：</description>
    </item>
    
    <item>
      <title>Golang: GMP调度模型</title>
      <link>/p/golang-gmp%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 08 Mar 2021 15:00:52 +0800</pubDate>
      
      <guid>/p/golang-gmp%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9E%8B/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.   1. Goroutine Goroutine = Golang + Coroutine。Goroutine是golang实现的协程，是用户级线程。
Goroutine具有以下特点：
 相比线程，其启动的代价很小，以很小栈空间启动（2Kb左右） 能够动态地伸缩栈的大小，最大可以支持到Gb级别 工作在用户态，切换成很小 与线程关系是n:m，即可以在n个系统线程上多工调度m个Goroutine  2. 进程、线程、Goroutine 在仅支持进程的操作系统中，进程是拥有资源和独立调度的基本单位。
在引入线程的操作系统中，线程是独立调度的基本单位，进程是资源拥有的基本单位。
线程创建、管理、调度等采用的方式称为线程模型。线程模型一般分为以下三种：
 内核级线程(Kernel Level Thread)模型 用户级线程(User Level Thread)模型 两级线程模型，也称混合型线程模型  三大线程模型最大差异就在于用户级线程与内核调度实体KSE（KSE，Kernel Scheduling Entity）之间的对应关系。
KSE是Kernel Scheduling Entity的缩写，其是可被操作系统内核调度器调度的对象实体，是操作系统内核的最小调度单元，可以简单理解为内核级线程。
用户级线程即协程，由应用程序创建与管理，协程必须与内核级线程绑定之后才能执行。
线程由 CPU 调度是抢占式的，协程由用户态调度是协作式的，一个协程让出 CPU 后，才执行下一个协程。
3. Golang的线程模型 Golang在底层实现了混合型线程模型。M即系统线程，由系统调用产生，一个M关联一个KSE，即两级线程模型中的系统线程。G为Groutine，即两级线程模型的的应用及线程。M与G的关系是N:M。</description>
    </item>
    
    <item>
      <title>分布式: BASE 理论</title>
      <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-base-%E7%90%86%E8%AE%BA/</link>
      <pubDate>Fri, 05 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-base-%E7%90%86%E8%AE%BA/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.  1. BASE理论 eBay的架构师Dan Pritchett源于对大规模分布式系统的实践总结，在ACM上发表文章提出BASE理论，BASE理论是对CAP理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。
BASE是指:
基本可用（Basically Available） 软状态（ Soft State） 最终一致性（ Eventual Consistency）   基本可用（Basically Available）
分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。
电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。
这就是损失部分可用性的体现。
  软状态（ Soft State）
允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。
  最终一致性（ Eventual Consistency）
系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。
  2. ACID和BASE的区别与联系 ACID是传统数据库常用的设计理念，追求强一致性模型。
BASE支持的是大型分布式系统，提出通过牺牲强一致性获得高可用性。
ACID和BASE代表了两种截然相反的设计哲学
在分布式系统设计的场景中，系统组件对一致性要求是不同的，因此ACID和BASE又会结合使用。</description>
    </item>
    
    <item>
      <title>分布式: CAP 定理</title>
      <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-cap-%E5%AE%9A%E7%90%86/</link>
      <pubDate>Fri, 05 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-cap-%E5%AE%9A%E7%90%86/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.  1. 什么是CAP定理 CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性） 这三个基本需求，最多只能同时满足其中的2个。   Consistency（一致性）
指数据在多个副本之间能够保持一致的特性（严格的一致性）
  Availability（可用性）
指系统提供的服务必须一直处于可用的状态，每次请求都能获取到非错的响应（不保证获取的数据为最新数据）
  Partition tolerance（分区容错性）
分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障
  分区 在分布式系统中，不同的节点分布在不同的子网络中，由于一些特殊的原因，这些子节点之间出现了网络不通的状态， 但他们的内部子网络是正常的。从而导致了整个系统的环境被切分成了若干个孤立的区域，这就是分区。 2. 原理 2.1 定义 根据CAP原则定义，系统的一致性、可用性和分区容错性细分如下：
一致性： N1和N2的数据库V之间的数据是否完全一样。 可用性： N1和N2的对外部的请求能否做出正常的响应。 分区容错性：N1和N2之间的网络是否互通。 2.2 异常情况 假设一种极端情况，N1和N2之间的网络断开了，我们要支持这种网络异常。
相当于要满足分区容错性，能不能同时满足一致性和可用性呢？还是说要对他们进行取舍？
 两种选择：  第一：牺牲数据一致性，保证可用性。响应旧的数据V0给用户。 第二：牺牲可用性，保证数据一致性。阻塞等待，直到网络连接恢复，数据更新操作M完成之后，再给用户响应最新的数据V1。 这个过程，证明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。</description>
    </item>
    
  </channel>
</rss>
