<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Li. Mingzhi</title>
        <link>/</link>
        <description>Recent content on Li. Mingzhi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 05 Apr 2021 18:36:08 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>cp4. Tables</title>
        <link>/p/cp4.-tables/</link>
        <pubDate>Mon, 05 Apr 2021 18:36:08 +0800</pubDate>
        
        <guid>/p/cp4.-tables/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;该文是在下在看书过程中的学习笔记，仅限于学习交流，禁止用于商业用途。&lt;/li&gt;
&lt;li&gt;非商业用途转载请注明出处，若要详细了解书中内容，请参考原作: MySQL技术内幕（InnoDB存储引擎）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-索引组织表&#34;&gt;1. 索引组织表&lt;/h2&gt;
&lt;p&gt;InnoDB存储引擎的表是根据主键顺序组织存放的，这种存储方式的表被称为 索引组织表(index organized table)。&lt;br&gt;
每张 InnoDB 表都有个主键(primary key),若在建表时未指定主键，则存储引擎会按如下方式指定主键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若表中有非空的唯一索引(unique not null), 则该列即为主键&lt;br&gt;
若表中有多个非空唯一索引，则&lt;!-- raw HTML omitted --&gt;第一个定义的非空唯一索引为主键&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;  &lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4_0900_ai_ci&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;003&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;002&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_rowid&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---+----+----+----+--------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_rowid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---+----+----+----+--------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---+----+----+----+--------+&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;013&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面示例创建的表z有a,b,c,d四个列，b、c、d三列上都有唯一索引，不同的是b列允许NULL；&lt;br&gt;
由于未显式地定义主键，因此会选择非空的唯一索引，_rowid显示表的主键；&lt;br&gt;
虽然c、d列都是非空唯一索引，但d列被首先定义为唯一索引，帮d被视为主键。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;_rowid 只能用于查看单个列为主键的情况，对于多列组成的主键无效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4_0900_ai_ci&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;003&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_rowid&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1054&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Unknown column &amp;#39;_rowid&amp;#39; in &amp;#39;field list&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;若不符合上述条件，则 InnoDB 存储引擎会自动创建一个6字节大小的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-innodb-逻辑存储结构&#34;&gt;2. InnoDB 逻辑存储结构&lt;/h2&gt;
&lt;p&gt;从 InnoDB 存储引擎的逻辑存储结构来看，所有数据都被逻辑地存放在一个空间中，即表空间(tablespace)；&lt;br&gt;
表空间又由段(segment)、区(extent)、页(page)组成。&lt;br&gt;
页在一些文档中有时也被称为块(block)。&lt;/p&gt;
&lt;p&gt;InnoDB 存储引擎的逻辑存储结构如下图所示：&lt;br&gt;
&lt;img src=&#34;/post/mysql_innodb/images/logic_store_org.png&#34; alt=&#34;logic_store_org&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;21-表空间&#34;&gt;2.1 表空间&lt;/h3&gt;
&lt;p&gt;表空间是 InnoDB 存储引擎逻辑结构的最高层，所有数据都在表空间中。&lt;br&gt;
默认情况下有一个共享表空间ibdata1, 但基指定了参数 innodb_file_per_table,则每张表内的数据会单独放到一个表空间内；但每张表的表空间存储的只是数据、索引和插入缓冲Bitmap页；&lt;br&gt;
其它的数据, 如回滚(undo)信息，插入缓冲索引页，系统事务信息，二次定缓冲(double write buffer)等还是在原来的共享表空间中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;InnoDB 存储引擎不会在执行 rollback 时去收缩默认表空间，但是会判断这些undo信息是否还需要，若不需要，&lt;br&gt;
则会将这些空间标记为可用空间，供下次undo使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;22-段&#34;&gt;2.2 段&lt;/h3&gt;
&lt;p&gt;表空间由段组成，常见的段有:数据段、索引段、回滚段等。&lt;br&gt;
InnoDB存储引擎表是索引组织的(index organized),因此数据即索引，索引即数据；&lt;br&gt;
数据段即为 B+ 树的叶子节点(leaf node segment),&lt;br&gt;
索引段即为 B+ 树的非叶子节点(non-leaf node segment)&lt;/p&gt;
&lt;p&gt;InnoDB 存储引擎负责对段的管理，DBA不能对其进行控制。&lt;/p&gt;
&lt;h3 id=&#34;23-区&#34;&gt;2.3 区&lt;/h3&gt;
&lt;p&gt;区由连续页组成，每个区的大小为 1MB； 为了保证区中页的连续性，InnoDB 存储引擎一次从磁盘中申请 4～5个区；&lt;br&gt;
默认的 InnoDB 存储引擎页大小为 16KB，即一个区中共有64个连续的页。&lt;/p&gt;
&lt;p&gt;InnoDB 1.0.x 版本开始引入压缩页，可以通过参数 KEY_BLOCK_SIZE 设置为 2K, 4K, 8K; 对应的页的数量为512, 256, 128。&lt;/p&gt;
&lt;p&gt;InnoDB 1.2.x 版本新增了参数 innodb_page_size, 可以将默认页的大小设为4K，8K，但页中的数据库是不能压缩的；&lt;br&gt;
此时区中页的数量为256， 128，即无论页的大小怎么变化， 区的大小总是 1MB。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为何启用了参数 innodb_file_per_table 后，创建的表默认大小为96KB(我用的 MySQL 8.0.23, 默认为112K）&lt;br&gt;
在每个段开始时，先用32个页大小的碎片页(fragment page)来存放数据，在这此页被用完后，才申请64个连续的页。&lt;br&gt;
其目的是，对于一些小表或undo这类的段，可以在开始时申请较少的空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;PRIMARY&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;col1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;COLLATE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8mb4_0900_ai_ci&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;#root@best: /var/lib/mysql/test# ll -h t1.ibd
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- 1 mysql mysql 112K 4月   5 22:45 t1.ibd
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;003&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;004&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述 SQL 创建了t1表，col2字段为VARCHAR（7000），这样保证一个页最多2条记录。&lt;br&gt;
接着插入2行数据，因为所有记录都在一个页中，因此没有非叶子节点；&lt;br&gt;
但若插入第三条记录，就会产生一个非叶子节点；新插入的记录导致了 B+ 树的分裂操作；&lt;br&gt;
接着继续插入60条记录，即表t1中共有63条记录，32个页：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;k&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;procedure&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;load_t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;load_t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;114&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;+----------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+----------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+----------+&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;011&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- 1 mysql mysql 608K 4月   5 22:52 t1.ibd
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在导入了63条数据后，表空间的大小还是小于1MB，&lt;br&gt;
若再插入一条记录，则表空间将按连续64个页的大小开始增长&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;009&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+----------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+----------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+----------+&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;011&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- 1 mysql mysql 2.0M 4月   5 22:53 t1.ibd
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;24-页&#34;&gt;2.4 页&lt;/h3&gt;
&lt;p&gt;页是 InnoDB 磁盘管理的最小单位。默认每个页大小为16KB。从1.2.x开始，可以通过参数 innodb_page_size 修改页的大小为4K, 8K 16K。&lt;br&gt;
若设置完成，则所有表中页的大小都为 innodb_page_size，不可以再次修改。除非用 mysqldump 导入和导出操作来产生新的库。&lt;/p&gt;
&lt;h4 id=&#34;241-常见的页类型&#34;&gt;2.4.1 常见的页类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据页(B+tree Node)&lt;/li&gt;
&lt;li&gt;undo页(undo log page)&lt;/li&gt;
&lt;li&gt;系统页(system page)&lt;/li&gt;
&lt;li&gt;事务数据页(transaction system page)&lt;/li&gt;
&lt;li&gt;插入缓冲位图页(insert buffer bitmap)&lt;/li&gt;
&lt;li&gt;插入缓冲空闲列表页(insert buffer free list)&lt;/li&gt;
&lt;li&gt;未压缩的二进制大对象页(uncompressed blog page)&lt;/li&gt;
&lt;li&gt;压缩的二进制大对象页(compressed blog page)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;25-行&#34;&gt;2.5 行&lt;/h3&gt;
&lt;p&gt;InnoDB 存储引擎是面对列的(row-oriented),即数据是按行存放的。&lt;br&gt;
每个页最多允许存储16KB/2-200行记录，即7229行。&lt;/p&gt;
&lt;h2 id=&#34;3-innodb-行记录格式&#34;&gt;3 InnoDB 行记录格式&lt;/h2&gt;
&lt;p&gt;有两种格式来存放行数据: Compatct 和 Redundant。&lt;br&gt;
Redundant是为兼容旧版本而保留的，在 MySQL 5.1 版本中，默认为 Compact 行格式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我的 Mysql 8 的 row_format 是 Dynamic&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;命令 SHOW TABLE STATUS LIKE &amp;lsquo;table_name&amp;rsquo; 可以查看表使用的行格式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mytest&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mytest&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;Engine&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Version&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Row_format&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Dynamic&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Rows&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;996918&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Avg_row_length&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;71&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Data_length&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;70877184&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Max_data_length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Index_length&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Data_free&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5242880&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;Auto_increment&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Create_time&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2021&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;05&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;46&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Update_time&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Check_time&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Collation&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;utf8mb4_0900_ai_ci&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Checksum&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Create_options&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Comment&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;012&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32-compact-行记录格式&#34;&gt;3.2 Compact 行记录格式&lt;/h3&gt;
&lt;p&gt;Compact 记录头信息&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;大小(bit)&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;()&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;未知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;()&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;未知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deleted_flag&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;该行是否已被删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min_rec_flag&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;为1，若该记录是预告被定义为最小的记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n_owned&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;该记录拥有的记录数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;heap_no&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;索引堆中该条记录的排序记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;record_type&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;记录类型: 000表示普通，001为B+树节点指针，010为Infimum, 011为Supremum, 1xx保留&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;next_record&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;页中下一条记录的相对位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;total&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最后的部分即为实际每个列的数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NULL 不占该部分任何空间，即 NULL 除了占有 NULL 标志位，实际存储不占有任何空间。&lt;br&gt;
每行数据除了用户定义的列，还有两个隐藏列: 事务ID列和回滚指针列，分别为6字节和7字节的大小。&lt;br&gt;
若未定义主键，每行还会增加一个6字节的_rowid列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mytest2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latin1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ROW_FORMAT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;COMPACT&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;InnoDB 存储引擎在页内容是通过一种链表结构来串连各个行记录的。&lt;br&gt;
无论是 CHAR 类型还是 VARCHAR 类型，在 compact 格式下， NULL 值都不占用任何存储空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;32-redundant-行记录格式&#34;&gt;3.2 Redundant 行记录格式&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>cp3. Files</title>
        <link>/p/cp3.-files/</link>
        <pubDate>Fri, 02 Apr 2021 18:36:08 +0800</pubDate>
        
        <guid>/p/cp3.-files/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;该文是在下在看书过程中的学习笔记，仅限于学习交流，禁止用于商业用途。&lt;/li&gt;
&lt;li&gt;非商业用途转载请注明出处，若要详细了解书中内容，请参考原作: MySQL技术内幕（InnoDB存储引擎）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL 数据库和 InnoDB 存储数据表的各种类型文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数文件&lt;/li&gt;
&lt;li&gt;日志文件&lt;/li&gt;
&lt;li&gt;socket文件&lt;/li&gt;
&lt;li&gt;pid文件&lt;/li&gt;
&lt;li&gt;MySQL表结构文件&lt;/li&gt;
&lt;li&gt;存储引擎文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-参数文件&#34;&gt;1. 参数文件&lt;/h2&gt;
&lt;p&gt;MySQL不同于Oracle，即使没有参数文件也可以启动，此时所有的参数取决于编译MySQL时指定的默认值。&lt;br&gt;
但MySQL的启动依赖数据库目录下的mysql加构文件。&lt;/p&gt;
&lt;h3 id=&#34;11-参数&#34;&gt;1.1 参数&lt;/h3&gt;
&lt;p&gt;推荐可以通过命令SHOW VARIABLES 查看数据库中的所有参数，也可能通过LIKE来过滤参数&lt;br&gt;
从MySQL5.1开始，可以通过information_schema架构下的GLOBAL_VARIABLES视图来进行查找。&lt;/p&gt;
&lt;h3 id=&#34;12-参数类型&#34;&gt;1.2 参数类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;动态参数(dynamic)&lt;br&gt;
可以在MySQL运行过程中修改的参数，global和session关键字，表明该参数的修改是基于当前会话，不是整个实例的生命周期。&lt;br&gt;
但在下次启动MySQL实例还是会读取参数文件，因为若想修改的参数一直有效，用户需要修改参数文件。&lt;/li&gt;
&lt;li&gt;静态参数(static)&lt;br&gt;
对于静态变量的修改，会得到read only的错误提示&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-日志文件&#34;&gt;2. 日志文件&lt;/h2&gt;
&lt;p&gt;日志文件记录了MySQL数据库的各种类型活动，常见的日志文件有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;错误日志(err log)&lt;/li&gt;
&lt;li&gt;二进制日志(binlog)&lt;/li&gt;
&lt;li&gt;慢查询日志(slow query log)&lt;/li&gt;
&lt;li&gt;查询日志(log)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21-错误日志&#34;&gt;2.1 错误日志&lt;/h3&gt;
&lt;p&gt;错误日志文件记录对MySQL的启动、运动、和关闭过程。&lt;br&gt;
用户可以通过命令SHOW VARIABLES LIKE &amp;lsquo;log_error&amp;rsquo;来定位该文件，如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;log_error&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---------------+--------------------------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;                    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---------------+--------------------------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log_error&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---------------+--------------------------+&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;009&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从上面可以看到错误文件的路径和文件名，当数据库不能正常启动时，第一个必须查看的文件就是错误日志文件。&lt;/p&gt;
&lt;h3 id=&#34;22-慢查询日志&#34;&gt;2.2 慢查询日志&lt;/h3&gt;
&lt;p&gt;slow log 可以帮助 DBA 定位可能存在问题的SQL语句，从而进行SQL语句层面的优化。&lt;br&gt;
通过参数 long_query_time 来设置慢查询的阈值，默认为10（秒）。&lt;br&gt;
但在默认情况下，MySQL数据库并不启动慢查询日志，用户需要手动将其置为ON：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;long_query_time&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;long_query_time&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000000&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;003&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但mysql数据库长时间运动后，会有大量的SQL查询被记录到了慢查询日志文件中，此时可以用 mysqldumpslow命令:&lt;br&gt;
MySQL5.1开始将慢查询的日志记录放到一张表中，基名为slow_log, 表结构为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slow_log&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;Table&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slow_log&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;Create&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slow_log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;mediumtext&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query_time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock_time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rows_sent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rows_examined&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_insert_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sql_text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;mediumblob&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thread_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bigint&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CSV&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Slow log&amp;#39;&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;006&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参数log_output 指定了慢查询的输出格式，默认为FILE， 可将其设为TABLE。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;log_output&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log_output&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FILE&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;008&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log_output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;TABLE&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;log_output&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log_output&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;009&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slow_log&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;Table&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;slow_log&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;Create&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slow_log&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start_time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;UPDATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;mediumtext&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;query_time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lock_time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rows_sent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rows_examined&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_insert_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sql_text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;mediumblob&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thread_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bigint&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;NULL&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;ENGINE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CSV&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;CHARSET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;COMMENT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Slow log&amp;#39;&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;007&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参数log_output是动态的，且是全局的。&lt;br&gt;
slow_log表用的是CSV引擎，在大数据量下的查询效率不高，可以将其转为MyISAM, 并在start_time列上添加索引，&lt;br&gt;
进一步提高查询的效率。&lt;/p&gt;
&lt;p&gt;InnoSQL版本加强了对于SQL语句的捕获方式，在slow_log中增加了对于 逻辑读取(logical reads)和 物理读取(physical reads)的统计。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;物理读取指的是从磁盘进行IO读取的次数&lt;/li&gt;
&lt;li&gt;逻辑读取包含所有的读取&lt;br&gt;
从逻辑读与物理读的比例，来决定优化SQL语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过参数 long_query_io 将超过指定逻辑IO次数的SQL语句记录到slow log中，其值默认为100.&lt;br&gt;
即对于逻辑读取次数大于100的sql语句，记录到slow_log中。&lt;br&gt;
为了兼容原MYSQL数据库的运行方式，添加了参数slow_query_type，用来表示启动slow log的方式，可选值为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0：不将SQL语句记录到slow log中&lt;/li&gt;
&lt;li&gt;1: 根据运行时间将SQL语句记录到slow log&lt;/li&gt;
&lt;li&gt;2: 根据逻辑IO次数将SQL语句记录到slow log&lt;/li&gt;
&lt;li&gt;3: 根据运行时间及逻辑IO次数将SQL语句记录到slow log&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-查询日志&#34;&gt;2.3 查询日志&lt;/h3&gt;
&lt;p&gt;查询日志记录了所有对 MySQL 数据库请求的信息，无论这些请求是否被正确地执行。&lt;br&gt;
默认文件名为 主机名.log。&lt;br&gt;
从 MySQL 5.1 开始，可以将查询日志放到 MySQL 架构下的 general_log 表中。&lt;/p&gt;
&lt;h3 id=&#34;24-二进制日志&#34;&gt;2.4 二进制日志&lt;/h3&gt;
&lt;p&gt;binary log 记录了对 MySQL 数据库执行更改的所有操作，但不包括 SELECT 和 SHOW 操作。&lt;br&gt;
若操作本身并没胡导致数据库发生变化，该操作也可能会被写入二进制日志。如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;tom&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;master&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;              &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000135&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Position&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;444&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Binlog_Do_DB&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Binlog_Ignore_DB&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Executed_Gtid_Set&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;008&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binlog&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;events&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;binlog.000135&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Log_name&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000135&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pos&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Event_type&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Format_desc&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Server_id&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;End_log_pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;125&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Info&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ubuntu0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;04&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Binlog&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Log_name&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000135&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pos&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;125&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Event_type&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Previous_gtids&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Server_id&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;End_log_pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;156&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Info&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Log_name&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000135&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pos&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;156&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Event_type&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Anonymous_Gtid&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Server_id&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;End_log_pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;235&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Info&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;@@&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SESSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GTID_NEXT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ANONYMOUS&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Log_name&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000135&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pos&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;235&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Event_type&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Server_id&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;End_log_pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;310&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Info&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BEGIN&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Log_name&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000135&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pos&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;310&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Event_type&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Table_map&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Server_id&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;End_log_pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;369&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Info&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;99&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Log_name&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000135&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pos&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;369&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Event_type&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Write_rows&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Server_id&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;End_log_pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;413&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Info&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;table_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;99&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STMT_END_F&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Log_name&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binlog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000135&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pos&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;413&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Event_type&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Xid&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Server_id&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;End_log_pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;444&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Info&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;COMMIT&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* xid=57 */&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;004&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的操作中，MySQL 数据库首先进行 UPDATE 操作，返回的结果显示 Changed 为0， 即该操作未导致数据库变化。&lt;br&gt;
但是 SHOW BINLOG EVENT 显示二进制日志中对其进行了记录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二进制日志的主要作用:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;恢复(recovery)&lt;br&gt;
某些数据的恢复需要二进制日志，如数据库全备份文件恢复后，用户可以通过二进制日志进行 point-in-time 的恢复。&lt;/li&gt;
&lt;li&gt;复制(replication)&lt;br&gt;
通过复制和执行二进制日志使一台远程的 MySQL 数据库(slave或standby)与一台 MySQL 数据库(master或primary)&lt;br&gt;
进行实时同步。&lt;/li&gt;
&lt;li&gt;审计(audit)&lt;br&gt;
用户可以通过二进制日志中的信息进行审计，判断是否有注入攻击。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过配置参数 log-bin 启动二进制日志。若不指定 name, 则默认二进制日志文件名为主机名，后綴为二进制日志的序列号，所在路径为数据库所在目录:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;datadir&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datadir&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;011&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;二进制日志文件默认未启动，需要手动指定参数来启动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;影响二进制日志记录的参数：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;max_binlog_size&lt;br&gt;
单个二进制日志文件的最大值；若超过该值，则产生新的日志文件，后缀名+1，并记录到 .index文件。默认1G&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;binlog_cache_size&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若用事务的表存储引擎，所有未提交的二进制日志会被记录到一个缓存中去，待该事务提交时直接将缓冲中的数据写到二进制日志文件中，该缓冲的大小由 binlog_cache_size 控制，默认大小为 32K。&lt;/li&gt;
&lt;li&gt;该参数是基于会话的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sync_binlog&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;默认情况下，二进制日志并不是同步写到磁盘，因此当系统宕机时，会有一部分数据未写入二进制日志文件中。&lt;br&gt;
sync_binlog＝1 表示采用同步写磁盘的文件业写二进制日志；其默认值为0.&lt;/li&gt;
&lt;li&gt;即使 sync_binlog 为1，若事务在 COMMIT之前，系统宕机，但此时二进制日志已经立即写入磁盘；在数据库下次启动时，这个事务会被回滚掉，但二进制日志不能被回滚。&lt;/li&gt;
&lt;li&gt;参数 innodb_support_xa 虽然与 XA 事务有关，但也可确保二进制日志和 InnoDB 存储引擎数据文件的同步。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;binlog-do-db&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;binlog-ignore-db&lt;br&gt;
参数 binlog-do-db 和 binlog-ignore-db 表示需要写入或忽略写入哪些库的日志。默认为空，即同步所有库的日志到二进制日志。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;log-slave-update&lt;br&gt;
若需要 salve 数据库从 master 取得并执行的二进制日志写入自己的二进制日志文件，要设置参数 log-slave-update； 若要找寻 master=&amp;gt;slave=&amp;gt;slave 架构的复制，则必须设置该参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;binlog_format&lt;br&gt;
binlog_format影响记录二进制日志的格式，其值有 STATEMENT、ROW 和 MIXED。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;STATEMENT 格式记录的是日志的逻辑 SQL 语句&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;ROW 格式记录的是表的行更改情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;MIXED 格式下， MySQL 默认采用 STATEMENT 格式记录二进制日志，但在一些情况下会使用 ROW 格式。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;可能的情况如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 表的存储引擎为 NDB， 此时对表的 DML 操作都会以 ROW 格式记录。
2. 使用了 UUID(), USER(), CURRENT_USER(), FOUND_ROWS(), ROW_COUNT() 等不确定函数。
3. 使用了 INSERT DELAY 语句
4. 使用了用户定义函数（UDF）
5. 使用了临时表(temporary table)
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;binlog_format参数对存储引擎有限制:&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;存储引擎&lt;/th&gt;
&lt;th&gt;ROW格式&lt;/th&gt;
&lt;th&gt;STATEMENT格式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;InnoDB&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MyISAM&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HEAP&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MERGE&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NDB&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Archive&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSV&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Federate&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Blockhole&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;binlog_format 是动态参数，若将 binlog_format 设置为ROW，可以为数据库的恢复和复制带来更好的可靠性，&lt;br&gt;
但也会增加二进制文件的大小。&lt;br&gt;
二进制日志文件的查看，通过通过 mysqlbinlog。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-套接字文件&#34;&gt;3. 套接字文件&lt;/h2&gt;
&lt;p&gt;在UNIX系统下，可以通过UNIX域套接字连接 MySQL, 该文件由参数 socket 控制。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;socket&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---------------+-----------------------------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;                       &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---------------+-----------------------------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysqld&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysqld&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---------------+-----------------------------+&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;014&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-pid-文件&#34;&gt;4. pid 文件&lt;/h2&gt;
&lt;p&gt;MySQL 实例启动时，会将自己的进程ID写入一个pid文件，该文件由参数 pid_file 控制；；城市化位于数据库目录下。&lt;br&gt;
文件名为主机名.pid:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pid_file&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---------------+-------------------------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;                   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---------------+-------------------------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pid_file&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;best&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+---------------+-------------------------+&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;013&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-表结构定义文件&#34;&gt;5. 表结构定义文件&lt;/h2&gt;
&lt;p&gt;MySQL 数据的存储是根据表进行的，无论何种存储引擎，都有一个以 frm 为后缀名的文件记录了该表的表结构定义。&lt;br&gt;
frm文件还可以存放视图的定义。&lt;/p&gt;
&lt;h2 id=&#34;6-innodb存储引擎文件&#34;&gt;6. InnoDB存储引擎文件&lt;/h2&gt;
&lt;p&gt;每个表存储引擎还有其独有的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重做日志文件&lt;/li&gt;
&lt;li&gt;表空间文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;61-表空间文件&#34;&gt;6.1 表空间文件&lt;/h3&gt;
&lt;h4 id=&#34;611-参数-innodb_data_file_path&#34;&gt;6.1.1 参数 innodb_data_file_path&lt;/h4&gt;
&lt;p&gt;InnoDB按表空间(tablespace)来存储数据。&lt;br&gt;
ibdata1是在默认配置下的默认表空间文件，大小约为10MB的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;innodb_data_file_path&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+-----------------------+------------------------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;                  &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+-----------------------+------------------------+&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_data_file_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ibdata1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;autoextend&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;+-----------------------+------------------------+&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;015&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用户可以用多个文件组成一个表空间，并且制定其文件属性，如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[mysql]
innodb_data_file_path = /db1/mysql/ibdata1:2000M;/db2/ibdata2:2000M:autoextend
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;若上面两个文件位于不同的磁盘上，则可平均磁盘的负载，进而提高数据库的整体性能。&lt;/li&gt;
&lt;li&gt;属性 2000M 表示表空间文件的大小为 2000MB；ibdata2 的大小也为2000MB， 且可以自动增长&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;612-参数-innodb_file_per_table&#34;&gt;6.1.2 参数 innodb_file_per_table&lt;/h4&gt;
&lt;p&gt;用户可以用这个参数钭每个基于 InnoDB 存储引擎的表产生一个独立的表空间。&lt;br&gt;
其命名规则为：表名.ibd&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：这些单独的表空间文件仅存储该表的数据、索引和插入缓冲BITMAP等信息；其余信息仍在默认的表空间中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下图显示了 InnoDB 存储引擎对于文件的存储方式：&lt;br&gt;
&lt;img src=&#34;/post/mysql_innodb/images/innodb_table_files.png&#34; alt=&#34;innodb_table_files&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;62-重做日志文件redo-log-file&#34;&gt;6.2 重做日志文件(redo log file)&lt;/h3&gt;
&lt;p&gt;InnoDB 存储引擎的数据目录下默认会有两个名为 ib_logfile0 和 ib_logfile1 的文件。它们为重做日志文件。&lt;br&gt;
它们还记录了 InnoDB 存储引擎的事务日志。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当实例或介质失败(media failure)时，数据库会用重做日志恢复到掉电前的状态，以保证数据的完整性。&lt;/li&gt;
&lt;li&gt;每个 InnoDB 存储引擎至少有1个重做日志文件组(group),每个组包含至少2个重做日志谁的。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;用户可以设置多个镜像日志组(mirred log groups),将不同的文件组放到不同的磁盘上，以提高可靠性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;日志组中的重做日志文件的大小是一致的，且以循环写入的方式运行：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;InnoDB 存储引擎先写重做日志文件1，当达到文件的最后时，会切换到日志文件2；
当日志文件2也被写满，则会切换到重做日志文件1中。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下图显示了由3个文件组成的重做日志文件组：&lt;br&gt;
&lt;img src=&#34;/post/mysql_innodb/images/redo_log_file_group.png&#34; alt=&#34;redo_log_file_group&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;621-影响重做日志文件的属性&#34;&gt;6.2.1 影响重做日志文件的属性：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;innodb_log_file_size&lt;br&gt;
指定每个重做日志文件的大小，在 InnoDB 1.2.x之前，其大小不得大于等于4GB，而1.2.x版本将该限制扩大为512GB&lt;/li&gt;
&lt;li&gt;innodb_log_files_in_group&lt;br&gt;
指定重做日志文件组中文件的数量，默认为2。&lt;/li&gt;
&lt;li&gt;innodb_mirrored_log_groups&lt;br&gt;
指定日志镜像文件组的数量，默认为1，即没有镜像；若磁盘本身已经做了磁盘阵列等高可用方案，则可不开启镜像功能。&lt;/li&gt;
&lt;li&gt;innodb_log_group_home_dir&lt;br&gt;
指定日志文件组所在路径，默认为./, 表示在 MySQL 数据库的数据目录下。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;重做日志文件的大小非常重要:&lt;br&gt;
太大，则恢复时可能需要很长的时间；&lt;br&gt;
太小，则会导致一个事务的日志多次切换重做日志文件；且会导致频繁地发生 async checkpoint, 导致性能抖动：&lt;br&gt;
&lt;img src=&#34;/post/mysql_innodb/images/innodb_checkpoint_err.png&#34; alt=&#34;innodb_checkpoint_err&#34;  /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;重做日志的 capacity 变量&lt;br&gt;
该值代表了最后的检查点不能超过的阈值，或超过则须将缓冲池(innodb buffer pool)中脏页列表(flush list)&lt;br&gt;
中的部分脏数据写回磁盘，此时会阻塞用户线程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;622-重做日志和二进制日志的区别&#34;&gt;6.2.2 重做日志和二进制日志的区别&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;二进制日志记录所有与 MySQL 数据库有关的日志记录；而 InnoDB 重做日志只记录与该引擎本身的事务日志。&lt;/li&gt;
&lt;li&gt;二进制日志文件记录的是关于一个事务的具体操作内容， 即逻辑日志；而 InnoDB 存储引擎的重做日志文件记录的是关于每个页(page)的更改的物理情况。&lt;/li&gt;
&lt;li&gt;二进制日志文件仅在事务提交前进行提交，即只定磁盘一次；而在事务进行的过程中，会不断有重做日志条目(redo entry)被写入重做日志文件中。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;InnoDB 存储引擎对于不同的操作有着不同的重做日志格式，到 1.2.x 版本为止，共定义了51种类型。&lt;br&gt;
但它们有着基本的格式:&lt;br&gt;
&lt;img src=&#34;/post/mysql_innodb/images/redo_log_file_format.png&#34; alt=&#34;redo_log_file_format&#34;  /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;redo_log_type 占用1字节，表示重做日志的类型&lt;/li&gt;
&lt;li&gt;space 表示表空间的ID， 但采用压缩的方式，因此战胜的空间可能小于4字节&lt;/li&gt;
&lt;li&gt;page_no 表示页的偏移量，也采用压缩的方式&lt;/li&gt;
&lt;li&gt;redo_log_body 表示每个重做日志的数据部分，恢复时需要调用相应的函数进行解析&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;重做日志的写入要先写入一个重做日志缓冲(redo log buffer)中, 再按一定的条件顺序地写入日志文件，过程如下：&lt;br&gt;
&lt;img src=&#34;/post/mysql_innodb/images/redo_log_write_process.png&#34; alt=&#34;redo_log_write_process&#34;  /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;从重做日志缓冲往磁盘写入时，按512个字节（一个扇区)进行写入；因为扇区是写入的最小单位，帮可保证写入成功。
因此在重做日志的写入过程中不需要有doublewrite.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;623-重做日志缓冲写入磁盘的条件&#34;&gt;6.2.3 重做日志缓冲写入磁盘的条件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不论事务是否已经提交， master thread 在主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件中。&lt;/li&gt;
&lt;li&gt;参数 innodb_flush_log_at_trx_commit 控制触发写磁盘的过程，即在提交时，处理重做日志。其有效为：
&lt;pre&gt;&lt;code&gt;0: 当提交事务时，不将事务的重做日志写入磁盘，而是等主线程每秒的刷新
1: 在执行 commit 时，将重做日志缓冲同步到磁盘，即伴有 fsync 的调用
2: 在执行 commit时，将重做日志异步定到磁盘，即写到文件系统的缓冲中；因此不能保证在 commit 时肯定会写入磁盘。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;为了保证事务的ACID中的持久性，必须将 innodb_flush_log_at_trx_commit 设置为1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-小结&#34;&gt;7. 小结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;错误文件和二进制日志文件非常重要，当数据库发生任何错误时，DBA首先应该去查看错误文件，从中找出问题所在；&lt;br&gt;
也可以通过一此警告对数据库和存储引擎进行优化。&lt;/li&gt;
&lt;li&gt;可以用二进制日志来进行 point in time 的恢复及复制(replication)环境的抢建；建议启动二进制日志。&lt;/li&gt;
&lt;li&gt;表空间文件用来管理 InnoDB 存储引擎的存储，分为共享表空间和独立表空间。&lt;/li&gt;
&lt;li&gt;重做日志记录 InnoDB 存储引擎的事务日志，因此可提供可靠的事务。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>2. The Basics </title>
        <link>/p/2.-the-basics/</link>
        <pubDate>Wed, 24 Mar 2021 18:36:08 +0800</pubDate>
        
        <guid>/p/2.-the-basics/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about C++ Primer.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-使用gdb&#34;&gt;1. 使用gdb&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;print 命令&lt;br&gt;
print 默认情况下会根据变量的类型对应的格式打印变量值。&lt;br&gt;
如果需要更加灵活的变量打印格式控制，则需要使用格式控制符 (类比 C 语言中的 printf 函数)。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;常用的格式控制符包括：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;d：按十进制格式打印变量
x：按十六进制格式打印变量
t：按二进制格式打印变量
o：按八进制格式打印变量
f：按浮点数格式打印变量
c：按字符格式打印变量
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如，p/x int_val 可以以十六进制的形式打印整型变量 int_val 的值。&lt;br&gt;
但是，使用 p/t float_val 以二进制形式打印浮点型变量 float_val 时，会因为被转换为整型而出错 (二进制 1001 表示9)。这时候，需要用到另外一个查看变量的命令 examine。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;examine 命令 (缩写形式 x)&lt;br&gt;
可以查看变量在对应内存地址中的值，其命令格式为：x/[n][f][u] addr。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，可选参数 n 表示要打印的内存单元个数，默认值为1；&lt;br&gt;
f 表示上面介绍的各种格式控制符；&lt;br&gt;
u 表示要打印的内存单元长度;&lt;br&gt;
addr 表示变量的内存地址 (注意：不能是变量名)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;常用的内存单元包括：b (单字节)、h (双字节)、w (四字节)、g (八字节)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果需要以单字节为单位，以二进制的方式打印浮点变量 float_val，可以使用 GDB 命令 x/4tb &amp;amp;float_val；&lt;br&gt;
同样地，x/10dw int_array 可以四字节的方法打印以 int_array 地址开始的连续10个内存单元的值 (这正好是整型数组 int_array 10个元素的值)。&lt;/p&gt;
&lt;p&gt;display 命令可以用于当程序被 GDB 暂停时自动打印某变量的值。&lt;br&gt;
info registers 命令可以查看除浮点寄存器外的所有寄存器值。&lt;/p&gt;
&lt;h2 id=&#34;1-primitive-built-in-types&#34;&gt;1. Primitive Built-in Types&lt;/h2&gt;
&lt;h2 id=&#34;11-arithmetic-types&#34;&gt;1.1 Arithmetic Types&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;th&gt;Minimum Size&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;character&lt;/td&gt;
&lt;td&gt;8 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;wchar_t&lt;/td&gt;
&lt;td&gt;wide character&lt;/td&gt;
&lt;td&gt;16 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char16_t&lt;/td&gt;
&lt;td&gt;Unicode character&lt;/td&gt;
&lt;td&gt;16 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char32_t&lt;/td&gt;
&lt;td&gt;Unicode character&lt;/td&gt;
&lt;td&gt;32 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;short integer&lt;/td&gt;
&lt;td&gt;16 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;16 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;long integer&lt;/td&gt;
&lt;td&gt;32 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long long&lt;/td&gt;
&lt;td&gt;long integer&lt;/td&gt;
&lt;td&gt;32 bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;single-precision floating-point&lt;/td&gt;
&lt;td&gt;6 significant digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;double-precision floating-point&lt;/td&gt;
&lt;td&gt;10 significant digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long double&lt;/td&gt;
&lt;td&gt;extended-precision floating-point&lt;/td&gt;
&lt;td&gt;10 significant digits&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Deciding which Type to Unsigned&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Use an unsigned type when you know that the values cannot be negative&lt;/li&gt;
&lt;li&gt;Use int for integer arithmetic&lt;br&gt;
Use long long if your data values are larger than the minimun size of an int&lt;/li&gt;
&lt;li&gt;Do not use plain char or bool in arithmetic expressions.&lt;/li&gt;
&lt;li&gt;Use double for floating-point computations&lt;br&gt;
Float usually doesn&amp;rsquo;t have enough precision, and the cost of double-precision calculation versus single-precision is negligible. In fact, double-precision operations are even faster than sinle on some machines.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-type-convession&#34;&gt;1.2 Type Convession&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t Mix Signed and Unsigned Types&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;Expressions that mix signed and unsigned values can yield surprisning results when the signed value is negative.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Signed values are automatically converted to unsigned.&lt;br&gt;
For example, in an expression like int(-1) * unsigned(1),&lt;br&gt;
the value of this expression depends on how many bits an int has on the particular machine.&lt;br&gt;
This expression yields 429496795 on my machine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;13-literals&#34;&gt;1.3 Literals&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Specifying the Type of a Literal&lt;br&gt;
Be default, decimal literals are signed whereas octal and hexadecimal literals can be either signed or unsigned types.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;extern&lt;br&gt;
Variables must be defined exactly once but can be declared many times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;14-compound-types&#34;&gt;1.4 Compound Types&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A reference must be initialized; once initialized, a reference remains bound to its initial object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A pointer is an object in its own right, which can be assigned and copied.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A poiner need not be initialized at the time its defined, and can point to different objects over its lifetime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;we may not define a pointer to a reference, since the are not objects or don&amp;rsquo;t have addresses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The result of accessing an invalid pointer is undefined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Cpp&#34; data-lang=&#34;Cpp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// r is a reference to the pointer p
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// r refers to a pointer; assigning &amp;amp;i to r makes p point to i
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;// dereferencing r yields i, the object to which p points; changs i to 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The easiest way to understand the type of r is to read the definition right to left.&lt;br&gt;
The symbol closest to the name of the variable(in this case the &amp;amp; in &amp;amp;r) is the one that&lt;br&gt;
has the most immediate effect on the variables&amp;rsquo;s type.&lt;br&gt;
&lt;!-- raw HTML omitted --&gt;Thus, we that r is a reference! &lt;!-- raw HTML omitted --&gt;&lt;br&gt;
The rest of the declarator determines the type to which r refers.&lt;br&gt;
The next symbol, * in this case, says that the type r refers to is a pointer type.&lt;br&gt;
Finally, the base type of the declaration says that r is a reference to a pointer to an int.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It can be easier to understand complicated pointer or reference declarations if you read them from right to left.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;15-const-qualifier&#34;&gt;1.5 const qualifier&lt;/h2&gt;
&lt;p&gt;Since we cann&amp;rsquo;t change the value of a const object after we create it, it must be initialized.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Const objects are local to a file&lt;/li&gt;
&lt;li&gt;To define a single instance of a const variable, we use the keyword extern on both its definition and declaration(s);&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Cpp&#34; data-lang=&#34;Cpp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// file_1.cc defines and initializes a const that is accessible to other files
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bufSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fcn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// file_1.h
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bufSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// same bufSize as defined in file_1.cc
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The extern signifies that bufSize is not local to this file and that its definition will occur elsewhere.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To share a const object among mutiple files, you must define the variable as extern.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;151-references-to-const&#34;&gt;1.5.1 References to const&lt;/h3&gt;
&lt;p&gt;Unlike an ordinary reference, a reference to const cannot be used to change the object to which the reference is bound.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Cpp&#34; data-lang=&#34;Cpp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;errNum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;curErr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;errNum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// curErr will always point to errNum
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.14159&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// pip is a const pointer to a const object
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The easiest way to understand these declarations is to read them from right to left.&lt;br&gt;
In this case, the symbol closest to &lt;!-- raw HTML omitted --&gt;curErr&lt;!-- raw HTML omitted --&gt; is const,&lt;br&gt;
which means that curErr itself will be a const object.&lt;br&gt;
The type of that object is formed from the rest of the declarator.&lt;br&gt;
The next symbol in the declarator is *, which means that curErr is a const pointer.&lt;br&gt;
Finally, the base type of the declaration completes the type of curErr, which is a const pinter to an object of type int.&lt;br&gt;
Similary, pip is a const pointer to an object of type const double.&lt;/p&gt;
&lt;h3 id=&#34;152-top-level-const&#34;&gt;1.5.2 Top-Level const&lt;/h3&gt;
&lt;p&gt;We use the term &lt;!-- raw HTML omitted --&gt;top-level const&lt;!-- raw HTML omitted --&gt; to indiecate that the pointer itself is a const.&lt;br&gt;
When a pointer can point to a const object, we refer that const as a &lt;!-- raw HTML omitted --&gt;low-level const&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;When we copy an object, top-level consts are ignored:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Cpp&#34; data-lang=&#34;Cpp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// we cann&amp;#39;t change the value of p1; const is top-level
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ci&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// we cannot change ci; const is top-level
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ci&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// we can change p2; const is low-level
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// right-most const is top-level, left-most is not
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ci&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// const in reference type is always low-level
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ci&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// ok: copying the value of ci; top-level const in ci is ignored
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// ok: pointed-to type matches; top-level const in p3 is ignored;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copying an object doesn&amp;rsquo;t change the copied object, thus it&amp;rsquo;s immaterial whether the object copied from of copied into is const.&lt;/p&gt;
&lt;p&gt;However, &lt;!-- raw HTML omitted --&gt;low-level const is never ignored&lt;!-- raw HTML omitted --&gt;.&lt;br&gt;
When we copy an object, both objects must have the same low-level const qualification of there must be a conversion between the types of the two objects.&lt;br&gt;
Commonly, we cann convert a non-const to const but not the other way round!&lt;/p&gt;
&lt;h3 id=&#34;153constexpr-and-const-expressions&#34;&gt;1.5.3constexpr and const expressions&lt;/h3&gt;
&lt;p&gt;Variables&lt;br&gt;
declared as constexpr are implicitly const and must be initialized by constant&lt;br&gt;
expressions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Cpp&#34; data-lang=&#34;Cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 20 is a constant expression
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// mf + 1 is a constant expression
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ok only if size is a constexpr function
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;constexpr imposes a top-level const on the objects it defines.&lt;br&gt;
Like any other constant pointer, a constexpr pointer may point to a const or a&lt;br&gt;
nonconst type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Cpp&#34; data-lang=&#34;Cpp&#34;&gt;&lt;span class=&#34;k&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;nullptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// np is a constant pointer to int that is
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;null&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// type of i is const intition
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// i and j must be defined outside any function
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// p is a constant pointer to the const int i
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// p1 is a constant pointer to the int j
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;6-dealng-with-tyes&#34;&gt;6. Dealng with Tyes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://vimjc.com/gdb-print-variable.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://vimjc.com/gdb-print-variable.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>cp2. InnoDB</title>
        <link>/p/cp2.-innodb/</link>
        <pubDate>Wed, 24 Mar 2021 18:36:08 +0800</pubDate>
        
        <guid>/p/cp2.-innodb/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;该文是在下在看书过程中的学习笔记，仅限于学习交流，禁止用于商业用途。&lt;/li&gt;
&lt;li&gt;非商业用途转载请注明出处，若要详细了解书中内容，请参考原作: MySQL技术内幕（InnoDB存储引擎）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-innodb体系结构&#34;&gt;1. InnoDB体系结构&lt;/h2&gt;
&lt;p&gt;InnoDB存储引擎有多个内存块组成的一个大的内存池，负责如下工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;维护所有进程/线程要访问的内部数据结构&lt;/li&gt;
&lt;li&gt;缓存磁盘上的数据&lt;/li&gt;
&lt;li&gt;重做日志(redo log)缓冲&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11-后台线程&#34;&gt;1.1 后台线程&lt;/h3&gt;
&lt;h4 id=&#34;1-master-thread&#34;&gt;1. Master Thread&lt;/h4&gt;
&lt;p&gt;核心线程，负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性&lt;/p&gt;
&lt;h4 id=&#34;2-io-thread&#34;&gt;2. IO Thread&lt;/h4&gt;
&lt;p&gt;InnoDB存储引擎大量使用了AIO（Async IO)来处理写IO请求；&lt;br&gt;
InnoDB 1.0版本之前共有4个IO Thread: write, read, insert buffer and log IO thread&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查看InnoDB中的 IO Thread:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;engine&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/post/mysql_innodb/images/innodb_io_thread.png&#34; alt=&#34;io_thrads&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-purge-thread&#34;&gt;3. Purge Thread&lt;/h4&gt;
&lt;p&gt;事务被提交后，其所用的 undolog 可能不再需要，Purge Thread 可以回收已经使用并分配的 undo 页。&lt;br&gt;
从InnoDB 1.2版本开始，支持多个 Purge Thread, 从而加快undo页的回收；&lt;br&gt;
另外 Purge Thread 离散地读取 undo 页，可以利用磁盘的随机读取性能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;innodb_purge_threads&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_purge_threads&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;4-page-cleaner-thread&#34;&gt;4. Page Cleaner Thread&lt;/h4&gt;
&lt;p&gt;作用：将之前版本中脏页的刷新操作放到单独的单纯中完成； 其目的是为了减轻原Master Thread的工作，&lt;br&gt;
及对用户查询线程的阻塞，从而提高Innodb存储引擎的性能。&lt;/p&gt;
&lt;h3 id=&#34;12-内存&#34;&gt;1.2 内存&lt;/h3&gt;
&lt;h4 id=&#34;1-缓冲池&#34;&gt;1. 缓冲池&lt;/h4&gt;
&lt;p&gt;读操作：将从磁盘中读到的页放到缓冲池中，这一过程被称为将页‘FIX’到缓冲池中。&lt;br&gt;
后面再读相同的页时，首先判断该页是否在缓冲池中，若被命中则读取，否则读取磁盘上的页。&lt;/p&gt;
&lt;p&gt;写操作：首先修改缓冲池中的页，然后再以一定的频率刷新到磁盘上。&lt;br&gt;
页从缓冲池到磁盘上的刷新操作是通过一种Checkpoint的机制操作的，以提高数据库的整体性能。&lt;/p&gt;
&lt;p&gt;查看InnoDB存储引擎的缓冲池大学：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;innodb_buffer_pool_size&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_buffer_pool_size&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;134217728&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;009&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;缓冲池中缓存的数据页类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引页&lt;/li&gt;
&lt;li&gt;数据页&lt;/li&gt;
&lt;li&gt;undo页&lt;/li&gt;
&lt;li&gt;插入缓冲(insert buffer)&lt;/li&gt;
&lt;li&gt;自适应哈希索引(adaptive hash index)&lt;/li&gt;
&lt;li&gt;InnoDB存储的锁信息(lock info)&lt;/li&gt;
&lt;li&gt;数据字典信息（data dictionary)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/post/mysql_innodb/images/innodb_cache_objects.png&#34; alt=&#34;innodb_cache_obj&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;从 InnoDB 1.0.x开始，可以存在多个缓冲池实例，每个页根据哈希值平均分配到不同的缓冲池实例中，&lt;br&gt;
进而减少了数据库内部的资源竞争，增加其并发处理能力。&lt;/p&gt;
&lt;p&gt;我们可以通过 information_schema架构下的表 INNODB_BUFFER_POOL_STATS 来查看缓冲的状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;information_schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POOL_ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;POOL_SIZE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FREE_BUFFERS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DATABASE_PAG&lt;/span&gt;
                                         &lt;span class=&#34;n&#34;&gt;ES&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_buffer_pool_stats&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;POOL_ID&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;POOL_SIZE&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8192&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;FREE_BUFFERS&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7207&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;DATABASE_PAGES&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;977&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;003&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-lru-list-free-list-和-flush-list&#34;&gt;2. LRU List, Free List 和 Flush List&lt;/h4&gt;
&lt;p&gt;数据库中的缓冲池一般通过LRU（Latest Recent Used: 最新最近使用)算法来管理的：&lt;br&gt;
最频繁使用的页在LRU列表的前端，当缓冲池不能存放新读取到的页时，将首先释放LRU列表尾端的页。&lt;/p&gt;
&lt;p&gt;InnoDB的LRU列表中加入了 midpoint 位置：&lt;br&gt;
新读取的页，并非直接放入LRU列表的首部，而是放到midpoint位置。此算法被称为 midpoint insertion strategy.&lt;br&gt;
该默认位置在LRU列表长度的5/8处。&lt;/p&gt;
&lt;p&gt;查看midpoint参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;information_schema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;innodb_old_blocks_pct&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_old_blocks_pct&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;37&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;010&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;37表示新读取的页插入到LRU列表尾部37%的位置；在InnoDB存储引擎中，把midpoint后面的列表称为old列表，&lt;br&gt;
之前的列表称为new列表。即new列表中的页都是最为活跃的热点数据。&lt;/p&gt;
&lt;p&gt;为什么不将读取的页放到LRU列表首部？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;若直接将读取的页放到LRU首部，则某些SQL操作会使缓冲池中的页被刷新出，从而影响缓冲池的效率。
如:索引或数据的扫描操作。
若大量的非活跃操作被放入LRU列表的首部，则会把热点数据页从LRU列表中移除，从而导致InnoDB在下一次读取该页时再次访问磁盘。

InnoDB存储引擎引入了 innodb_old_blocks_time， 用于表示页读取到 midpoint 位置后，需要等多久才会被加入到LRU列表的热端，从而尽可能使得LRU列表中的热点数据不被刷出。

若用户预估活跃的热点数据不止63（100－37），可以执行下面的语句来减少热点页被刷出的概率:
mysql&amp;gt; SET GLOBAL innodb_old_blocks_pct=20;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;LRU列表创建流程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. LRU列表在DB刚启动时是空的，页都存放在Free列表中
2. 当需要从缓冲池中分页时，从Free列表中查找是否有可用的空闲页
3. 若有则将该页从Free列表中删除，放到LRU列表中
4. 否则根据LRU算法，淘汰LRU列表末尾的页，将该内存空间分配给新页
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当页从LRU列表的old部分加入到new部分时，此时发生的操作被称为 page made young； 而因为innodb_old_blocks_time的设置而导致没有从old部分移动到new部分的操作被称为page not made young。&lt;/p&gt;
&lt;p&gt;查看LRU列表及Free列表的状态:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SHOW&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;ENGINE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;INNODB&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATUS&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;--------------------&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;BUFFER POOL AND MEMORY
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--------------------&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;Total large memory allocated 136970240
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dictionary&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memory&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;allocated&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;424766&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;8192&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Free&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffers&lt;/span&gt;       &lt;span class=&#34;mi&#34;&gt;7208&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;Database&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;     &lt;span class=&#34;mi&#34;&gt;977&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Old&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;database&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;380&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Modified&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;db&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pending&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;reads&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pending&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;writes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LRU&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;single&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;made&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;young&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;young&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;youngs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;non&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;youngs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;835&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;created&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;142&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;written&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;160&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;reads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;creates&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;writes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rate&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;young&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;making&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rate&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ahead&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;evicted&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;without&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;access&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ahead&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;LRU&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;977&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unzip_LRU&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unzip&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当前Buffer pool size共有 8192 个页，即 8192 *16K=128M, 共128MB的缓冲池。&lt;br&gt;
Free buffers 表示当前 Free 列表中页的数量，&lt;br&gt;
Database pages 表示 LRU 列表中页的数量。&lt;br&gt;
Free buffers + Database pages 并不等于 Buffer pool size：&lt;br&gt;
因为缓冲池中的页还可能会被分配给其它页： 自适应哈希索引、 Lock信息、 Insert Buffer等。&lt;br&gt;
这些页不需要LRU算法维护，因此不存在于LRU列表中。&lt;/p&gt;
&lt;p&gt;pages made young: LRU列表中页移动到前端的次数&lt;br&gt;
youngs/s, non-youngs/s表示每秒这两人类操作的次数。&lt;br&gt;
Buffer pool hit rate: 缓冲率的命中率，上面例子中为100％，表示缓冲池运行状态良好。通过该值不应小于95%.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;若发生其值小于95％，则需要观察是否是由于全表扫描引起的LRU列表被污染的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;InnoDB从 1.0.x 开始支持压缩页的功能，将原来16KB的页压缩为 1KB、2KB、4KB 和 8KB。&lt;br&gt;
通过 unzip_LRU 列表来管理 非 16KB 的页。但 LRU中的页是包含了 unzip_LRU列表中的页的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;unzip_LRU如何从缓冲池中分配内存?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;unzip_LRU对不同大小的压缩页的分别管理；&lt;br&gt;
通过伙伴算法进行内存的分配。&lt;br&gt;
例如从缓冲池中申请 4KB 大小的页&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 检查 4KB 的 unzip_LRU 列表
2. 若有， 则直接使用
3. 否则， 检查 8KB 的 unzip_LRU 列表
4. 若得到空闲页，则将页分布 2 个 4KB 页，存放到 4KB 的 unzip_LRU 列表
5. 否则，从 LRU 列表中申请一个 16KB 的页，将页分为 1 个 8KB、2 个 4KB 的页，分别放到对应的 unzip_LRU 列表中。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;脏页(dirty page)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;在LRU列表中的页被修改后，被称为脏页，即缓冲池中的页和磁盘上的页的数据产生了不一致。
DB会通过 Checkpoint 机制将脏页刷新到磁盘；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而 Flush 列表中的页为 脏页列表&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LRU 列表管理缓冲池中页的可用性；Flush 列表用来管理将页刷新回磁盘， 二者互不影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面 INNODB_BUFFER_PAGE_LRU 中的 Modified db pages 显示了脏页的数量。&lt;/p&gt;
&lt;h4 id=&#34;3-重做日志缓冲redo-log-buffer&#34;&gt;3. 重做日志缓冲(redo log buffer)&lt;/h4&gt;
&lt;p&gt;InnoDB存储引擎先将重做日志信息放入重做日志缓冲区，再按一定频率将其刷新到重做日志文件。&lt;br&gt;
用户只要保证每秒产生的事务量不超过缓冲区大小即可，因为InnoDB一般会每一秒将重做日志缓冲刷新到日志文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查看重做日志缓冲区大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;innodb_log_buffer_size&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_log_buffer_size&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16777216&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;006&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般 8～16MB 的重做日志缓冲池足以满足大部分的应用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重做日志缓冲刷新到磁盘重做日志的三种情况：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Master Thread 每一秒           将重做日志缓冲刷新到重做日志文件&lt;/li&gt;
&lt;li&gt;每个事务提交时会                 将重做日志缓冲刷新到重做日志文件&lt;/li&gt;
&lt;li&gt;当重做日志缓冲池剩余空间小于1/2时， 将重做日志缓冲刷新到重做日志文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-额外的内存池&#34;&gt;4. 额外的内存池&lt;/h4&gt;
&lt;p&gt;InnoDB通过 内存堆(heap) 对内存进行管理；&lt;br&gt;
在对一些数据结构本身的内存进行分配时，需要从 &lt;!-- raw HTML omitted --&gt;[额外的内存池]&lt;!-- raw HTML omitted --&gt; 中进行申请，&lt;br&gt;
当&lt;!-- raw HTML omitted --&gt; 该区域&lt;!-- raw HTML omitted --&gt; 的内存不够时，会从缓冲池中进行申请。&lt;br&gt;
例如，分配了缓冲池(innodb_buffer_pool)，&lt;br&gt;
每个缓冲池中的&lt;!-- raw HTML omitted --&gt;帧缓冲(frame buffer)&lt;!-- raw HTML omitted --&gt;和对应的 &lt;!-- raw HTML omitted --&gt;缓冲控制对象(buffer control block)&lt;!-- raw HTML omitted --&gt;，&lt;br&gt;
这些对象记录了 LRU， 锁， 等待信息；而这个对象的内存需要从&lt;!-- raw HTML omitted --&gt;[额外内存池]&lt;!-- raw HTML omitted --&gt;中申请。&lt;br&gt;
故在申请了很大的InnoDB缓冲池时，应相应增加该值。&lt;/p&gt;
&lt;h2 id=&#34;2-checkpoint技术&#34;&gt;2. Checkpoint技术&lt;/h2&gt;
&lt;p&gt;缓冲池的设计目的是为了协调CPU速度与磁盘速度的鸿沟，因此页的操作是先在缓冲池中完成的。&lt;br&gt;
为了避免宕机导致的缓冲池数据丢失的问题，事务数据库系统采用了 Write Ahead Log 策略：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当事务提交时，先写重做日志，再修改页。&lt;br&gt;
当数据丢失时，通过重做日志来完成数据所恢复。这就是事务ACID中的D（Durability持久性)的要求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;21-checkpoint的目的&#34;&gt;2.1 Checkpoint的目的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;缩短数据库的恢复时间&lt;/li&gt;
&lt;li&gt;缓冲池不够用时，将脏页刷新到磁盘&lt;/li&gt;
&lt;li&gt;重做日志不可时，刷新脏页&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库只需对 Checkpoint 后的重做日志进行恢复，这样大缩短了恢复时间。&lt;br&gt;
当缓冲区不够用时，根据LRU算法会溢出最近最少使用的页，若此页为脏页，则强制执行 Checkpoint, 将脏页刷新到磁盘。&lt;br&gt;
重做日志不可用是因为当前事务数据库系统对重做日志的设计是循环使用的，并非无限增长的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重做日志可以被重用的部分是指这些日志已经不再需要，若数据库宕机，数据库恢复操盘不需要这部分的重做日志，因此这部分可以被覆盖重用。&lt;br&gt;
若宕机时重做日志还需要使用，则强制产生 Checkpoint, 将缓冲池中的页至少刷新到当前重做日志的位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;InnoDB是通过 LSN(Log Sequence Number)来票房版本的，LSN 是8字节的数字，其单位是字节。&lt;br&gt;
第个页、重做日志、和 Checkpoint 都有 LSN。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过命令 SHOW ENGINE INNODB STATUS 查看 LSN：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;LOG
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;Log sequence number          3723483701
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Log&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;3723483701&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Log&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;completed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt;   &lt;span class=&#34;mi&#34;&gt;3723483701&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Log&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;written&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt;            &lt;span class=&#34;mi&#34;&gt;3723483701&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Log&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flushed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt;            &lt;span class=&#34;mi&#34;&gt;3723483701&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Added&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt;      &lt;span class=&#34;mi&#34;&gt;3723483701&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pages&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flushed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt;          &lt;span class=&#34;mi&#34;&gt;3723483701&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;checkpoint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt;           &lt;span class=&#34;mi&#34;&gt;3723483701&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;s done, 0.00 log i/o&amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;22-两种-checkpoint&#34;&gt;2.2 两种 Checkpoint&lt;/h3&gt;
&lt;h4 id=&#34;221-sharp-checkpoint&#34;&gt;2.2.1 Sharp Checkpoint&lt;/h4&gt;
&lt;p&gt;Sharp Checkpoint是默认的工作方式：在数据库关闭时，将所有的脏页都刷新到磁盘。&lt;br&gt;
参数 innodb_fast_shutdown=1。&lt;br&gt;
但若在数据库运行时使用 Sharp Checkpoint, 会大大影响数据库的可用性。&lt;/p&gt;
&lt;h4 id=&#34;222-fuzzy-checkpoint&#34;&gt;2.2.2 Fuzzy Checkpoint&lt;/h4&gt;
&lt;p&gt;InnoDB存储引擎内部使用 Fuzzy Checkpoint 进行页的刷新: 只刷新一部分脏页到磁盘。&lt;/p&gt;
&lt;h3 id=&#34;23-innodb中的几种-fuzzy-checkpoint&#34;&gt;2.3 InnoDB中的几种 Fuzzy Checkpoint:&lt;/h3&gt;
&lt;h4 id=&#34;231-master-thread-checkpoint&#34;&gt;2.3.1 Master Thread Checkpoint&lt;/h4&gt;
&lt;p&gt;以将近每秒或每十秒的速度从缓冲池的脏页列表中刷新一定比例的页到磁盘，此过程是异步的，用户查询线程不会阻塞。&lt;/p&gt;
&lt;h4 id=&#34;232-flush_lru_list-checkpoint&#34;&gt;2.3.2 FLUSH_LRU_LIST Checkpoint&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;InnoDB存储引擎需要保证LRU列表中需要有将近100个空闲页可供使用。
在InnoDB 1.1.x版本之前，需要检查 LRU 列表中是否有足够的可用空间操作发生的用户查询线程中，这会阻塞用户的查询操作；
若没有100个可用的空闲页，InnoDB会将 LRU 列表尾端的页移除。
若这些页中有脏页，则需要进行 Checkpoint, 而这些页是来自 LRU列表的，因此称为 FLUSH_LRU_LIST.

在 InnoDB 1.2.x版本开始，该检查被放在了一个单独的 Page Cleaner 线程中进行，
用户可以通过 innodb_lru_scan_depth 控制 LRU列表中可用页的数量，默认值为1024。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Async/Sync Flush Checkpoint&lt;br&gt;
重做日志不可用时，需要强制将一些页刷新到磁盘，此时脏页是从脏页列表中选取的。&lt;br&gt;
若将已经写入重做日志的LSN记为 redo_lsn, 已经刷新到到磁盘最新页的LSN记录为 checkpoint_lsn, 则：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;checkpoint_age = redo_lsn - checkpoint_lsn&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;再定义以下变量:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;async_water_mark = 75% * total_redo_log_file_size&lt;br&gt;
sync_water_mark  = 90% * total_redo_log_file_size&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;若每个重做文件的大小为1G，且定义了两个重做日志文件，则重做日志文件的总大小为2GB；
因此 async_water_mark = 1.5GB, sync_water_mark = 1.8GB，则:
1. 若 checkpoint_age &amp;lt; async_water_mark, 不需要刷新脏页到磁盘
2. 若 async_water_mark &amp;lt; checkpoint_age &amp;lt; sync_water_mark, 则触发 Async Flush,
从Flush列表中刷新足够的脏页到磁盘，使用刷新后满足 checkpoint_age &amp;lt; async_water_mark.
3. 若 checkpoint_age &amp;gt; sync_water_mark, 此场景很少发生，除非设置的重做日志文件太小，且在进行 LOAD DATA 的 BULK INSERT 操作。此时触发 Sync Flush操作，使用刷新后满足 checkpoint_age &amp;lt; async_water_mark。

从InnoDB 1.2.x版本开始， 这部分刷新操作也放到了单独的 Page Cleaner Thread中，故不会阻塞查询线程。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Dirty Page too much Checkpoint&lt;br&gt;
脏页的数量太多导致Checkpoint，保证缓冲池中有足够可用的页。&lt;br&gt;
控制参数：innodb_max_dirty_pages_pct&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;innodb_max_dirty_pages_pct&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_max_dirty_pages_pct&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000000&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;010&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Value为90表示：当缓冲池中脏页的数量占据90%时，强制进行 Checkpoint, 刷新部分脏页到磁盘。&lt;/p&gt;
&lt;h2 id=&#34;3-master-thread-工作方式&#34;&gt;3. Master Thread 工作方式&lt;/h2&gt;
&lt;p&gt;ＩnnoDB存储引擎的主要工作都是在一个单独的后台线程Master Thread中完成的。&lt;/p&gt;
&lt;h3 id=&#34;31-ｉnnodb-10x版本之前的master-thread&#34;&gt;3.1 ＩnnoDB 1.0.x版本之前的Master Thread&lt;/h3&gt;
&lt;p&gt;Master Thread 具有最高的线程优先级别，内部由多个循环(loop)组成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主循环(loop)&lt;/li&gt;
&lt;li&gt;后台循环(background loop)&lt;/li&gt;
&lt;li&gt;刷新循环(flush loop)&lt;/li&gt;
&lt;li&gt;暂停循环(suspend loop)&lt;br&gt;
Master Thread会根据数据库运行状态在这些循环中进行切换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;311-主循环loop&#34;&gt;3.1.1 主循环(loop)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数的操作是在这个循环中，其中有两大部分的操作: 每秒钟和每10秒的操作。&lt;br&gt;
Loop循环是通过thread sleep来实现，这意味着不精确的操作在负载大的情况下会有延迟。&lt;br&gt;
但InnoDB通过其它方法来尽量保证这个频率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;每秒一次的操作包括：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;日志缓冲刷新到磁盘，即使这个事务还未提交（总是）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;即使某个事务还未提交，InnoDB存储引擎仍然会每秒将重做日志缓冲中的内容刷新到重做日志文件；
所以再大的事务提交的时间也是很短的。
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;合并插入缓冲(可能)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;合并插入缓冲(Insert Buffer)并不是每秒都会发生的；InnoDB会判断当前一秒内发生的IO次数是否小于5次，
若小于5次，InnoDB认为当前的IO压力很小，可以执行合并插入缓冲的操作。
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;至多刷新100个InnoDB的缓冲池中的脏页到磁盘(可能)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;InnoDB存储引擎通过判断当前缓冲池中脏页的比例(buf_get_modified_ratio_pct)是否超过了配置文件中innodb_max_dirty_pages_pct这个参数(默认为90％)；
若超过了这个阈值，则需要将100个脏页到磁盘中。
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;如果当前无用户活动，则切换到background loop(可能)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;每10秒的操作：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;刷新100个脏页到磁盘(可能的情况下)&lt;/li&gt;
&lt;li&gt;合并至多5个插入缓冲(总是)&lt;/li&gt;
&lt;li&gt;将日志缓冲刷新到磁盘（总是）&lt;/li&gt;
&lt;li&gt;删除无用的Undo页(总是)&lt;/li&gt;
&lt;li&gt;刷新100个或10个脏页到磁盘(总是)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;若过去10秒内磁盘的IO操作是否小于200，则InnoDB认为当前有足够的磁盘IO操作能力，因此将100个脏页刷新到磁盘；&lt;br&gt;
然后InnoDB会合并插入缓冲，这次的合并插入缓冲操作总是会在这个阶段进行。&lt;br&gt;
之后，InnoDB会进行一次将日志缓冲刷新到磁盘的操作。&lt;br&gt;
接着InnoDB会执行full purge操作: 删除无用的Undo页;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;对表进行update、delete操作时，原先的行被标记为删除, 但为了一致性读的关系(consistent read),需要保留这些行的版本信息。
但在full purge过程中，InnoDB会判断当前事务系统中已被删除的行是否可以被删除（比如有时会有查询操作需要读取之前版本的undo信息），若是，则InnoDB会立即将其删除。
InnoDB在执行pull purge时，每次最多尝试回收20个undo页。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;然后，InnoDB会判断缓冲池中脏页的比例(buf_get_modified_ratio_pct), 若有超过70％的脏页，则刷新100个脏页到磁盘； 否则只需刷新10％的脏页到磁盘。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;312-background-loop&#34;&gt;3.1.2 background loop&lt;/h4&gt;
&lt;p&gt;若当前无用户活动(数据库空闲时)或数据库关闭(shutdown),则会切换到这个循环。&lt;br&gt;
background loop会执行以下操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除无用的Undo页(总是)&lt;/li&gt;
&lt;li&gt;合并20个插入缓冲(总是)&lt;/li&gt;
&lt;li&gt;跳回到主循环(总是)&lt;/li&gt;
&lt;li&gt;不断刷新100个页直到符合条件(可能，跳到flush loop中完成)。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;若flush loop中也无事可做，InnoDB会切换到suspend_loop, 将 Master Thread 挂起，等等事件的发生。&lt;br&gt;
若用户启用了InnoDB存储引擎，但没有使用任何InnoDB存储引擎的表，则 Master Thread 将问题处于挂起状态。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;313-master-thread-完整伪代码&#34;&gt;3.1.3 master thread 完整伪代码:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;master_thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;thread_sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_one_second_ios&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;most&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf_get_modified_ratio_pct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_max_dirty_pages_pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;background&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// do things once per ten second;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_ten_seconds_ios&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;most&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;purge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf_get_modified_ratio_pct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;background&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;purge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf_get_modified_ratio_pct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_max_dirty_pages_pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;suspend&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;suspend&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;suspend_thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;waiting&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32-innodb-12x版本之前的-master-thread&#34;&gt;3.2 InnoDB 1.2.x版本之前的 Master Thread&lt;/h3&gt;
&lt;p&gt;在 1.0.x之前的Master Thread实现中，InnoDB对于IO是有限制的: 在缓冲池向磁盘刷新时做了一定的硬编码(hard coding)。&lt;br&gt;
但这种限制限制了InnoDB对（SSD）磁盘IO的性能，尤其是写入性能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;伪代码显示，InnoDB最大只会刷新100个脏页到磁盘，合并20个插入缓冲。
但在写入密集型的应用中，每秒会产生大于100个的脏页，和大于20个的插入缓冲，此时Master Thread将会很慢。
同时，若从宕机中恢复时，由于大量数据未刷新到磁盘，会导致恢复的时间太久；尤其是insert buffer。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;321-innodb_io_capacity&#34;&gt;3.2.1 innodb_io_capacity&lt;/h4&gt;
&lt;p&gt;但在InnoDB Pluin(InnoDB1.0.x版本开始)中提供了参数 innodb_io_capacity,其表示磁盘IO的吞吐时不时，默认值为200。&lt;br&gt;
要刷新到磁盘的页的数量，根据 innodb_io_capacity 的百分比来进行控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在合并插入缓冲时，合并插入缓冲的数量为 innodb_io_capacity 值的 5％&lt;/li&gt;
&lt;li&gt;在从缓冲区刷新脏页时，刷新脏页的数量为 innodb_io_capacity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若用户使用了高性能磁盘，可以调高 innodb_io_capacity的值，使其符合磁盘IO的吞吐量。&lt;/p&gt;
&lt;h4 id=&#34;322-innodb_max_dirty_pages_pct&#34;&gt;3.2.2 innodb_max_dirty_pages_pct&lt;/h4&gt;
&lt;p&gt;另外，innodb_max_dirty_pages_pct 的默认值在 InnoDB 1.0.x 版本之前是90，有点太大了；&lt;br&gt;
InnoDB在每秒刷新缓冲池和flush loop时会判断该值，若该值大于innodb_max_dirty_pages_pct，才刷新100个脏页，&lt;br&gt;
若有很大的内存或数据库服务器的压力过大，此时刷新脏页的速度反而会下降；同时宕机恢复阶段会耗时更久。&lt;br&gt;
经过测试， innodb_max_dirty_pages_pct默认值变为了75；这样即加快了刷新脏页的频率，又保证了磁盘IO的负载。&lt;/p&gt;
&lt;h4 id=&#34;323-innodb_adaptive_flushing自适应地刷新&#34;&gt;3.2.3 innodb_adaptive_flushing（自适应地刷新)&lt;/h4&gt;
&lt;p&gt;该值影响每秒刷新脏页的数量，InnoDB会通过一个 buf_flush_get_desired_flush_rate 函数来判断需要刷新脏页最合适的数量。&lt;br&gt;
buf_flush_get_desired_flush_rate 通过判断产生重做日志的速度来决定最合适的刷新脏页数量。&lt;br&gt;
因此，当脏页在缓冲池中的比例小于 innodb_max_dirty_pages_pct 时，也会刷新一定量的脏页。&lt;/p&gt;
&lt;h4 id=&#34;324-innodb_purge_batch_size&#34;&gt;3.2.4 innodb_purge_batch_size&lt;/h4&gt;
&lt;p&gt;该参数控制每次full purge回收的Undo页的数量，其默认值为20，可以动态地对其进行修改。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;innodb_max_dirty_pages_pct&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_max_dirty_pages_pct&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000000&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;010&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;innodb_purge_batch_size&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_purge_batch_size&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;009&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_purge_batch_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rows&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affected&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;000&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从 InnoDB 1.0.x 版本开始， Master Thread 的伪代码会变为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;master_thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;thread_sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_one_second_ios&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_io_capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_io_capacity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf_get_modified_ratio_pct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_max_dirty_pages_pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_io_capacity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;adaptive_flush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;desired&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;amount&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;activity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;background&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// do things once per ten second;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last_ten_seconds_ios&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_io_capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_io_capacity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_io_capacity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;purge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf_get_modified_ratio_pct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_io_capacity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_io_capacity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;background&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;full&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;purge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_io_capacity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_io_capacity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dirty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf_get_modified_ratio_pct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_max_dirty_pages_pct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flush&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;suspend&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;suspend&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;suspend_thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;waiting&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;events&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;查看 master thread 的状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/post/mysql_innodb/images/master_thread_status_1.0.x.png&#34; alt=&#34;master_thread_status_1.0.x&#34;  /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;45 1_second：  主循环进行了45次
45 sleeps:    每秒挂起的操作进行了45次，说明负载不大
4 10_second:  10秒一次的活动进行了4次，符合 1:10.
6 background: background loop 进行了6次
6 flush:      flush loop也进行了6次
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;33-innodb-12x版本的-master-thread&#34;&gt;3.3 InnoDB 1.2.x版本的 Master Thread&lt;/h3&gt;
&lt;p&gt;InnoDB 1.2.x再次对 Master Thread 进行了优化。&lt;br&gt;
伪代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InnoDB&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;srv_master_do_idle_tasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// 之前版本中每10秒的操作
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;srv_master_do_active_tasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 之前每秒中的操作
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;srv_master_do_idle_tasks() 是之前版本中每10秒的操作，&lt;br&gt;
srv_master_do_active_tasks() 是之前每秒中的操作，&lt;br&gt;
同时对于刷新脏页的操作，从 Master Thread 线程分享到一个单独的 Page Cleaner Thread，&lt;br&gt;
从而减轻了 Master Thread 的工作，提高了系统的并发性。&lt;/p&gt;
&lt;h2 id=&#34;4-innodb-关键特性&#34;&gt;4. InnoDB 关键特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;插入缓冲(Insert Buffer)&lt;/li&gt;
&lt;li&gt;两次写(Double Write)&lt;/li&gt;
&lt;li&gt;自适应哈希索引(Adaptive Hash Index)&lt;/li&gt;
&lt;li&gt;异步IO(Async IO)&lt;/li&gt;
&lt;li&gt;刷新邻接页(Flush Neighbor Page)&lt;br&gt;
上述特性为InnoDB存储引擎带来更好的性能和可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41-插入缓冲&#34;&gt;4.1 插入缓冲&lt;/h3&gt;
&lt;h4 id=&#34;411-insert-buffer&#34;&gt;4.1.1 Insert Buffer&lt;/h4&gt;
&lt;p&gt;Insert Buffer 和数据页一样，是物理页的一个组成部分。&lt;br&gt;
在InnoDB中，主键是行唯一的标识符，行记录的插入顺序是按主键递增的顺序进行插入的；&lt;br&gt;
因此插入聚集索引(Primary Key)是按顺序的，不需要磁盘的随机读取。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但若主键类是 UUID 这样的类，则插入和辅助索引一样，都是随机的&lt;br&gt;
若插入的自增主键是指定的值，而不是NULL，则也可能导致非连续插入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若数据表中有一个非唯一聚集索引，则在进行插入操作时，数据页的存放还是按主键进行顺序存放的，&lt;br&gt;
但是对于非聚集索引叶子节点的插入不是顺序的，这时需要离散地访问非聚集索引页，&lt;br&gt;
由于随机读取的存在导致了插入操作的性能下降。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在某些情况下，辅助索引的插入是(比较)顺序的，如时间字段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于非聚集索引的插入和更新操作，并非每次都直接插入到索引中，而是先判断插入的非聚集索引页是否在缓冲池中，&lt;br&gt;
若在，则直接插入；否则先放入到一个 Insert Buffer 对象中。&lt;br&gt;
然后以一定的频率和情况进行 Insert Buffer 和 辅助索引叶子节点的 merge 操作，&lt;br&gt;
通过将多个插入合并到一个操作中，大大提高了非聚集索引的插入性能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Insert Buffer 的使用需要同时满足以下两个条件:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;索引是辅助索引 (secondary index)&lt;/li&gt;
&lt;li&gt;索引不是唯一的 (not unique)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;但若程序进行大量的插入操作，且都涉及了不唯一的非聚集索引(使用了 Insert Buffer)，若此时数据库宕机，&lt;br&gt;
会有大量的 Insert Buffer 未合并到非聚集索引中去，此时恢复时间会很长。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;辅助索引不能是唯一的， 因为在插入缓冲时，数据库并不去查找索引页来判断插入记录的唯一性一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/post/mysql_innodb/images/insert_buffer_status.png&#34; alt=&#34;insert_buffer_status&#34;  /&gt;&lt;br&gt;
上图中显示了插入缓冲的状态信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;seg size:       当前 Insert Buffer 的大小为11336 x 16KB = 177MB
free list len:  空闲列表的长度
size：          已经合并记录页的数量
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;黑体部分第2行显示了插入性能的提高:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inserts：      插入的记录数
merged recs:  合并的插入记录数
merges:       合并的次数，即实际读取页的次数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;merges : merged recs 大约为 1:3, 表示插入缓冲将对于非聚集索引页的离散IO逻辑请求大约降低了2/3。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Insert Buffer存在一个问题：在写密集的情况下，插入缓冲会战胜过多的缓冲池内存(innodb_buffer_pool),&lt;br&gt;
默认最大可占用1/2的缓冲池内存。这将对其它操作带来一定的影响。&lt;br&gt;
修改 IBUF_POOL_SIZE_PER_MAX_SIZE 可对插入缓冲的大小进行控制，如将其值改为3，则最大用1/3的缓冲池内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;412-change-buffer&#34;&gt;4.1.2 Change Buffer&lt;/h4&gt;
&lt;p&gt;InnoDB 从1.0.x开始引入了 Change Buffer, 可以对 DML操作(INSERT, DELETE, UPDATE)都进行缓冲: Insert Buffer, Delete Buffer, Purge Buffer。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Change Buffer适用的对象也是非唯一的辅助索引&lt;br&gt;
对一条记录的UPDATE操作分为两个过程:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;将记录票房为已删除&lt;/li&gt;
&lt;li&gt;真正将记录删除&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Delete Buffer 对应UPDATE操作的第一个过程: 将记录标记为删除&lt;br&gt;
Purge Buffer 对应UPDATE操作的第二个过程: 将记录真正地删除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;innodb_change_buffering 参数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;参数 innodb_change_buffering 用来开发各种Buffer的选项: inserts, deletes, purges, changes, all, none。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;inserts, deletes, purges 为前面讨论过的三种情况，&lt;br&gt;
changes 表示启用inserts 和 deletes&lt;br&gt;
all 表示启用所有&lt;br&gt;
none表示都不启用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该参数默认值为 all&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;innodb_change_buffer_max_size 参数&lt;br&gt;
参数 innodb_change_buffer_max_size 用来控制 Change Buffer 可使用的最大内存数量&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;innodb_change_buffer_max_size&amp;#39;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_change_buffer_max_size&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;011&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;默认值为25，表示最多使用1/4的缓冲池内存空间，该参数的最大有效值为50&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;通过命令 SHOW ENGINE INNODB STATUS 查看状态：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;-------------------------------------
INSERT BUFFER AND ADAPTIVE HASH INDEX
-------------------------------------
Ibuf: size 1, free list len 3078, seg size 3080, 0 merges
merged operations:
 insert 0, delete mark 0, delete 0
discarded operations:
 insert 0, delete mark 0, delete 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;merged operations 和 discard operations 下面显示 Change Buffer 中每个操作的次数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;insert 表示 Insert Buffer
delete mark 表示 Delete Buffer
delete 表示 Purge Buffer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;discard operations 表示当Change Buffer 发生 merge 时，表已经被删除，无需将记录 merge 到辅助索引中。&lt;/p&gt;
&lt;h4 id=&#34;413-insert-buffer-的内部实现&#34;&gt;4.1.3 Insert Buffer 的内部实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Insert Buffer的数据结构是一棵B+树。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在MySQL4.1之前的版本中，每张表都有一棵Insert Buffer B+树； 但在现在的版本中，只有一棵全局Insert Buffer B+树，负责对所有的表的辅助索引进行Insert Buffer。&lt;br&gt;
这棵B+树位于共享表空间中，默认为 ibdata1中。&lt;br&gt;
因此，若试图通过独立表空间ibd文件恢复表中数据是地，会导致 CHECK TABLE 失败，因为表的辅助索引中的数据可能还在 Insert Buffer中，所以对 ibd 文件进行恢复后，还要进行 REPAIR TABLE 操作来重建表上的所有辅助索引。&lt;/p&gt;
&lt;p&gt;Insert Buffer 的 B+村中，非叶子节点存放的是查询键值(search key)， 构造如下图:&lt;br&gt;
&lt;img src=&#34;/post/mysql_innodb/images/insert_buffer_tree_not_leaf.png&#34; alt=&#34;insert_buffer_tree_not_leaf&#34;  /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;search key 共占用9个字节:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;space 占用4字节，表示待插入记录所在表的表空间id, InnoDb存储引擎的每个表有一个唯一的 space id，可以通过 space id查询得知是哪张表。&lt;/li&gt;
&lt;li&gt;marker 占用 1 字节，用来兼容老版本的 Insert Buffer&lt;/li&gt;
&lt;li&gt;offset 占用 4 字节，表示页所在的偏移量&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;当一个辅助索引要插入到页(space, offset)时，若该页不在缓冲池中，则InnoDB会先按上述规则构造一个search key,
然后查询 Insert Buffer 这棵B+树，再将这条记录插入到 Insert Buffer B+ 树的叶子节点中。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于插入到叶子节点的记录，并非直接将待插入的记录插入，面是需要根据如下的规则进行构造:&lt;br&gt;
&lt;img src=&#34;/post/mysql_innodb/images/insert_buffer_tree_leaf.png&#34; alt=&#34;insert_buffer_tree_leaf&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;metadata 占用 4 字节，其内容如下表所示:&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;字节&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IBUF_REC_OFFSET_COUNT&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBUF_REC_OFFSET_TYPE&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBUF_REC_OFFSET_FLAGS&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;IBUF_REC_OFFSET_COUNT 保存两个字节的整数，用来排序每个记录进入Insert Buffer的顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;从 Insert Buffer 叶子节点的第5列开始(secondary index record)，就是实际插入记录的各个字段了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Insert Buffer Bitmap&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;启用Insert Buffer 索引后，辅助索引页(space, page_no)中的记录可能被插入到 Insert Buffer B+树中，&lt;br&gt;
为保证Merge Insert Buffer页成功，要有一个特殊的页（Insert Buffer Bitmap）来标记每个辅助索引页(space, page_no)的可用空间。&lt;/p&gt;
&lt;p&gt;每个Insert Buffer Bitmap页可追踪16384个辅助索引页，即256个区(Extent).&lt;br&gt;
每个Insert Buffer Bitmap页都在在16364个页的第二个页中。&lt;br&gt;
每个辅助索引页在 Insert Buffer Bitmap 页中占用 4 位，由下表中的三个部分组成：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;大小(bit)&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IBUF_BITMAP_FREE&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;表示该辅助索引页中的可用空间数量，可取值为:&lt;!-- raw HTML omitted --&gt;０: 无可用剩余空间　&lt;!-- raw HTML omitted --&gt;1：剩余空间大于1/32页(512字节)&lt;!-- raw HTML omitted --&gt;2: 剩余空间大于1/16页&lt;!-- raw HTML omitted --&gt;3: 剩余空间大于1/8页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBUF_BITMAP_BUFFERED&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1 表示该辅助索引页有记录被缓存到 Insert Buffer B+树中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBUF_BITMAP_IBUF&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1 表示该页为 Insert Buffer B+树的索引页&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;414-merge-insert-buffer&#34;&gt;4.1.4 Merge Insert Buffer&lt;/h4&gt;
&lt;p&gt;若要实现插入记录的辅助索引页不在缓冲池中，则须将辅助索引记录先插入到这棵B＋树中，&lt;br&gt;
Merge Insert Buffer的操作可能发生在以下几种情况下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;辅助索引页被读取到缓冲池时&lt;br&gt;
在执行正常的SELECT查询操作时，要检查Insert Buffer Bitmap页，然后确认该辅助索引页是否有记录在Insert Buffer B+树中；&lt;br&gt;
若有，则将B+树中该页的记录插入到该辅助索引页中；&lt;br&gt;
对该页多次的记录操作通过一次操作合并到了原有的辅助页中，会大幅提高性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert Buffer Bitmap 页追踪到该辅助索引页无可用空间时&lt;br&gt;
若插入辅助索引记录时检测到插入记录后可用空间小于1/32页，则会强制进行一次合并操作: 强制读取辅助索引页，将Insert Buffer B+树中该页的记录及待插入的记录插入到辅助索引页中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master Thread&lt;br&gt;
在Master Thread线程中每秒或每十少会进行一次 Merge Insert Buffer 的操作，但每次merge的页数量不同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然辅助索引页是排好序的，但对于 Insert Buffer 页的选择，InnoDB随机地选择Insert Buffer B+树的一个页，读取该页中的space及之后所需要数量的页。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;若进行 merge 时，要进行 merge 的胶已经被删除，则可以直接选择已经被 Insert/Change Buffer 的数据记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;42-两次写&#34;&gt;4.2 两次写&lt;/h3&gt;
&lt;p&gt;Insert Buffer 带给 InnoDB 存储引擎性能上的提升，doublewrite带来的是数据页的可靠性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;部分写失效: 正在写入某个页(16KB)到表中，只写了前部分页(4KB)就发生了宕机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;doublewrite: 在此时页本身已经损坏，对其进行重做是无意义的，因此需要通过页的副本来不愿该页，再进行重做&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/post/mysql_innodb/images/doublewrite_acch.png&#34; alt=&#34;doublewrite_acch&#34;  /&gt;&lt;br&gt;
doublewrite由两人部分组成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;doublewrite buffer ，大小为2MB，&lt;/li&gt;
&lt;li&gt;物理磁盘上共享表空间中连续的128个页，即2个区(extent)，大小也为2MB&lt;br&gt;
在刷新缓冲池中的脏页时，不会直接定入磁盘：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;而是通过memcpy函数将脏页先复制到内存中的 doublewrite buffer，&lt;/li&gt;
&lt;li&gt;通过 doublewrite buffer 再分两次，每次1MB顺序地写入共享表空间的物理磁盘上，然后fsync同步到磁盘&lt;br&gt;
因为 doublewrite 页是连续的，因此这个过程是顺序写的，开销不大。&lt;/li&gt;
&lt;li&gt;将 doublewrite buffer 中的页写入各个表空间文件中，此时的写入是离散的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;观察 doublewrite 运行情况扣命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql root@127.0.0.1:test&amp;gt; show global status like &#39;innodb_dblwr%&#39;\G
***************************[ 1. row ]***************************
Variable_name | Innodb_dblwr_pages_written
Value         | 22
***************************[ 2. row ]***************************
Variable_name | Innodb_dblwr_writes
Value         | 6

2 rows in set
Time: 0.012s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到, doublewrite  共写了22个页，但实际的写入次数为6次，一般会符合 64：1.&lt;br&gt;
若 Innodb_dblwr_pages_written : Innodb_dblwr_writes 远小于 64:1, 说明系统写入压力不是很高。&lt;/p&gt;
&lt;p&gt;若用户有多个从服务器，且需要提供较快的性能，可以通过 skip_innodb_doublewrite 参数禁止使用 doublewrite 功能；但这可能会导致前面提及的写失效问题。&lt;/p&gt;
&lt;h3 id=&#34;43-自适应哈希索引&#34;&gt;4.3 自适应哈希索引&lt;/h3&gt;
&lt;p&gt;InnoDB会监控对表上各索引页的查询，若观察到建立哈希索引可以提升速度，则会建立哈希索引，称之为自适应哈希索引(Adaptive Hash Index, AHI)。&lt;br&gt;
AHI 是通过缓冲池的 B+ 树页构造而来，且不需要对整张表构造，因此建立速度很快。&lt;br&gt;
InnoDB会自动根据访问频率和模式来自动地为某些热点页建立哈希索引。&lt;br&gt;
AHI 要求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AHI 对这个页的连续访问模式（查询条件）是一样的。&lt;/li&gt;
&lt;li&gt;以该模式访问了100次&lt;/li&gt;
&lt;li&gt;页通过该模式访问了N次，其中 N＝ 页中记录 *1/16&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;哈希索引只能用来搜索等值的查询，如 SELECT ＊ FROM T WHERE IDX ＝ &amp;lsquo;XXX&amp;rsquo;; 范围等其它查询不能使用哈希索引。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以通过 hash searches : non-hash searches 大概了解使用哈希索引后的效率，AHI是由 InnoDB存储引擎摈的，默认处于开启状态。&lt;/p&gt;
&lt;h3 id=&#34;44-异步io&#34;&gt;4.4 异步IO&lt;/h3&gt;
&lt;p&gt;AIO： 若用户发出一条索引扫描的查询，则这条SQL语句可能要扫描多个索引页，即进行多次IO操作，此时没有必要扫描一个页并等等其完成后再进行下一次扫描；用户可以在发出一个IO请求后立即发出其它IO请求，当全部IO请求发送完毕后，等待所有IO操作的完成。&lt;br&gt;
AIO 可以进行 IO Merge 操作: 将多个 IO 合并为 1 个IO，可以提高 IOPS的性能。&lt;br&gt;
例如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用户需要访问的页为(space, page_no)为：（8，6）、（8，7），（8，8），每个页的大小为 16KB，
同步IO需要进行3次IO操作，但AIO会发现这三个页是连续的（space, page_no）,
因此 AIO 底层会发送一个 IO 请求，从 (8,6)开始，读取 48KB 的页。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 InnoDB 1.1.x 之前，AIO 是通过 InnoDB存储引擎中的代码来模拟实现的，但从 InnoDB 1.1.x 开始，提供了内核级别 AIO 的支持，称为 Native AIO.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此在编译或运动该版本的 MySQL 时，需要 libaio 库的支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;通过 innodb_use_native_aio 参数来控制是否启用 Native AIO&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MySQL&#34; data-lang=&#34;MySQL&#34;&gt;&lt;span class=&#34;n&#34;&gt;mysql&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;127&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;variables&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;innodb_use_native_aio&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;G&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;***************************&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Variable_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;innodb_use_native_aio&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Value&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;set&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;012&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;官方测试显示，启用 Native AIO, 恢复速度可以提高 75%。&lt;br&gt;
在 InnoDB 中，read ahead 方式的读取、脏页的刷新 全部由 AIO 完成。&lt;/p&gt;
&lt;h3 id=&#34;45-刷新邻接页&#34;&gt;4.5 刷新邻接页&lt;/h3&gt;
&lt;p&gt;Flush Neighbor Page 特性: 当刷新一个脏页时，InnoDB 会检测该页所在区(extent)的所有页，若是脏页则一起进行刷新。&lt;br&gt;
但要考虑两个问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否可能将不太脏的页进行了写入，而该页之后又会很快变成脏页？&lt;/li&gt;
&lt;li&gt;固态硬盘有着较高的 IOPS， 是否需要这个特性？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;InnoDB 从 1.2.x开始提高了 innodb_flush_neighbors 参数，用来控制是否启用该特性。&lt;/p&gt;
&lt;h2 id=&#34;5-启动关闭和恢复&#34;&gt;5 启动、关闭和恢复&lt;/h2&gt;
&lt;p&gt;在关闭 InnoDB 存储引擎时，参数 innodb_fast_shutdown 影响着表的存储引擎为InnoDB的行为。&lt;br&gt;
该参数可取值为 0, 1, 2； 默认为1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 表示在数据库关闭时，InnoDB要完成所有的 full purge 和 merge insert buffer, 并将所有的脏页刷新回磁盘。这样耗时较久，若在进行 InnoDB 升级时，须将这个参数设为0，再关闭数据库&lt;/li&gt;
&lt;li&gt;1 表示不需要完成上述的 full purge 和 merge insert buffer 操作，但是会刷新缓冲池中的一些脏页到磁盘中。&lt;/li&gt;
&lt;li&gt;2 表示完成 full purge 和 merinsert buffer 操作，也不刷新缓冲池中的数据脏页到磁盘；而是将日志都写入日志文件。虽然不会有事务的丢失，但是下次数据库启动时，会进行恢复操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;参数 innodb_force_recovery 会影响整个 InnoDB 存储引擎恢复的状况。参数值如下（默认为0）:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;0 表示在需要恢复时，进行所有的恢复操作； 当不能进行有效恢复时，如数据页发生了corruption，数据库可能会宕机，并把错误写入错误日志中。&lt;/li&gt;
&lt;li&gt;1(SRV_FORCE_IGNORE_CORRUPT): 忽略检查到的 corrupt 页&lt;/li&gt;
&lt;li&gt;2(SRV_FORCE_NO_BACKGROUND):  阻止 Master Thread 线程的运行，若 Master Thread 线程要进行 full merge 操盘，会导致 crash&lt;/li&gt;
&lt;li&gt;3(SRV_FORCE_NO_TRX_UNDO):    不进行事务的回滚操作&lt;/li&gt;
&lt;li&gt;4(SRV_FORCE_NO_IBUF_MERGE):  不进行插入缓冲的合并操作&lt;/li&gt;
&lt;li&gt;5(SRV_FORCE_NO_UNDO_LOG_SCAN): 不查看撤销日志(Undo Log), InnoDB 会将未提交的事务视为已提交&lt;/li&gt;
&lt;li&gt;6(SRV_FORCE_NO_LOG_REDO):      不进行前滚的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;若 innodb_force_recovery 参数值大于0，用户可以对表进行 select, create 和 drop 操作，但不允许 insert, update 和 delete 这类 DML 操作。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>ZK 1. Introduction to Zookeeper </title>
        <link>/p/zk-1.-introduction-to-zookeeper/</link>
        <pubDate>Wed, 24 Mar 2021 18:36:08 +0800</pubDate>
        
        <guid>/p/zk-1.-introduction-to-zookeeper/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about Zookeeper.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-zookeeper是一个顺序一致性的分布式数据库&#34;&gt;1. zookeeper是一个顺序一致性的分布式数据库&lt;/h3&gt;
&lt;p&gt;多个节点共同组成一个分布式集群，挂掉任意一个节点，&lt;br&gt;
数据库仍然可以正常工作，客户端无感知故障切换。&lt;br&gt;
客户端向任意一个节点写入数据，其它节点可以立即看到最新的数据。&lt;br&gt;
&lt;img src=&#34;/post/zookeeper/images/zk_intro.png&#34; alt=&#34;intro&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-zookeeper的内部是一个keyvalue存储引擎&#34;&gt;2. zookeeper的内部是一个key/value存储引擎&lt;/h3&gt;
&lt;p&gt;key是以树状的形式构成了一个多级的层次结构，&lt;br&gt;
每一个节点既可以存储数据，又可以作为一个目录存放下一级子节点。&lt;br&gt;
&lt;img src=&#34;/post/zookeeper/images/zk_intro_1.png&#34; alt=&#34;intro&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-zookeeper提供了创建修改和删除节点的api&#34;&gt;3. zookeeper提供了创建、修改、和删除节点的api&lt;/h3&gt;
&lt;p&gt;如果父节点没有创建，字节点会创建失败。如果父节点还有子节点，父节点不可以被删除。&lt;/p&gt;
&lt;h3 id=&#34;4-zookeeper和客户端之间以socket形式进行双向通讯&#34;&gt;4. zookeeper和客户端之间以socket形式进行双向通讯&lt;/h3&gt;
&lt;p&gt;客户端可以主动调用服务器提供的api，服务器可以主动向客户端推送事件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有多种事件可以watch:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;节点的增删改
子节点的增删改
会话状态变更等。  
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5-zookeeper的事件有传递机制&#34;&gt;5. zookeeper的事件有传递机制&lt;/h3&gt;
&lt;p&gt;字节点的增删改触发的事件会向上层依次传播，所有的父节点都可以收到字节点的数据变更事件;&lt;br&gt;
所以层次太深或子节点太多会给服务器的事件系统带来压力。&lt;/p&gt;
&lt;h3 id=&#34;6-zookeeper满足了cap定理的分区容忍性p和强一致性c牺牲了高性能a&#34;&gt;6. zookeeper满足了CAP定理的分区容忍性P和强一致性C，牺牲了高性能A&lt;/h3&gt;
&lt;p&gt;但zookeeper的存储能力是有限的，当节点层次太深、子节点太多、或节点数据太大，都会影响数据库的稳定性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以zookeeper不是一个用来做高并发高性能的数据库，zookeeper一般只用来存储配置信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从下图可以看出当服务器节点增多时，复杂度会随之提升。&lt;br&gt;
&lt;img src=&#34;/post/zookeeper/images/zk_communication.jpjg&#34; alt=&#34;zk_communication&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;客户端连接zookeeper时会选择任意一个节点保持长链接，后续通信都是通过这个节点进行读写的。&lt;br&gt;
如果该节点挂了，客户端会尝试去连接其它节点。&lt;/p&gt;
&lt;h3 id=&#34;7-zookeeper-会话&#34;&gt;7. zookeeper 会话&lt;/h3&gt;
&lt;p&gt;服务器会为每个客户端连接维持一个会话对象，会话的ID会保存在客户端。&lt;br&gt;
会话对象也是分布式的，意味着当一个节点挂掉了，客户端使用原有的会话ID去连接其它节点，&lt;br&gt;
服务器维持的会话对象还继续存在，并不需要重新创建一个新的会话。&lt;/p&gt;
&lt;h4 id=&#34;71-会话关闭&#34;&gt;7.1 会话关闭&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;若客户端主动发送会话关闭消息，服务器的会话对象会立即删除。&lt;/li&gt;
&lt;li&gt;若客户端不小心奔溃了，没有发送关闭消息，服务器的会话对象还会继续存在一段时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这个时间是会话的过期时间，在创建会话的时候客户端会提供这个参数，一般是10到30秒。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;72-zookeeper-的生命周期&#34;&gt;7.2 zookeeper 的生命周期&lt;/h4&gt;
&lt;p&gt;zookeeper的节点可以是持久化(Persistent)的，也可以是临时(Ephemeral)的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;临时的节点&lt;br&gt;
会话关闭后，会话期间创建的所有临时节点会立即消失。&lt;br&gt;
一般用于服务发现系统，将服务进程的生命期和zookeeper子节点的生命期绑定在一起，&lt;br&gt;
起到了实时监控服务进程的存活的效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;顺序节点&lt;br&gt;
类似于mysql里面的auto_increment属性。&lt;br&gt;
服务器会在顺序节点名称后自动增加自增的唯一后缀，保持节点名称的唯一性和顺序性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保护(Protected)节点&lt;br&gt;
这个节点非常特殊，但是也非常常用。在应用服务发现的场合时，客户端创建了一个临时节点后，&lt;br&gt;
服务器节点挂了，连接断开了，然后客户端去重连到其它的节点。&lt;br&gt;
因为会话没有关闭，之前创建的临时节点还存在，但是这个时候客户端却无法识别去这个临时节点是不是自己创建的，&lt;br&gt;
因为节点内部并不存储会话ID字段。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;所以客户端会在节点名称上加上一个GUID前缀，这个前缀会保存在客户端，这样它就可以在重连后识别出哪个临时节点是自己之前创建的了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/post/zookeeper/images/zk_reconnect.png&#34; alt=&#34;zk_reconnect&#34;  /&gt;&lt;br&gt;
如上图所示，我们要提供api.user这样的服务，这个服务有3个节点，每个节点有不一样的服务地址，&lt;br&gt;
这3个节点各自将自己的服务注册进zk，然后消费者进行读取zk得到api.user的服务地址，&lt;br&gt;
任选一个节点地址进行服务调用。&lt;/p&gt;
&lt;p&gt;为了简单化，这里就没有提供权重参数了。在一个正式的服务发现里一般都有权重参数，&lt;br&gt;
用于调整服务节点之间的流量分配。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保护顺序临时(ProtectedEphemeralSequential)子节点&lt;br&gt;
具体以下特性：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;是一个临时节点，会话关闭后节点自动消失。
是个顺序节点，zookeeper自动在名称后面增加自增后缀，确保节点名称的唯一性。
是个保护性节点，节点前缀增加了GUID字段，确保断开重连后临时节点可以和客户端状态对接上。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/34156758&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/34156758&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Algorithm: 3. Reverse Linked List</title>
        <link>/p/algorithm-3.-reverse-linked-list/</link>
        <pubDate>Tue, 23 Mar 2021 15:00:52 +0800</pubDate>
        
        <guid>/p/algorithm-3.-reverse-linked-list/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about algorithms.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-how-to-reverse-a-list&#34;&gt;1. How to reverse a list?&lt;/h3&gt;
&lt;p&gt;We can reverse linked list in two ways, which is iteration and recursion.&lt;/p&gt;
&lt;h4 id=&#34;11-iteration&#34;&gt;1.1 Iteration&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1. We define three pointer variables: prev, cur, next and header,
prev points to the previous node, which points to NULL at the beginning of the iteration.
cur points to the current node,
next points to the next node.
header tells us where the first node is.

2. We make next point to current node&#39;s next node,
	make the current node&#39;s next pointer point to the previous node,

3. make the prev point to current node, and make the cur point the next node.

4. Repeat until the last node(the cur points to NULL).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL&lt;br&gt;
Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL&lt;br&gt;
&lt;img src=&#34;/post/algorithm/images/reverse_linked_list.jpg&#34; alt=&#34;reverse_linked_list&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;12-recursion&#34;&gt;1.2 Recursion&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;base case: the last node, whose next is null.&lt;/li&gt;
&lt;li&gt;reverse nodes after head node recursively.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;func ReverseListR(head *Node) *Node {&lt;br&gt;
if nil == head.Next {&lt;br&gt;
return head&lt;br&gt;
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;last := ReverseListR(head.Next)
head.Next.Next = head
head.Next = nil
return last
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;last := ReverseListR(head.Next)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/post/algorithm/images/reverse_linked_list_r1.jpg&#34; alt=&#34;r1&#34;  /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After ReverseListR, we get the following linked list&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/post/algorithm/images/reverse_linked_list_r2.jpg&#34; alt=&#34;r2&#34;  /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;head.Next.Next = head&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/post/algorithm/images/reverse_linked_list_r3.jpg&#34; alt=&#34;r3&#34;  /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;head.Next = nil&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/post/algorithm/images/reverse_linked_list_r4.jpg&#34; alt=&#34;r4&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-implementation&#34;&gt;2. Implementation&lt;/h3&gt;
&lt;h4 id=&#34;21-iteration&#34;&gt;2.1 Iteration&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;reverse_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;construct_node_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;nd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;nd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%p, val: %d, next: %p&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;construct_node_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;print_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Val&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReverseList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;next&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ConstructList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;nd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;Val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nd&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nd&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;prev&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nd&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;header&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PrintList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%p, val: %d, next: %p\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cur&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ConstructList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;PrintList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReverseList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;PrintList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;22-recursion&#34;&gt;2.2 Recursion&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReverseListR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReverseListR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;last&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Reference&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/86745433&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/86745433&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://leetcode-cn.com/problems/reverse-linked-list/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;leetcode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Algorithm: 2. Remove Char From String</title>
        <link>/p/algorithm-2.-remove-char-from-string/</link>
        <pubDate>Tue, 23 Mar 2021 14:30:27 +0800</pubDate>
        
        <guid>/p/algorithm-2.-remove-char-from-string/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about algorithms.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-how-to-remove-charcter-from-a-string&#34;&gt;1. How to remove charcter from a string?&lt;/h3&gt;
&lt;p&gt;Basically, we have two pinters, i and j;&lt;br&gt;
i is the index of iteration, and j is the index of the target character.&lt;br&gt;
After the iteration, we set the bit indexed by j to &amp;lsquo;\0&amp;rsquo;;&lt;/p&gt;
&lt;h3 id=&#34;2-implementation&#34;&gt;2. Implementation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;RemoveChar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;123 45 6&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;before remove: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RemoveChar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ret: %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;after remove: %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Reference&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/w3cnote/insertion-sort.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.runoob.com/w3cnote/insertion-sort.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Note: MySQL</title>
        <link>/p/note-mysql/</link>
        <pubDate>Mon, 15 Mar 2021 19:00:52 +0800</pubDate>
        
        <guid>/p/note-mysql/</guid>
        <description>&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&#34;1-事务&#34;&gt;1. 事务&lt;/h2&gt;
&lt;h3 id=&#34;11-事务的四个重要特性acid&#34;&gt;1.1 事务的四个重要特性(ACID)：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原子性（Atomicity）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;  事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;一致性（Consistency）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    指事务将数据库从一种状态转变为另一种一致的的状态。事务开始前和结束后，数据库的完整性约束没有被破坏。
    例如工号带有唯一属性，如果经过一个修改工号的事务后，工号变的非唯一了，则表明一致性遭到了破坏。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;隔离性（Isolation）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    要求每个读写事务的对象对其他事务的操作对象能互相分离，即该事务提交前对其他事务不可见。
    也可以理解为多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。

    注：MySQL 通过锁机制来保证事务的隔离性。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;持久性（Durability）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    事务一旦提交，则其结果就是永久性的
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;12-事务的隔离级别&#34;&gt;1.2 事务的隔离级别&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    SQL 标准定义的四种隔离级别被 ANSI（美国国家标准学会）和 ISO/IEC（国际标准）采用，每种级别对事务的处理能力会有不同程度的影响。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;READ UNCOMMITTED（读未提交）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;  初始化测试数据库：
    SET @@session.transaction_isolation = &#39;READ-UNCOMMITTED&#39;;
    create database test;
    use test;
    create table test(id int primary key);
    insert into test(id) values(1);
  1. 打开终端1，开启一个事务，修改ID为1的记录更新为2：
    SET @@session.transaction_isolation = &#39;READ-UNCOMMITTED&#39;;
    begin;
    update test set id = 2 where id = 1;
    select * from test; -- 此时看到一条ID为2的记录
  2. 打开终端2，开启一个事务后查看表中的数据
    SET @@session.transaction_isolation = &#39;READ-UNCOMMITTED&#39;;
    begin;
    select * from test; -- 此时看到一条 ID 为 2 的记录

最后一步读取到了 mysql 终端 1 中未提交的事务（没有 commit 提交动作），即产生了 脏读 ，大部分业务场景都不允许脏读出现，
但是此隔离级别下数据库的并发是最好的。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;READ COMMITTED（读已提交）&lt;br&gt;
一个事务可以读取另一个已提交的事务，多次读取会造成不一样的结果，此现象称为不可重复读问题，Oracle 和 SQL Server 的默认隔离级别。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;  1. 登录 mysql 终端 1，开启一个事务，将 ID 为 1 的记录更新为 2 ，并确认记录数变更过来。
    SET @@session.transaction_isolation = &#39;READ-COMMITTED&#39;;
    begin;
    update test set id = 2 where id = 1;
    select * from test; -- 此时看到一条记录为 2
  2. 登录 mysql 终端 2，开启一个事务后，查看表中的数据。
    begin;
    select * from test; -- 此时看一条 ID 为 1 的记录
  3. 登录 mysql 终端 1，提交事务。
    commit;
  4. 切换到 mysql 终端 2。
    select * from test; -- 此时看到一条 ID 为 2 的记录

mysql 终端 2 在开启了一个事务之后，在第一次读取 test 表（此时 mysql 终端 1 的事务还未提交）时 ID 为 1 ，
在第二次读取 test 表（此时 mysql 终端 1 的事务已经提交）时 ID 已经变为 2 ，说明在此隔离级别下已经读取到已提交的事务。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;REPEATABLE READ（可重复读）&lt;br&gt;
该隔离级别是 MySQL 默认的隔离级别，&lt;br&gt;
在同一个事务里， select 的结果是事务开始时时间点的状态，因此，同样的 select 操作读到的结果会是一致的，&lt;br&gt;
但是，会有 幻读 现象。&lt;br&gt;
MySQL 的 InnoDB 引擎可以通过 next-key locks 机制（参考下文 行锁的算法 一节）来避免幻读。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;准备测试数据库表：
    SET @@session.transaction_isolation = &#39;REPEATABLE-READ&#39;;
    create database test;
    use test;
    create table test(id int primary key,name varchar(20));

1. 登录 mysql 终端 1，开启一个事务
  SET @@session.transaction_isolation = &#39;REPEATABLE-READ&#39;;
  begin;
  select * from test; -- 无记录
2. 登录 mysql 终端 2，开启一个事务。
  begin;
  select * from test; -- 无记录
3. 切换到 mysql 终端 1，增加一条记录并提交。
  insert into test(id,name) values(1,&#39;a&#39;);
  commit;
4. 切换到 msyql 终端 2。
  select * from test; --此时查询还是无记录
  通过这一步可以证明，在该隔离级别下已经读取不到别的已提交的事务，如果想看到 mysql 终端 1 提交的事务，在 mysql 终端 2 将当前事务提交后再次查询就可以读取到 mysql 终端 1 提交的事务。
5. 此时接着在 mysql 终端 2 插入一条数据。
  insert into test(id,name) values(1,&#39;b&#39;); -- 此时报主键冲突的错误

明明在第 5 步没有数据，为什么在这里会报错呢？其实这就是该隔离级别下可能产生的问题，MySQL 称之为 幻读 。注意我在这里强调的是 MySQL 数据库，Oracle 数据库对于幻读的定义可能有所不同。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;SERIALIZABLE（序列化）&lt;br&gt;
在该隔离级别下事务都是串行顺序执行的，MySQL 数据库的 InnoDB 引擎会给读操作隐式加一把读共享锁，&lt;br&gt;
从而避免了脏读、不可重读复读和幻读问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;1. 登录 mysql 终端 1，开启一个事务，并写入一条数据。
  SET @@session.transaction_isolation = &#39;SERIALIZABLE&#39;;
  begin;
  insert into test(id) values(1);
2. 登录 mysql 终端 2，开启一个事务。
  begin;
  select * from test; -- 此时会一直卡住
3. 立马切换到 mysql 终端 1,提交事务。
  commit;

一旦事务提交，msyql 终端 2 会立马返回 ID 为 1 的记录，否则会一直卡住，直到超时，其中超时参数是由 innodb_lock_wait_timeout 控制。由于每条 select 语句都会加锁，所以该隔离级别的数据库并发能力最弱，
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;13-各个隔离级别下产生的一些问题&#34;&gt;1.3 各个隔离级别下产生的一些问题&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;隔离级别&lt;/th&gt;
&lt;th&gt;脏读&lt;/th&gt;
&lt;th&gt;不可重复读&lt;/th&gt;
&lt;th&gt;幻读&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;读未提交&lt;/td&gt;
&lt;td&gt;可以出现&lt;/td&gt;
&lt;td&gt;可以出现&lt;/td&gt;
&lt;td&gt;可以出现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;读已提交&lt;/td&gt;
&lt;td&gt;不允许出现&lt;/td&gt;
&lt;td&gt;可以出现&lt;/td&gt;
&lt;td&gt;可以出现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可重复读&lt;/td&gt;
&lt;td&gt;不允许出现&lt;/td&gt;
&lt;td&gt;不允许出现&lt;/td&gt;
&lt;td&gt;可以出现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;序列化&lt;/td&gt;
&lt;td&gt;不允许出现&lt;/td&gt;
&lt;td&gt;不允许出现&lt;/td&gt;
&lt;td&gt;不允许出现&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;2-锁&#34;&gt;2. 锁&lt;/h2&gt;
&lt;h3 id=&#34;21-锁的类型&#34;&gt;2.1 锁的类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;共享锁 （也称为 S 锁）：允许事务读取一行数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;可以使用 SQL 语句 select * from tableName where... lock in share mode; 手动加 S 锁。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;独占锁 （也称为 X 锁）：允许事务删除或更新一行数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;可以使用 SQL 语句 select * from tableName where... for update; 手动加 X 锁。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;S 锁和 S 锁是 兼容 的（即读共享），X 锁和其它锁都 不兼容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;为了实现多粒度的锁机制，InnoDB 还有两种内部使用的 意向锁 ，由 InnoDB 自动添加，且都是表级别的锁。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;意向共享锁 （IS）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;事务即将给表中的各个行设置共享锁，事务给数据行加 S 锁前必须获得该表的 IS 锁。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;意向排他锁 （IX）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;事务即将给表中的各个行设置排他锁，事务给数据行加 X 锁前必须获得该表 IX 锁。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;意向锁的主要目的是为了使得 行锁 和 表锁 共存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行级锁和表级意向锁的兼容性:&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;锁类型&lt;/th&gt;
&lt;th&gt;X&lt;/th&gt;
&lt;th&gt;IX&lt;/th&gt;
&lt;th&gt;S&lt;/th&gt;
&lt;th&gt;IS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;冲突&lt;/td&gt;
&lt;td&gt;冲突&lt;/td&gt;
&lt;td&gt;冲突&lt;/td&gt;
&lt;td&gt;冲突&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IX&lt;/td&gt;
&lt;td&gt;冲突&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;td&gt;冲突&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;冲突&lt;/td&gt;
&lt;td&gt;冲突&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IS&lt;/td&gt;
&lt;td&gt;冲突&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;td&gt;兼容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;22-锁的算法&#34;&gt;2.2 锁的算法&lt;/h3&gt;
&lt;p&gt;InnoDB 存储引擎使用三种行锁的算法用来满足相关事务隔离级别的要求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Record Locks&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; 单个行记录上的锁
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Gap Locks&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;间隙锁，锁定一个范围，但不包括记录本身。GAP锁的目的，是为了防止同一事务的两次当前读，出现幻读的情况。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Next-key Locks&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;1+2，锁定一个范围，并且锁定记录本身。对于行的查询，都是采用该方法，主要目的是解决幻读的问题。
该锁就是 Record Locks 和 Gap Locks 的组合，即锁定一个范围并且锁定该记录本身。
InnoDB 使用 Next-key Locks 解决幻读问题。需要注意的是，如果索引有唯一属性，则 InnnoDB 会自动将 Next-key Locks 降级为 Record Locks。
举个例子，如果一个索引有 1, 3, 5 三个值，则该索引锁定的区间为 (-∞,1], (1,3], (3,5], (5,+ ∞) 。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;23-锁的优化建议&#34;&gt;2.3 锁的优化建议&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1. 合理设计索引，让 InnoDB 在索引键上面加锁的时候尽可能准确，尽可能的缩小锁定范围，避免造成不必要的锁定而影响其他 Query 的执行。
2. 尽可能减少基于范围的数据检索过滤条件，避免因为间隙锁带来的负面影响而锁定了不该锁定的记录。
3. 尽量控制事务的大小，减少锁定的资源量和锁定时间长度。
4. 在业务环境允许的情况下，尽量使用较低级别的事务隔离，以减少 MySQL 因为实现事务隔离级别所带来的附加成本
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;3-存储引擎&#34;&gt;3. 存储引擎&lt;/h2&gt;
&lt;h3 id=&#34;31-myisam&#34;&gt;3.1 MyISAM&lt;/h3&gt;
&lt;p&gt;使用这个存储引擎，每个MyISAM在磁盘上存储成三个文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;（1）frm文件：存储表的定义数据
（2）MYD文件：存放表具体记录的数据
（3）MYI文件：存储索引
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;frm和MYI可以存放在不同的目录下。MYI文件用来存储索引，但仅保存记录所在页的指针，索引的结构是B+树结构。&lt;br&gt;
下面这张图就是MYI文件保存的机制：&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/myisam_myi_index.jpg&#34; alt=&#34;myi&#34;  /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;从这张图可以发现，这个存储引擎通过MYI的B+树结构来查找记录页，再根据记录页查找记录。
并且支持全文索引、B树索引和数据压缩。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;32-myisam-支持的三种数据类型&#34;&gt;3.2 MyISAM 支持的三种数据类型&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;（1）静态固定长度表
这种方式的优点在于存储速度非常快，容易发生缓存，而且表发生损坏后也容易修复。缺点是占空间。这也是默认的存储格式。

（2）动态可变长表
优点是节省空间，但是一旦出错恢复起来比较麻烦。

（3）压缩表
上面说到支持数据压缩，说明肯定也支持这个格式。在数据文件发生错误时候，可以使用check table工具来检查，而且还可以使用repair table工具来恢复。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;MyISAM不支持事务，但是这也意味着他的存储速度更快&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-innodb&#34;&gt;3.2 InnoDB&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;InnoDB是默认的数据库存储引擎，他的主要特点有：
（1）可以通过自动增长列，方法是auto_increment。

（2）支持事务。默认的事务隔离级别为可重复度，通过MVCC（并发版本控制）来实现的。

（3）使用的锁粒度为行级锁，可以支持更高的并发；

（4）支持外键约束；外键约束其实降低了表的查询速度，但是增加了表之间的耦合度。

（5）配合一些热备工具可以支持在线热备份；

（6）在InnoDB中存在着缓冲管理，通过缓冲池，将索引和数据全部缓存起来，加快查询的速度；

（7）对于InnoDB类型的表，其数据的物理组织形式是聚簇表。所有的数据按照主键来组织。数据和索引放在一块，都位于B+数的叶子节点上；

当然InnoDB的存储表和索引也有下面两种形式：

（1）使用共享表空间存储：所有的表和索引存放在同一个表空间中。

（2）使用多表空间存储：表结构放在frm文件，数据和索引放在IBD文件中。分区表的话，每个分区对应单独的IBD文件，分区表的定义可以查看其他文章。使用分区表的好处在于提升查询效率。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;对于InnoDB来说，最大的特点在于支持事务。但是这是以损失效率来换取的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-memory&#34;&gt;3.3 Memory&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;将数据存在内存，为了提高数据的访问速度，每一个表实际上和一个磁盘文件关联。文件是frm。

（1）支持的数据类型有限制，比如：不支持TEXT和BLOB类型，对于字符串类型的数据，只支持固定长度的行，VARCHAR会被自动存储为CHAR类型；

（2）支持的锁粒度为表级锁。所以，在访问量比较大时，表级锁会成为MEMORY存储引擎的瓶颈；

（3）由于数据是存放在内存中，一旦服务器出现故障，数据都会丢失；

（4）查询的时候，如果有用到临时表，而且临时表中有BLOB，TEXT类型的字段，那么这个临时表就会转化为MyISAM类型的表，性能会急剧降低；

（5）默认使用hash索引。

（6）如果一个内部表很大，会转化为磁盘表。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4-索引&#34;&gt;4. 索引&lt;/h2&gt;
&lt;h3 id=&#34;41-聚簇索引和非聚簇索引辅助索引&#34;&gt;4.1 聚簇索引和非聚簇索引(辅助索引)&lt;/h3&gt;
&lt;p&gt;判断是否是聚簇索引就看数据和索引是否在一个文件中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;innodb&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;1. 只能有一个聚簇索引，但是有很多非聚簇索引
2. 向innodb插入数据的时候，必须要包含一个索引的key值
3. 这个索引的key值，可以是主键，如果没有主键，那么就是唯一键，如果没有唯一键，那么就是一个自生成的6字节的rowid
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;innodb的索引用的B+树, 索引和数据存储在一起，找到索引即可读取对应的数据&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/innodb_index.webp&#34; alt=&#34;innodb_index&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;myisam&lt;br&gt;
myisam也用B+树索引,但索引和存储数据的地址在一起，找到索引的地址值，再通过地址找到对应的数据&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/myisam_index.webp&#34; alt=&#34;myisam_index&#34;  /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-回表&#34;&gt;4.2 回表&lt;/h3&gt;
&lt;p&gt;我们创建一张案例表演示一下什么是回表&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE user_test(
id INT PRIMARY KEY AUTO_INCREMENT,-- id为主键
uname VARCHAR(20) ,
age INT,
gender VARCHAR(10),
 KEY `idx_uname` (`uname`) -- 索引选择为名字
)ENGINE = INNODB;

INSERT INTO user_test VALUES(1,&#39;张三&#39;,18,&#39;男&#39;);
INSERT INTO user_test VALUES(NULL,&#39;马冬梅&#39;,19,&#39;女&#39;);
INSERT INTO user_test VALUES(NULL,&#39;赵四&#39;,18,&#39;男&#39;);
INSERT INTO user_test VALUES(NULL,&#39;王老七&#39;,22,&#39;男&#39;);
INSERT INTO user_test VALUES(NULL,&#39;刘燕&#39;,16,&#39;女&#39;);
INSERT INTO user_test VALUES(NULL,&#39;万宝&#39;,26,&#39;男&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&#34;language-select&#34; data-lang=&#34;select&#34;&gt;-- 当我们表中有主键索引的时候，我们再去设置一个uname为索引，那么此时这条sql语句的查询过程应该如下：
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/post/jobs_knowledge/images/select_all.webp&#34; alt=&#34;select_all&#34;  /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;首先先根据uname索引查询到id，再根据id查询到行的信息
这样的操作走了两棵B+树，就是回表
当根据普通索引查询到聚簇索引的key值之后，再根据key值在聚簇索引中获取数据
我们可以发现这样的操作是很浪费时间的，因此我们日常操作的时候，尽量减少回表的次数
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;43-索引覆盖&#34;&gt;4.3 索引覆盖&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;select id,uname from table where uname = &#39;张三&#39;;
-- 根据uname 可以直接查询到id，uname两个列的值，直接返回即可
-- 不需要从聚簇索引查询任何数据，此时叫做索引覆盖
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;44-最左匹配&#34;&gt;4.4 最左匹配&lt;/h3&gt;
&lt;p&gt;主键(一般为一个列)&amp;mdash;&amp;mdash;&amp;ndash;&amp;gt;联合主键(多个列)&lt;br&gt;
索引&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&amp;gt;联合索引(可能包含多个索引列)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-- 假设有一张表，有id，name，age，gender四个字段，id是主键，name，age是组合索引列
-- 组合索引使用的时候必须先匹配name，然后匹配age

select * from table where name = ? and age = ? ;-- 生效
select * from table where name = ?;-- 生效
select * from table where age = ? ;-- 不生效
select * from table where age = ? and name = ? ;-- 生效

--在mysql内部有优化器会调整对应的顺序
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;45-索引下推&#34;&gt;4.5 索引下推&lt;/h3&gt;
&lt;p&gt;mysql5.7之后，默认支持的一个特点&lt;br&gt;
举一个例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-- mysql里的三层架构:
-- 客户端:JDBC
-- 服务端:server
-- 存储引擎:数据存储

select * from table where name = ? and age = ? ;
在没有索引下推之前，根据name从存储引擎中获取符合规则的数据，在server层对age进行过滤
有索引下推之后，根据name、age两个条件从存储引擎中获取对应的数据

分析：有索引下推的好处，如果我们有50条数据，我们通过过滤会得到10条数据，如果没有索引下推，会先获取50条再去排除得到10条，而有了下推之后，我们会直接在存储引擎就过滤成了10条
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;46-索引和数据文件&#34;&gt;4.6 索引和数据文件&lt;/h3&gt;
&lt;p&gt;MySQL的数据位置在/var/lib/mysql/目录;&lt;br&gt;
InnoDB存储引擎的数据库表对应两个文件，MYISAM存储引擎数据库表对应3个文件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.frm文件是存储的是表结构，两个存储引擎都一样
.ibd文件是InnoDB的索引+数据
.MYI（I：index）和.MYD（D：data）文件分别是MYISAM的索引字段的索引结构和数据文件，
也就是说MYISAM存储引擎的索引和数据是分开的，而InnoDB存储引擎的数据和索引是在一个文件里的。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;5-innodb和myisam的一些不同&#34;&gt;5. InnoDB和MYISAM的一些不同&lt;/h3&gt;
&lt;h4 id=&#34;51-myisam索引实现非聚集&#34;&gt;5.1 MYISAM索引实现（非聚集）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引文件和数据文件是分离的（非聚集）&lt;/li&gt;
&lt;li&gt;数据、行记录是存储在MYD文件:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;假如col1是索引字段, 那么这一列是存储在以B+Tree的结构来组织的MYI文件里;
然后他的叶子节点的data部分存储的是索引所在行记录的磁盘文件地址，
根据磁盘文件地址指针就可以从MYD文件里快速的找到我们的这一行记录。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;51-innodb索引实现聚集&#34;&gt;5.1 InnoDB索引实现（聚集）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;表数据文件本身就是按B+Tree组织的一个索引结构文件&lt;/li&gt;
&lt;li&gt;聚集索引-叶子节点包含了完整的数据记录&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.frm文件和MYISAM一样都是表结构文件，
.ibd文件就是MYISAM的MYI和MYD文件的合并，索引文件和数据文件都存储到一个文件。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;InnoDB索引B+树的叶子节点和MYISAM有点区别，它存储的是索引所在行的所有字段。&lt;br&gt;
这样就不用回表了，性能比MYISAM高，而MYISAM查找到索引所在行记录的磁盘地址后还要回MYD文件读取一次。&lt;/p&gt;
&lt;h4 id=&#34;52-为什么innodb表必须有主键并且推荐使用整型的自增主键&#34;&gt;5.2 为什么InnoDB表必须有主键，并且推荐使用整型的自增主键？&lt;/h4&gt;
&lt;p&gt;mysql设计的就是innoDB把你的数据和主键索引用B+Tree来组织的，没有主键他的数据就没有一个结构来存储。&lt;br&gt;
建innoDB表的时候没有建主键，表也能建成功&lt;/p&gt;
&lt;p&gt;为什么推荐使用整型的主键？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;我们想象一下查找过程，是把节点load到内存然后在内存里去比较大小，也就是在查找的过程中要不断的去进行数据的比对。
假设UUID，既不自增也不是整形。问一下，是整形的1&amp;lt;2比较的效率高还是字符串的“abc”和“abe”比较的效率高呢？
显然是前者，因为字符串的比较是转换成ASICI一位一位的比，如果最后一位不一样，比到最后才比较出大小，
就比整形比较慢多了，存储空间来说，整形更小。索引越节约资源越好。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;为什么是自增的主键呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;B-Tree的叶子节点之间是没有指针的，B+Tree优化后增加了叶子节点之间的指针，
如果我们遍历数据，从当前节点遍历完之后，就可以根据节点间的指针快速找到下一个节点去遍历。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;6-分布式和数据同步&#34;&gt;6. 分布式和数据同步&lt;/h2&gt;
&lt;p&gt;MySQL读写分离和数据同步原理&lt;/p&gt;
&lt;h2 id=&#34;7-其它数据库&#34;&gt;7. 其它数据库&lt;/h2&gt;
&lt;h4 id=&#34;mongodb&#34;&gt;MongoDB&lt;/h4&gt;
&lt;h4 id=&#34;elasticsearch&#34;&gt;ElasticSearch&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;引用&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zhoujinyi/p/3435982.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/zhoujinyi/p/3435982.html&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://developer.ibm.com/zh/technologies/databases/articles/os-mysql-transaction-isolation-levels-and-locks/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IBM：MySQL事务隔离级别和锁&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/102147497&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/102147497&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/63bda04adf38&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jianshu.com/p/63bda04adf38&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;amp;mid=2247484041&amp;amp;idx=1&amp;amp;sn=76d3bf1772f9e3c796ad3d8a089220fa&amp;amp;chksm=f9b784b8cec00dae3d52318f6cb2bdee39ad975bf79469b72a499ceca1c5d57db5cbbef914ea&amp;amp;token=2025456560&amp;amp;lang=zh_CN#rd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mp.weixin.qq.com/s?__biz=MzUxNTQyOTIxNA==&amp;amp;mid=2247484041&amp;amp;idx=1&amp;amp;sn=76d3bf1772f9e3c796ad3d8a089220fa&amp;amp;chksm=f9b784b8cec00dae3d52318f6cb2bdee39ad975bf79469b72a499ceca1c5d57db5cbbef914ea&amp;amp;token=2025456560&amp;amp;lang=zh_CN#rd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>分布式: 一致性协议Raft</title>
        <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AEraft/</link>
        <pubDate>Wed, 10 Mar 2021 18:00:52 +0800</pubDate>
        
        <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AEraft/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about distributed systems.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-一致性协议raft&#34;&gt;1. 一致性协议Raft&lt;/h3&gt;
&lt;p&gt;Raft 也是一个 一致性算法，和 Paxos 目标相同。但它还有另一个名字 - 易于理解的一致性算法。Paxos 和 Raft 都是为了实现 一致性 产生的。这个过程如同选举一样，参选者 需要说服 大多数选民 (服务器) 投票给他，一旦选定后就跟随其操作。Paxos 和 Raft 的区别在于选举的 具体过程 不同。&lt;/p&gt;
&lt;p&gt;Raft 协议将 Server 进程分成三类，分别是 Leader，Candidate，Follower。一个 Server 进程在某一时刻，只能是其中 一种类型，但这不是固定的。不同的时刻，它可能拥有不同的类型，一个 Server 进程的类型是如何改变的，后面会有解释。&lt;br&gt;
在一个由 Raft 协议组织的集群中有三类角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leader（领袖）&lt;/li&gt;
&lt;li&gt;Follower（群众）&lt;/li&gt;
&lt;li&gt;Candidate（候选人）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就像一个民主社会，领袖由民众投票选出。刚开始没有 领袖，所有集群中的 参与者 都是 群众，那么首先开启一轮大选。在大选期间 所有群众 都能参与竞选，这时所有群众的角色就变成了 候选人，民主投票选出领袖后就开始了这届领袖的任期，然后选举结束，所有除 领袖 的 候选人 又变回 群众角色 服从领袖领导。&lt;/p&gt;
&lt;p&gt;这里提到一个概念 「任期」，用术语 Term 表达。关于 Raft 协议的核心概念和术语就这么多，而且和现实民主制度非常匹配，所以很容易理解。&lt;br&gt;
&lt;img src=&#34;/post/distributed_system/images/raft.webp&#34; alt=&#34;raft&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-leader选举过程&#34;&gt;2. Leader选举过程&lt;/h3&gt;
&lt;p&gt;一个最小的 Raft 民主集群需要 三个参与者（如下图：A、B、C），这样才可能投出多数票。&lt;br&gt;
初始状态 ABC 都是 Follower，然后发起选举这时有 三种 可能的情形发生。&lt;br&gt;
下图中前二种都能选出 Leader，第三种则表明 本轮投票无效（Split Votes）。&lt;br&gt;
对于第三种，每方都投给了自己，结果没有任何一方获得多数票。之后 每个参与方 随机休息一阵（Election Timeout）重新发起投票直到一方获得多数票。&lt;br&gt;
这里的关键就是随机 timeout，最先从 timeout 中恢复发起投票的一方，向还在 timeout 中的另外两方 请求投票，这时它就只能投给自己，导致很快达成一致。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/raft_vote.webp&#34; alt=&#34;raft_vote&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;选出 Leader 后，Leader 通过 定期 向所有 Follower 发送 心跳信息 维持其统治。&lt;br&gt;
若 Follower 一段时间未收到 Leader 的 心跳，则认为 Leader 可能已经挂了，然后再次发起 选举 过程。&lt;/p&gt;
&lt;h3 id=&#34;3-leader对一致性的影响&#34;&gt;3. Leader对一致性的影响&lt;/h3&gt;
&lt;p&gt;Raft 协议 强依赖 Leader 节点的 可用性，以确保集群 数据的一致性。&lt;br&gt;
数据的流向 只能从 Leader 节点向 Follower 节点转移。具体过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/raft_consistency.webp&#34; alt=&#34;raft_consistency&#34;  /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当 Client 向集群 Leader 节点 提交数据 后，Leader 节点 接收到的数据 处于 未提交状态（Uncommitted）。&lt;/li&gt;
&lt;li&gt;接着 Leader 节点会 并发地 向所有 Follower 节点 复制数据 并 等待接收响应。&lt;/li&gt;
&lt;li&gt;集群中至少 超过半数 的节点 已接收 到数据后， Leader 再向 Client 确认数据 已接收。&lt;/li&gt;
&lt;li&gt;一旦向 Client 发出数据接收 Ack 响应后，表明此时 数据状态 进入 已提交（Committed），Leader 节点再向 Follower 节点发通知告知该 数据状态已提交。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这个过程中，主节点 可能在 任意阶段 挂掉，看下 Raft 协议如何针对不同阶段保障 数据一致性 的。&lt;/p&gt;
&lt;h4 id=&#34;31-数据到达-leader-节点前这个阶段-leader-挂掉不影响一致性&#34;&gt;3.1 数据到达 Leader 节点前，这个阶段 Leader 挂掉不影响一致性&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/raft_s1.webp&#34; alt=&#34;raft_s1&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;32-数据到达-leader-节点但未复制到-follower-节点&#34;&gt;3.2 数据到达 Leader 节点，但未复制到 Follower 节点&lt;/h4&gt;
&lt;p&gt;这个阶段 Leader 挂掉，数据属于 未提交状态，Client 不会收到 Ack 会认为 超时失败 可安全发起 重试。&lt;br&gt;
&lt;img src=&#34;/post/distributed_system/images/raft_s2.webp&#34; alt=&#34;raft_s2&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;Follower 节点上没有该数据，重新选主 后 Client 重试 重新提交 可成功。原来的 Leader 节点 恢复 后作为 Follower 加入集群，重新从 当前任期 的新 Leader 处 同步数据，强制保持和 Leader 数据一致。&lt;/p&gt;
&lt;h4 id=&#34;33-数据到达-leader-节点成功复制到-follower-所有节点但-follower-还未向-leader-响应接收&#34;&gt;3.3 数据到达 Leader 节点，成功复制到 Follower 所有节点，但 Follower 还未向 Leader 响应接收。&lt;/h4&gt;
&lt;p&gt;这个阶段 Leader 挂掉，虽然数据在 Follower 节点处于 未提交状态（Uncommitted），但是 保持一致 的。重新选出 Leader 后可完成 数据提交。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/raft_s3.webp&#34; alt=&#34;raft_s3&#34;  /&gt;&lt;br&gt;
此时 Client 由于不知到底提交成功没有，可重试提交。针对这种情况 Raft 要求 RPC 请求实现 幂等性，也就是要实现 内部去重机制。&lt;/p&gt;
&lt;h4 id=&#34;34-数据到达-leader-节点成功复制到-follower-的部分节点但这部分-follower-节点还未向-leader-响应接收&#34;&gt;3.4 数据到达 Leader 节点，成功复制到 Follower 的部分节点，但这部分 Follower 节点还未向 Leader 响应接收。&lt;/h4&gt;
&lt;p&gt;这个阶段 Leader 挂掉，数据在 Follower 节点处于 未提交状态（Uncommitted）且 不一致。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/raft_s4.webp&#34; alt=&#34;raft_s4&#34;  /&gt;&lt;br&gt;
Raft 协议要求投票只能投给拥有 最新数据 的节点。所以拥有最新数据的节点会被选为 Leader，然后再 强制同步数据 到其他 Follower，保证 数据不会丢失并 最终一致。&lt;/p&gt;
&lt;h4 id=&#34;35-数据到达-leader-节点成功复制到-follower-所有或多数节点数据在-leader-处于已提交状态但在-follower-处于未提交状态&#34;&gt;3.5 数据到达 Leader 节点，成功复制到 Follower 所有或多数节点，数据在 Leader 处于已提交状态，但在 Follower 处于未提交状态。&lt;/h4&gt;
&lt;p&gt;这个阶段 Leader 挂掉，重新选出 新的 Leader 后的处理流程和阶段 3 一样。&lt;br&gt;
&lt;img src=&#34;/post/distributed_system/images/raft_s5.webp&#34; alt=&#34;raft_s5&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;36-数据到达-leader-节点成功复制到-follower-所有或多数节点数据在所有节点都处于已提交状态但还未响应-client&#34;&gt;3.6 数据到达 Leader 节点，成功复制到 Follower 所有或多数节点，数据在所有节点都处于已提交状态，但还未响应 Client。&lt;/h4&gt;
&lt;p&gt;这个阶段 Leader 挂掉，集群内部数据其实已经是 一致的，Client 重复重试基于幂等策略对 一致性无影响。&lt;br&gt;
&lt;img src=&#34;/post/distributed_system/images/raft_s6.webp&#34; alt=&#34;raft_s6&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;37-网络分区导致的脑裂情况出现双-leader-的现象&#34;&gt;3.7 网络分区导致的脑裂情况，出现双 Leader 的现象。&lt;/h4&gt;
&lt;p&gt;网络分区 将原先的 Leader 节点和 Follower 节点分隔开，Follower 收不到 Leader 的 心跳 将 重新 发起选举产生新的 Leader，这时就产生了 双Leader 现象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/raft_s7.webp&#34; alt=&#34;raft_s7&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;原先的 Leader 独自在一个区，向它提交数据不可能复制到多数节点所以永远提交不成功。向新的 Leader 提交数据可以提交成功。&lt;/p&gt;
&lt;p&gt;网络恢复 后，旧的 Leader 发现集群中有 更新任期（Term）的新 Leader ，则 自动降级 为 Follower 并从新 Leader 处 同步数据 达成集群 数据一致。&lt;/p&gt;
&lt;p&gt;[Raft开源实现库]https://raft.github.io/#implementations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903621499305997&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式理论(六) - 一致性协议Raft&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Golang: Channel底层实现</title>
        <link>/p/golang-channel%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Tue, 09 Mar 2021 15:00:52 +0800</pubDate>
        
        <guid>/p/golang-channel%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about distributed systems.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-channel结构&#34;&gt;1. channel结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/post/golang/images/hchan.png&#34; alt=&#34;hchan_struct&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;buf 是有缓冲的channel所特有的结构，用来存储缓存数据。是个循环链表&lt;/li&gt;
&lt;li&gt;sendx和recvx用于记录buf这个循环链表中的发送或者接收的index&lt;/li&gt;
&lt;li&gt;lock lock是个互斥锁&lt;/li&gt;
&lt;li&gt;recvq和sendq分别是接收(&amp;lt;-channel)或者发送(channel &amp;lt;- xxx)的goroutine抽象出来的结构体(sudog)的队列。是个双向链表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hchan源码: src/runtime/chan.go&lt;br&gt;
&lt;img src=&#34;/post/golang/images/hchan_struct.png&#34; alt=&#34;chan_strcut &#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-创建channel&#34;&gt;2. 创建channel&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;nx&#34;&gt;ch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建channel的时候会在内存中实例化一个hchan的结构体,并返回一个ch指针.&lt;br&gt;
hchan包含了一个互斥锁, 让goroutine可以FIFO的方式进入一个结构体中.&lt;/p&gt;
&lt;h2 id=&#34;3-channel中的队列&#34;&gt;3. channel中的队列&lt;/h2&gt;
&lt;p&gt;channel中有个缓存buf，是用来缓存数据的, 当使用send (ch &amp;lt;- xx)或者recv ( &amp;lt;-ch)的时候，首先要锁住hchan这个结构体。&lt;br&gt;
然后开始send (ch &amp;lt;- xx)数据。&lt;br&gt;
recv ( &amp;lt;-ch)是个逆向的操作，也是需要加锁。&lt;br&gt;
recvx和sendx是根据循环链表buf的变动而改变的。&lt;/p&gt;
&lt;h2 id=&#34;4-sendrecv的细化操作&#34;&gt;4. send/recv的细化操作&lt;/h2&gt;
&lt;p&gt;每一步的操作的细节可以细化为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，加锁&lt;/li&gt;
&lt;li&gt;第二，把数据从goroutine中copy到“队列”中(或者从队列中copy到goroutine中）。&lt;/li&gt;
&lt;li&gt;第三，释放锁&lt;br&gt;
Go中那句经典的话：Do not communicate by sharing memory; instead, share memory by communicating.的具体实现就是利用channel把数据从一端copy到了另一端！&lt;br&gt;
&lt;img src=&#34;https://i6448038.github.io/img/channel/hchan_channl.gif&#34; alt=&#34;chan_goroutine&#34;  /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-channel缓存原理&#34;&gt;5. channel缓存原理&lt;/h2&gt;
&lt;p&gt;当channel缓存满了，或者没有缓存的时候，我们继续send(ch &amp;lt;- xxx)或者recv(&amp;lt;- ch)会阻塞当前goroutine.&lt;br&gt;
Go的goroutine是用户态的线程(user-space threads)，用户态的线程是需要自己去调度的，Go有运行时的scheduler去帮我们完成调度这件事情。&lt;br&gt;
goroutine的阻塞操作，实际上是调用send (ch &amp;lt;- xx)或者recv ( &amp;lt;-ch)的时候主动触发的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/golang/images/hchan_block1.png&#34; alt=&#34;chan_block1&#34;  /&gt;&lt;br&gt;
这个时候G1正在正常运行,当再次进行send操作(ch&amp;lt;-1)的时候，会主动调用Go的调度器,让G1等待，并从让出M，让其他G去使用&lt;br&gt;
&lt;img src=&#34;/post/golang/images/hchan_block2.png&#34; alt=&#34;chan_block2&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;同时G1也会被抽象成含有G1指针和send元素的sudog结构体保存到hchan的sendq中等待被唤醒。&lt;br&gt;
&lt;img src=&#34;https://i6448038.github.io/img/channel/hchan_blok3.gif&#34; alt=&#34;chan_sudog&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;G1是如何被唤醒的?&lt;br&gt;
G2执行了recv操作p := &amp;lt;-ch，于是会发生以下的操作：&lt;br&gt;
&lt;img src=&#34;https://i6448038.github.io/img/channel/hchan_block5.gif&#34; alt=&#34;chan_recv&#34;  /&gt;&lt;br&gt;
G2从缓存队列中取出数据，channel会将等待队列中的G1推出，将G1当时send的数据推到缓存中，然后调用Go的scheduler，唤醒G1，并把G1放到可运行的Goroutine队列中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/hchan_mutex.png&#34; alt=&#34;chan_mutex&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-channel的发送ch--和接收--ch&#34;&gt;3. channel的发送(ch &amp;lt;-)和接收(&amp;lt;- ch)&lt;/h2&gt;
&lt;p&gt;未完待续&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://i6448038.github.io/2019/04/11/go-channel/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://i6448038.github.io/2019/04/11/go-channel/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>System: 僵尸进程和孤儿进程</title>
        <link>/p/system-%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/</link>
        <pubDate>Tue, 09 Mar 2021 15:00:52 +0800</pubDate>
        
        <guid>/p/system-%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%AD%A4%E5%84%BF%E8%BF%9B%E7%A8%8B/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about distributed systems.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程&#34;&gt;进程&lt;/h3&gt;
&lt;p&gt;进程就是运行起来的一个程序，但是进程并不局限于执行起来的代码，他的作用范围还有很多，如存放数据的内存地址空间，执行线程，打开的文件，挂起的信号，处理器状态等。&lt;/p&gt;
&lt;p&gt;进程在创建的时候开始存活，Linux系统会调用fork()方法复制一个现有进程来创建一个全新的进程，新产生的进程为子进程，创建者进程为父进程。当程序结束运行时，通过exit()系统调用退出执行，该进程占用的资源包括内存空间，线程等被释放掉。&lt;/p&gt;
&lt;h3 id=&#34;2-进程终结&#34;&gt;2. 进程终结&lt;/h3&gt;
&lt;p&gt;当进程终结时候，系统需要释放他所占有的所有资源。进程通过exit()系统调用结束进程，这个调用可能是来自进程内部的exit()，也可能来自外部的信号。在结束时候，该进程会使用该系统调用释放自己的空间，包括引用的文件，内存描述符，还会给自己的父进程发送信号，给自己的子进程寻找一个父进程等操作。&lt;/p&gt;
&lt;p&gt;调用结束后，此时该进程并没有完全从系统上消失，进程的进程描述符依然存在于系统中，存在的唯一目的就是向父进程提供信息。&lt;/p&gt;
&lt;p&gt;与自然规律相反，进程的收尾工作总是由该进程的父进程来做的，父进程会通过wait()系统调用来释放该进程最后剩余的进程标识符，slab缓存等，该调用会阻塞当前父进程，直到某个子进程退出。&lt;/p&gt;
&lt;h3 id=&#34;3-僵尸进程&#34;&gt;3. 僵尸进程&lt;/h3&gt;
&lt;p&gt;当进程exit()退出之后，他的父进程仍未结束,且没有通过wait()系统调用回收他的进程描述符的信息，该进程会继续停留在系统的进程表中，占用内核资源，这样的进程就是僵尸进程。&lt;/p&gt;
&lt;p&gt;等到父进程退出之后，再来查看系统，该僵尸进程在系统中找不到了。&lt;/p&gt;
&lt;h3 id=&#34;4-孤儿进程&#34;&gt;4. 孤儿进程&lt;/h3&gt;
&lt;p&gt;当一个进程正在运行时，他的父进程忽然退出，此时该进程就是一个孤儿进程。作为一个进程，需要找到一个父进程，否则这种进程在退出之后没人回收他的进程描述符，空耗内存。此时该进程会找到一个父进程，如果自己所在的进程组没人收养，那就作为init或systemd进程的子进程。&lt;/p&gt;
&lt;p&gt;Init进程会为每一个子进程使用wait系统调用，确保不会产生僵尸进程。这里的wait系统调用指的是waitpid()，会传入一个要等待的进程Pid，等待的指定进程，而不阻塞当前进程去等待。&lt;/p&gt;
&lt;p&gt;等到该进程退出后，该进程的进程描述符等信息会被init进程回收，不会形成僵尸进程。&lt;/p&gt;
&lt;h3 id=&#34;5-处置方式&#34;&gt;5. 处置方式&lt;/h3&gt;
&lt;p&gt;孤儿进程会由init进程收养作为子进程，所以不会有什么危害；僵尸进程会占用进程号，以及未回收的文件描述符占用空间，如果产生大量的僵尸进程，将会导致系统无法分配进程号，说明父进程的代码编写有问题。&lt;/p&gt;
&lt;p&gt;在理想情况下，可以通过kill命令杀死该进程的父进程来结束僵尸进程。当然也要结合具体场景来对待。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://segmentfault.com/a/1190000038820321&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://segmentfault.com/a/1190000038820321&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Golang: GMP调度模型</title>
        <link>/p/golang-gmp%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9E%8B/</link>
        <pubDate>Mon, 08 Mar 2021 15:00:52 +0800</pubDate>
        
        <guid>/p/golang-gmp%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9E%8B/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about distributed systems.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-goroutine&#34;&gt;1. Goroutine&lt;/h2&gt;
&lt;p&gt;Goroutine = Golang + Coroutine。Goroutine是golang实现的协程，是用户级线程。&lt;br&gt;
Goroutine具有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相比线程，其启动的代价很小，以很小栈空间启动（2Kb左右）&lt;/li&gt;
&lt;li&gt;能够动态地伸缩栈的大小，最大可以支持到Gb级别&lt;/li&gt;
&lt;li&gt;工作在用户态，切换成很小&lt;/li&gt;
&lt;li&gt;与线程关系是n:m，即可以在n个系统线程上多工调度m个Goroutine&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-进程线程goroutine&#34;&gt;2. 进程、线程、Goroutine&lt;/h2&gt;
&lt;p&gt;在仅支持进程的操作系统中，进程是拥有资源和独立调度的基本单位。&lt;br&gt;
在引入线程的操作系统中，线程是独立调度的基本单位，进程是资源拥有的基本单位。&lt;/p&gt;
&lt;p&gt;线程创建、管理、调度等采用的方式称为线程模型。线程模型一般分为以下三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内核级线程(Kernel Level Thread)模型&lt;/li&gt;
&lt;li&gt;用户级线程(User Level Thread)模型&lt;/li&gt;
&lt;li&gt;两级线程模型，也称混合型线程模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三大线程模型最大差异就在于用户级线程与内核调度实体KSE（KSE，Kernel Scheduling Entity）之间的对应关系。&lt;br&gt;
KSE是Kernel Scheduling Entity的缩写，其是可被操作系统内核调度器调度的对象实体，是操作系统内核的最小调度单元，可以简单理解为内核级线程。&lt;/p&gt;
&lt;p&gt;用户级线程即协程，由应用程序创建与管理，协程必须与内核级线程绑定之后才能执行。&lt;br&gt;
线程由 CPU 调度是抢占式的，协程由用户态调度是协作式的，一个协程让出 CPU 后，才执行下一个协程。&lt;/p&gt;
&lt;h2 id=&#34;3-golang的线程模型&#34;&gt;3. Golang的线程模型&lt;/h2&gt;
&lt;p&gt;Golang在底层实现了混合型线程模型。M即系统线程，由系统调用产生，一个M关联一个KSE，即两级线程模型中的系统线程。G为Groutine，即两级线程模型的的应用及线程。M与G的关系是N:M。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/golang/images/go_thread_model.image&#34; alt=&#34;golang_thread_model&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-gmp模型&#34;&gt;4. GMP模型&lt;/h2&gt;
&lt;p&gt;M指的是Machine，一个M直接关联了一个内核线程。&lt;br&gt;
P指的是”processor”，代表了M所需的上下文环境，也是处理用户级代码逻辑的处理器。P关联了的本地可运行G的队列(也称为LRQ)，最多可存放256个G。&lt;br&gt;
G指的是Goroutine，其实本质上也是一种轻量级的线程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/golang/images/gmp_model.image&#34; alt=&#34;gpm&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;GMP调度流程大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程M想运行任务就需得获取 P，即与P关联。&lt;/li&gt;
&lt;li&gt;然后从 P 的本地队列(LRQ)获取 G&lt;/li&gt;
&lt;li&gt;若LRQ中没有可运行的G，M 会尝试从全局队列(GRQ)拿一批G放到P的本地队列，&lt;/li&gt;
&lt;li&gt;若全局队列也未找到可运行的G时候，M会随机从其他 P 的本地队列偷一半放到自己 P 的本地队列。&lt;/li&gt;
&lt;li&gt;拿到可运行的G之后，M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-调度的生命周期&#34;&gt;5. 调度的生命周期&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/post/golang/images/gmp_schedule.image&#34; alt=&#34;gpm_schedule&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;M0 是启动程序后的编号为 0 的主线程，这个 M 对应的实例会在全局变量 runtime.m0 中，不需要在 heap 上分配，&lt;br&gt;
M0 负责执行初始化操作和启动第一个 G， 在之后 M0 就和其他的 M 一样了&lt;/li&gt;
&lt;li&gt;G0 是每次启动一个 M 都会第一个创建的 gourtine，G0 仅用于负责调度的 G，G0 不指向任何可执行的函数，每个 M 都会有一个自己的 G0。&lt;/li&gt;
&lt;li&gt;在调度或系统调用时会使用 G0 的栈空间，全局变量的 G0 是 M0 的 G0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面生命周期流程说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;runtime 创建最初的线程 m0 和 goroutine g0，并把两者进行关联（g0.m = m0)&lt;/li&gt;
&lt;li&gt;调度器初始化：设置M最大数量，P个数，栈和内存初始化，以及创建 GOMAXPROCS个P&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;示例代码中的 main 函数是 main.main，runtime 中也有 1 个 main 函数 ——runtime.main，
代码经过编译后，runtime.main 会调用 main.main，
程序启动时会为 runtime.main 创建 goroutine，我们称它为 main goroutine，
然后把 main goroutine 加入到 P 的本地队列。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;启动 m0，m0 已经绑定了 P，会从 P 的本地队列获取 G，获取到 main goroutine。&lt;/li&gt;
&lt;li&gt;G 拥有栈，M 根据 G 中的栈信息和调度信息设置运行环境&lt;/li&gt;
&lt;li&gt;M 运行 G&lt;/li&gt;
&lt;li&gt;G 退出，再次回到 M 获取可运行的 G，这样重复下去，直到 main.main 退出，runtime.main 执行 Defer 和 Panic 处理，或调用 runtime.exit 退出程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-g-m-p的数量&#34;&gt;6. G-M-P的数量&lt;/h2&gt;
&lt;h3 id=&#34;61-g-的数量&#34;&gt;6.1 G 的数量&lt;/h3&gt;
&lt;p&gt;理论上没有数量上限限制的。查看当前G的数量可以使用runtime. NumGoroutine()&lt;/p&gt;
&lt;h3 id=&#34;62-p-的数量&#34;&gt;6.2 P 的数量&lt;/h3&gt;
&lt;p&gt;由启动时环境变量 $GOMAXPROCS 或者是由runtime.GOMAXPROCS() 决定。这意味着在程序执行的任意时刻都只有 $GOMAXPROCS 个 goroutine 在同时运行。&lt;/p&gt;
&lt;h3 id=&#34;63-m-的数量&#34;&gt;6.3 M 的数量:&lt;/h3&gt;
&lt;p&gt;go 语言本身的限制：go 程序启动时，会设置 M 的最大数量，默认 10000. 但是内核很难支持这么多的线程数，所以这个限制可以忽略。&lt;br&gt;
可以通过runtime/debug 中的 SetMaxThreads 函数，设置 M 的最大数量&lt;br&gt;
一个 M 阻塞了，会创建新的 M。M 与 P 的数量没有绝对关系，一个 M 阻塞，P 就会去创建或者切换另一个 M，所以，即使 P 的默认数量是 1，也有可能会创建很多个 M 出来。&lt;/p&gt;
&lt;h2 id=&#34;7-调度的流程状态&#34;&gt;7. 调度的流程状态&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/post/golang/images/gmp_schedule.image&#34; alt=&#34;gmp_schedule&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;从上图我们可以看出来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个P有个局部队列，局部队列保存待执行的goroutine(流程2)，当M绑定的P的的局部队列已经满了之后就会把goroutine放到全局队列(流程2-1)&lt;/li&gt;
&lt;li&gt;每个P和一个M绑定，M是真正的执行P中goroutine的实体(流程3)，M从绑定的P中的局部队列获取G来执行&lt;/li&gt;
&lt;li&gt;当M绑定的P的局部队列为空时，M会从全局队列获取到本地队列来执行G(流程3.1)，当从全局队列中没有获取到可执行的G时候，M会从其他P的局部队列中偷取G来执行(流程3.2)，这种从其他P偷的方式称为work stealing&lt;/li&gt;
&lt;li&gt;当G因系统调用(syscall)阻塞时会阻塞M，此时P会和M解绑即hand off，并寻找新的idle的M，若没有idle的M就会新建一个M(流程5.1)。&lt;/li&gt;
&lt;li&gt;当G因channel或者network I/O阻塞时，不会阻塞M，M会寻找其他runnable的G；当阻塞的G恢复后会重新进入runnable进入P队列等待执行(流程5.3)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-调度过程中阻塞&#34;&gt;8. 调度过程中阻塞&lt;/h2&gt;
&lt;p&gt;MP模型的阻塞可能发生在下面几种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I/O，select&lt;/li&gt;
&lt;li&gt;block on syscall&lt;/li&gt;
&lt;li&gt;channel&lt;/li&gt;
&lt;li&gt;等待锁&lt;/li&gt;
&lt;li&gt;runtime.Gosched()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;81-用户态阻塞&#34;&gt;8.1 用户态阻塞&lt;/h3&gt;
&lt;p&gt;当goroutine因为channel操作或者network I/O而阻塞时（实际上golang已经用netpoller实现了goroutine网络I/O, 阻塞不会导致M被阻塞，仅阻塞G），&lt;br&gt;
对应的G会被放置到某个wait队列(如channel的waitq)，该G的状态由_Gruning变为_Gwaitting，&lt;br&gt;
而M会跳过该G尝试获取并执行下一个G，如果此时没有runnable的G供M运行，那么M将解绑P，并进入sleep状态；&lt;br&gt;
当阻塞的G被另一端的G2唤醒时（比如channel的可读/写通知），G被标记为runnable，尝试加入G2所在P的runnext，然后再是P的Local队列和Global队列。&lt;/p&gt;
&lt;h3 id=&#34;83-系统调用阻塞&#34;&gt;8.3 系统调用阻塞&lt;/h3&gt;
&lt;p&gt;当G被阻塞在某个系统调用上时，此时G会阻塞在_Gsyscall状态，M也处于 block on syscall 状态，&lt;br&gt;
此时的M可被抢占调度：执行该G的M会与P解绑，而P则尝试与其它idle的M绑定，继续执行其它G。&lt;br&gt;
如果没有其它idle的M，但P的Local队列中仍然有G需要执行，则创建一个新的M；&lt;br&gt;
当系统调用完成后，G会重新尝试获取一个idle的P进入它的Local队列恢复执行，&lt;br&gt;
如果没有idle的P，G会被标记为runnable加入到Global队列。&lt;/p&gt;
&lt;h2 id=&#34;9-g-m-p内部结构&#34;&gt;9. G-M-P内部结构&lt;/h2&gt;
&lt;h3 id=&#34;91-g的内部结构&#34;&gt;9.1 G的内部结构&lt;/h3&gt;
&lt;p&gt;G的部分内部结构中重要字段如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;stack&lt;/span&gt;       &lt;span class=&#34;nx&#34;&gt;stack&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// g自己的栈
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// 隶属于哪个M
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;sched&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;gobuf&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 保存了g的现场，goroutine切换时通过它来恢复
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;atomicstatus&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// G的运行状态
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;goid&lt;/span&gt;         &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;schedlink&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;guintptr&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 下一个g, g链表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;preempt&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//抢占标记
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;lockedm&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;muintptr&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 锁定的M, g中断恢复指定M执行
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;gopc&lt;/span&gt;          &lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 创建该goroutine的指令地址
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;startpc&lt;/span&gt;       &lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// goroutine 函数的指令地址
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;G的状态有以下9种:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;status&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;_Gidle&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;刚刚被分配，还没有进行初始化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_Grunnable&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;已经在运行队列中，还没有执行用户代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_Grunning&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;不在运行队列里中，已经可以执行用户代码，此时已经分配了 M 和 P。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_Gsyscall&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;正在执行系统调用，此时分配了 M。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_Gwaiting&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;在运行时被阻止，没有执行用户代码，也不在运行队列中，此时它正在某处阻塞等待中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_Gmoribund_unused&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;尚未使用，但是在 gdb 中进行了硬编码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_Gdead&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;尚未使用，这个状态可能是刚退出或是刚被初始化，此时它并没有执行用户代码，有可能有也有可能没有分配堆栈。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_Genqueue_unused&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;尚未使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;_Gcopystack&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;正在复制堆栈，并没有执行用户代码，也不在运行队列中。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;G状态定义代码位置:　runtime/runtime2.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;92-m的结构&#34;&gt;9.2 M的结构&lt;/h3&gt;
&lt;p&gt;M的部分内部结构:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;g0&lt;/span&gt;            &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// g0, 每个M都有自己独有的g0
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;curg&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// 当前正在运行的g
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;             &lt;span class=&#34;nx&#34;&gt;puintptr&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 隶属于哪个P
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;nextp&lt;/span&gt;         &lt;span class=&#34;nx&#34;&gt;puintptr&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 当m被唤醒时，首先拥有这个p
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;            &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;spinning&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// 是否处于自旋
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;park&lt;/span&gt;          &lt;span class=&#34;nx&#34;&gt;note&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;alllink&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// on allm
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;schedlink&lt;/span&gt;     &lt;span class=&#34;nx&#34;&gt;muintptr&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 下一个m, m链表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;mcache&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mcache&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 内存分配
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;lockedg&lt;/span&gt;       &lt;span class=&#34;nx&#34;&gt;guintptr&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 和 G 的lockedm对应
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;freelink&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// on sched.freem
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;93-p的内部结构&#34;&gt;9.3 P的内部结构&lt;/h3&gt;
&lt;p&gt;P的部分内部结构:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;          &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;status&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// P的状态
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;link&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;puintptr&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 下一个P, P链表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;           &lt;span class=&#34;nx&#34;&gt;muintptr&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 拥有这个P的M
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;mcache&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mcache&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// P本地runnable状态的G队列，无锁访问
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;runqhead&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;runqtail&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;runq&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;guintptr&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;runnext&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;guintptr&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 一个比runq优先级更高的runnable G
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// 状态为dead的G链表，在获取G时会从这里面获取
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;gFree&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;gList&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// gcw is this P&amp;#39;s GC work buffer cache. The work buffer is
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// filled by write barriers, drained by mutator assists, and
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// disposed on certain GC state transitions.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;gcw&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gcWork&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;94-调度器的内部结构&#34;&gt;9.4 调度器的内部结构&lt;/h3&gt;
&lt;p&gt;调度器部分内部结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;schedt&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// accessed atomically. keep at top to ensure alignment on 32-bit systems.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;lock&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mutex&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;midle&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;muintptr&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 空闲M链表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;nmidle&lt;/span&gt;       &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 空闲M数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;nmidlelocked&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 被锁住的M的数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;mnext&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 已创建M的数量，以及下一个M ID
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;maxmcount&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 允许创建最大的M数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;nmsys&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 不计入死锁的M数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;nmfreed&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 累计释放M的数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;pidle&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;puintptr&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 空闲的P链表
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;npidle&lt;/span&gt;       &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 空闲的P数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;runq&lt;/span&gt;         &lt;span class=&#34;nx&#34;&gt;gQueue&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 全局runnable的G队列
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;runqsize&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 全局runnable的G数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Global cache of dead G&amp;#39;s.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;gFree&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;lock&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;mutex&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;stack&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;gList&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Gs with stacks
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;noStack&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gList&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Gs without stacks
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;       &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// freem is the list of m&amp;#39;s waiting to be freed when their
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// m.exited is set. Linked through m.freelink.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;freem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;10-观察调度流程&#34;&gt;10. 观察调度流程&lt;/h2&gt;
&lt;h3 id=&#34;101-godebug-trace方式&#34;&gt;10.1 GODEBUG trace方式&lt;/h3&gt;
&lt;p&gt;GODEBUG 变量可以控制运行时内的调试变量，参数以逗号分隔，格式为：name=val。&lt;br&gt;
观察GMP可以使用下面两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;schedtrace：设置 schedtrace=X 参数可以使运行时在每 X 毫秒输出一行调度器的摘要信息到标准 err 输出中。&lt;/li&gt;
&lt;li&gt;scheddetail：设置 schedtrace=X 和 scheddetail=1 可以使运行时在每 X 毫秒输出一次详细的多行信息，信息内容主要包括调度程序、处理器、OS 线程 和 Goroutine 的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;debugTrace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WaitGroup&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1e6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;

		&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Millisecond&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;wg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Wait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;schedule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行一下命令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GODEBUG=schedtrace=1000 go run ./test.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;SCHED 0ms: &lt;span class=&#34;nv&#34;&gt;gomaxprocs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;idleprocs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spinningthreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;idlethreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;runqueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
SCHED 1009ms: &lt;span class=&#34;nv&#34;&gt;gomaxprocs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;idleprocs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spinningthreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;idlethreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;runqueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
SCHED 2013ms: &lt;span class=&#34;nv&#34;&gt;gomaxprocs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;idleprocs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spinningthreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;idlethreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;runqueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
SCHED 3015ms: &lt;span class=&#34;nv&#34;&gt;gomaxprocs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;idleprocs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;threads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;spinningthreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;idlethreads&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;runqueue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/post/golang/images/gmp_sched_trace.png&#34; alt=&#34;gmp_sched_trace&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;输出内容解释说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SCHED XXms: SCHED是调度日志输出标志符。XXms是自程序启动之后到输出当前行时间&lt;/li&gt;
&lt;li&gt;gomaxprocs： P的数量，等于当前的 CPU 核心数，或者GOMAXPROCS环境变量的值&lt;/li&gt;
&lt;li&gt;idleprocs： 空闲P的数量，与gomaxprocs的差值即运行中P的数量&lt;/li&gt;
&lt;li&gt;threads： 线程数量，即M的数量&lt;/li&gt;
&lt;li&gt;spinningthreads：自旋状态线程的数量。当M没有找到可供其调度执行的 Goroutine 时，该线程并不会销毁，而是出于自旋状态&lt;/li&gt;
&lt;li&gt;idlethreads：空闲线程的数量&lt;/li&gt;
&lt;li&gt;runqueue：全局队列中G的数量&lt;/li&gt;
&lt;li&gt;[0]：表示P本地队列下G的数量，有几个P中括号里面就会有几个数字&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;102-go-tool-trace方式&#34;&gt;10.2 Go tool trace方式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;toolTrace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// create trace file
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;trace.out&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// start trace goroutine
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;trace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;trace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello trace&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译并运行程序生成trace文件trace.out&lt;br&gt;
执行下面命令，打开浏览器查看。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;go tool trace trace.out&lt;br&gt;
&lt;img src=&#34;/post/golang/images/gmp_tool_trace.png&#34; alt=&#34;gmp_trace_tool&#34;  /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;点击Goroutine analysis:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/golang/images/gmp_tool_trace_analysis.png&#34; alt=&#34;gmp_trace_tool_goroutine_analysis&#34;  /&gt;&lt;/p&gt;
&lt;h2 id=&#34;11-总结&#34;&gt;11. 总结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Golang的线程模型采用的是混合型线程模型，线程与协程关系是N:M。&lt;/li&gt;
&lt;li&gt;Golang混合型线程模型实现采用GMP模型进行调度，G是goroutine，是golang实现的协程，M是OS线程，P是逻辑处理器。&lt;/li&gt;
&lt;li&gt;每一个M都需要与一个P绑定，P拥有本地可运行的G队列，M是执行G的单元，&lt;br&gt;
M获取可运行G流程是先从P的本地队列获取，&lt;br&gt;
若未获取到，则从其他P偷取过来（即work steal)，&lt;br&gt;
若其他的P也没有则从全局G队列获取，&lt;br&gt;
若都未获取到，则M将处于自旋状态，并不会销毁。&lt;/li&gt;
&lt;li&gt;当执行G时候，发生用户级别阻塞(通道阻塞等)的时候，此时M不会阻塞，M会继续寻找其他可运行的G，&lt;br&gt;
当阻塞的G恢复之后，重新进入P的队列等待执行，&lt;br&gt;
若G进行系统调用的时候，会阻塞M，此时P会和M解绑(即hand off)，并寻找新的空闲的M。&lt;br&gt;
若没有空闲的就会创建一个新的M。&lt;/li&gt;
&lt;li&gt;Work Steal和Hand Off保证了线程的高效利用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;g-m-p高效的保证策略有&#34;&gt;G-M-P高效的保证策略有：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;M是可以复用的，不需要反复创建与销毁，当没有可执行的Goroutine时候就处于自旋状态，等待唤醒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work Stealing和Hand Off策略保证了M的高效利用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存分配状态(mcache)位于P，G可以跨M调度，不再存在跨M调度局部性差的问题(??? 此句我还不太明白, 后续补充)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M从关联的P中获取G，不需要使用锁，是lock free的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6886321367604527112&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6886321367604527112&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://i6448038.github.io/2017/12/04/golang-concurrency-principle/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://i6448038.github.io/2017/12/04/golang-concurrency-principle/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>分布式: 2PC理论</title>
        <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-2pc%E7%90%86%E8%AE%BA/</link>
        <pubDate>Fri, 05 Mar 2021 19:00:52 +0800</pubDate>
        
        <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-2pc%E7%90%86%E8%AE%BA/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about distributed systems.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-背景&#34;&gt;1. 背景&lt;/h3&gt;
&lt;p&gt;在分布式系统中发起一个事务，该事务涉及多个不同节点，那么为了保证事务 ACID 特性，就需要引入一个协调者来统一调度事务涉及的多个节点，被调度的节点称为事务参与者。由此衍生出 2PC 和 3PC 协议。&lt;/p&gt;
&lt;h3 id=&#34;2-2pc两阶段提交two-phase-commit&#34;&gt;2. 2PC(两阶段提交，Two-Phase Commit)&lt;/h3&gt;
&lt;p&gt;分为两个阶段：Prepare 和 Commit&lt;/p&gt;
&lt;h4 id=&#34;21-prepare提交事务请求&#34;&gt;2.1 Prepare：提交事务请求&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/2pc.webp&#34; alt=&#34;2pc&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;询问&lt;br&gt;
协调者向所有参与者发送事务请求，询问是否可执行事务操作，然后等待各个参与者的响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行&lt;br&gt;
各个参与者接收到协调者事务请求后，执行事务操作(例如更新一个关系型数据库表中的记录)，并将 Undo 和 Redo 信息记录事务日志中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;响应&lt;br&gt;
如果参与者成功执行了事务并写入 Undo 和 Redo 信息，则向协调者返回 YES 响应，否则返回 NO 响应。当然，参与者也可能宕机，从而不会返回响应。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-commit执行事务提交&#34;&gt;2.2 Commit：执行事务提交&lt;/h4&gt;
&lt;p&gt;执行事务提交分为两种情况，正常提交和回退。&lt;/p&gt;
&lt;h5 id=&#34;221-正常提交事务&#34;&gt;2.2.1 正常提交事务&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/2pc_commit.webp&#34; alt=&#34;2pc_commit&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;commit 请求&lt;br&gt;
协调者向所有参与者发送 Commit 请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务提交&lt;br&gt;
参与者收到 Commit 请求后，执行事务提交，提交完成后释放事务执行期占用的所有资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*反馈结果&lt;br&gt;
参与者执行事务提交后向协调者发送 Ack 响应。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完成事务&lt;br&gt;
接收到所有参与者的 Ack 响应后，完成事务提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;222-中断事务&#34;&gt;2.2.2 中断事务&lt;/h5&gt;
&lt;p&gt;在执行 Prepare 步骤过程中，如果某些参与者执行事务失败、宕机或与协调者之间的网络中断，那么协调者就无法收到所有参与者的 YES 响应，或者某个参与者返回了 No 响应，此时，协调者就会进入回退流程，对事务进行回退。流程如下图红色部分(将 Commit 请求替换为红色的 Rollback 请求)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/2pc_rollback.webp&#34; alt=&#34;2pc_rollback&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rollback 请求&lt;br&gt;
协调者向所有参与者发送 Rollback 请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务回滚&lt;br&gt;
参与者收到 Rollback 后，使用 Prepare 阶段的 Undo 日志执行事务回滚，完成后释放事务执行期占用的所有资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反馈结果&lt;br&gt;
参与者执行事务回滚后向协调者发送 Ack 响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中断事务&lt;br&gt;
接收到所有参与者的 Ack 响应后，完成事务中断。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-2pc的问题&#34;&gt;3. 2PC的问题&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;同步阻塞&lt;br&gt;
参与者在等待协调者的指令时，其实是在等待其他参与者的响应，在此过程中，参与者是无法进行其他操作的，也就是阻塞了其运行。&lt;br&gt;
倘若参与者与协调者之间网络异常导致参与者一直收不到协调者信息，那么会导致参与者一直阻塞下去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单点&lt;br&gt;
在 2PC 中，一切请求都来自协调者，所以协调者的地位是至关重要的，如果协调者宕机，那么就会使参与者一直阻塞并一直占用事务资源。&lt;br&gt;
如果协调者也是分布式，使用选主方式提供服务，那么在一个协调者挂掉后，可以选取另一个协调者继续后续的服务，可以解决单点问题。但是，新协调者无法知道上一个事务的全部状态信息(例如已等待 Prepare 响应的时长等)，所以也无法顺利处理上一个事务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据不一致&lt;br&gt;
Commit 事务过程中 Commit 请求/Rollback 请求可能因为协调者宕机或协调者与参与者网络问题丢失，那么就导致了部分参与者没有收到 Commit/Rollback 请求，而其他参与者则正常收到执行了 Commit/Rollback 操作，没有收到请求的参与者则继续阻塞。这时，参与者之间的数据就不再一致了。&lt;br&gt;
当参与者执行 Commit/Rollback 后会向协调者发送 Ack，然而协调者不论是否收到所有的参与者的 Ack，该事务也不会再有其他补救措施了，协调者能做的也就是等待超时后向事务发起者返回一个“我不确定该事务是否成功”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;环境可靠性依赖&lt;br&gt;
协调者 Prepare 请求发出后，等待响应，然而如果有参与者宕机或与协调者之间的网络中断，都会导致协调者无法收到所有参与者的响应，那么在 2PC 中，协调者会等待一定时间，然后超时后，会触发事务中断，在这个过程中，协调者和所有其他参与者都是出于阻塞的。这种机制对网络问题常见的现实环境来说太苛刻了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903814898647048&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6844903814898647048&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>分布式: 3PC理论</title>
        <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-3pc%E7%90%86%E8%AE%BA/</link>
        <pubDate>Fri, 05 Mar 2021 19:00:52 +0800</pubDate>
        
        <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-3pc%E7%90%86%E8%AE%BA/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about distributed systems.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-3pc三阶段提交three-phase-commit&#34;&gt;1. 3PC(三阶段提交，Three-Phase Commit)&lt;/h3&gt;
&lt;p&gt;3PC 是在 2PC 的基础上，为了解决 2PC 的某些缺点而设计的。&lt;br&gt;
3PC 分为三个阶段：CanCommit，PreCommit 和 doCommit。&lt;/p&gt;
&lt;h4 id=&#34;11-cancommit&#34;&gt;1.1 CanCommit&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/3pc.webp&#34; alt=&#34;3pc&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;事务询问&lt;br&gt;
协调者向所有参与者发送事务 canCommit 请求，请求中包含事务内容，询问是否可以执行事务提交操作，并开始等待响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反馈询问结果&lt;br&gt;
参与者收到 canCommit 请求后，分析事务内容，判断自身是否可以执行事务，如果可以，那么就返回 Yes 响应，进入预备状态，否则返回 No 响应。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此过程中并没有执行事务(对比 2PC 的 Prepare 阶段，参与者是执行了事务的)。&lt;/p&gt;
&lt;h4 id=&#34;12-precommit&#34;&gt;1.2 PreCommit&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/3pc_precommit.webp&#34; alt=&#34;3pc_precommit&#34;  /&gt;&lt;br&gt;
PreCommit 阶段根据各参与者返回的 CanCommit 响应，决定下一步动作。如果收到了所有参与者的 Yes 响应，则执行事务预提交，否则(收到了至少一个 No 响应或一定时长内没有收到所有参与者的 Yes 响应，如 3PC 第一张图片中红色部分)，执行事务中断。&lt;/p&gt;
&lt;h5 id=&#34;121-事务预提交&#34;&gt;1.2.1 事务预提交&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发送 PreCommit 请求&lt;br&gt;
协调者发送 PreCommit 请求，并进入 Prepared 阶段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参与者处理 PreCommit&lt;br&gt;
参与者收到 PreCommit 请求后，执行事务操作，并将 Undo 和 Redo 信息记录事务日志中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反馈执行结果&lt;br&gt;
如果参与者成功执行了事务并写入 Undo 和 Redo 信息，那么反馈 Ack 给协调者，并等待下一步指令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;122-事务中断&#34;&gt;1.2.2 事务中断&lt;/h5&gt;
&lt;p&gt;上图中，红色的 Abort 表示协调者发送的不是 PreCommit 请求，而是 Abort 请求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发送事务中断请求&lt;br&gt;
协调者向所有参与者发送 Abort 请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中断事务&lt;br&gt;
参与者收到 Abort 请求后，会触发事务中断。此外，如果参与者在等待协调者指令超时，会自己触发事务中断，在 2PC 中，参与者会一直阻塞的等待协调者指令，所以 3PC 中解决了因为这种情况带来的阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;13-docommit&#34;&gt;1.3 doCommit&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/3pc_docommit.webp&#34; alt=&#34;3pc_docommit&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;协调者根据第二阶段的响应决定最终操作，如果协调者收到了所有参与者在 PreCommit 阶段的 Ack 响应，那么会进入执行事务提交阶段，否则执行事务中断。&lt;/p&gt;
&lt;h5 id=&#34;131-事务提交&#34;&gt;1.3.1 事务提交&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发送提交请求&lt;br&gt;
协调者收到所有参与者在 PreCommit 阶段返回的 Ack 响应后，向所有参与者发送 doCommit 请求，并进入提交状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务提交&lt;br&gt;
参与者收到 Commit 请求后，执行事务提交，提交完成后释放事务执行期占用的所有资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反馈结果&lt;br&gt;
参与者完成事务提交之后，向协调者返回 Ack 响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成事务&lt;br&gt;
协调者收到所有参与者的 Ack 响应后，完成事务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;132-事务中断&#34;&gt;1.3.2 事务中断&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发送事务中断请求&lt;br&gt;
协调者向所有参与者发送 Abort 请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务回滚&lt;br&gt;
参与者收到 Abort 请求后，会使用第二阶段记录的 Undo 信息进行事务回滚，并在完成回滚后释放所有事务资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;因为第一阶段并没有任何参与者实际执行事务，所以在第二阶段(PreCommit 阶段)执行事务中断，是不需要事务回滚的，也就不需要下面的反馈结果，直接中断事务即可。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;反馈回滚结果&lt;br&gt;
参与者执行事务回滚后向协调者发送 Ack 响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中断事务&lt;br&gt;
协调者接收到所有参与者反馈的 Ack 响应后，完成事务中断。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-3pc-的优点和缺点&#34;&gt;2. 3PC 的优点和缺点&lt;/h3&gt;
&lt;h4 id=&#34;21-优点&#34;&gt;2.1 优点&lt;/h4&gt;
&lt;h5 id=&#34;211-降低了阻塞&#34;&gt;2.1.1 降低了阻塞&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;参与者返回 CanCommit 请求的响应后，等待第二阶段指令，若等待超时，则自动 abort，降低了阻塞；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参与者返回 PreCommit 请求的响应后，等待第三阶段指令，若等待超时，则自动 commit 事务，也降低了阻塞；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-缺点&#34;&gt;2.2 缺点&lt;/h4&gt;
&lt;p&gt;数据不一致问题仍然是存在的，比如第三阶段协调者发出了 abort 请求，然后有些参与者没有收到 abort，那么就会自动 commit，造成数据不一致。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;2PC 和 3PC 都无法完美解决分布式数据一致性问题，虽然无法保证事务的 ACID 特性，但两阶段的思想在很多实际架构中有这广泛应用，例如 JTA 事务以及一些数据库的数据同步。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903814898647048&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6844903814898647048&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>分布式: BASE 理论</title>
        <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-base-%E7%90%86%E8%AE%BA/</link>
        <pubDate>Fri, 05 Mar 2021 19:00:52 +0800</pubDate>
        
        <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-base-%E7%90%86%E8%AE%BA/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about distributed systems.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-base理论&#34;&gt;1. BASE理论&lt;/h3&gt;
&lt;p&gt;eBay的架构师Dan Pritchett源于对大规模分布式系统的实践总结，在ACM上发表文章提出BASE理论，BASE理论是对CAP理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。&lt;/p&gt;
&lt;p&gt;BASE是指:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;基本可用（Basically Available）
软状态（ Soft State）
最终一致性（ Eventual Consistency）
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本可用（Basically Available）&lt;br&gt;
分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。&lt;br&gt;
电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。&lt;br&gt;
这就是损失部分可用性的体现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软状态（ Soft State）&lt;br&gt;
允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终一致性（ Eventual Consistency）&lt;br&gt;
系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-acid和base的区别与联系&#34;&gt;2. ACID和BASE的区别与联系&lt;/h3&gt;
&lt;p&gt;ACID是传统数据库常用的设计理念，追求强一致性模型。&lt;br&gt;
BASE支持的是大型分布式系统，提出通过牺牲强一致性获得高可用性。&lt;br&gt;
ACID和BASE代表了两种截然相反的设计哲学&lt;br&gt;
在分布式系统设计的场景中，系统组件对一致性要求是不同的，因此ACID和BASE又会结合使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://my.oschina.net/foodon/blog/372703#OSC_h1_6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://my.oschina.net/foodon/blog/372703#OSC_h1_6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>分布式: CAP 定理</title>
        <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-cap-%E5%AE%9A%E7%90%86/</link>
        <pubDate>Fri, 05 Mar 2021 19:00:52 +0800</pubDate>
        
        <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-cap-%E5%AE%9A%E7%90%86/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about distributed systems.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-什么是cap定理&#34;&gt;1. 什么是CAP定理&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/cap.webp&#34; alt=&#34;cap&#34;  /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性）
这三个基本需求，最多只能同时满足其中的2个。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Consistency（一致性）&lt;br&gt;
指数据在多个副本之间能够保持一致的特性（严格的一致性）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Availability（可用性）&lt;br&gt;
指系统提供的服务必须一直处于可用的状态，每次请求都能获取到非错的响应（不保证获取的数据为最新数据）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Partition tolerance（分区容错性）&lt;br&gt;
分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分区&#34;&gt;分区&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;在分布式系统中，不同的节点分布在不同的子网络中，由于一些特殊的原因，这些子节点之间出现了网络不通的状态，
但他们的内部子网络是正常的。从而导致了整个系统的环境被切分成了若干个孤立的区域，这就是分区。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2-原理&#34;&gt;2. 原理&lt;/h3&gt;
&lt;h4 id=&#34;21-定义&#34;&gt;2.1 定义&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;/post/distributed_system/images/cap_ok.webp&#34; alt=&#34;cap_ok&#34;  /&gt;&lt;br&gt;
根据CAP原则定义，系统的一致性、可用性和分区容错性细分如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一致性：   N1和N2的数据库V之间的数据是否完全一样。
可用性：   N1和N2的对外部的请求能否做出正常的响应。
分区容错性：N1和N2之间的网络是否互通。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;22-异常情况&#34;&gt;2.2 异常情况&lt;/h4&gt;
&lt;p&gt;假设一种极端情况，N1和N2之间的网络断开了，我们要支持这种网络异常。&lt;br&gt;
相当于要满足分区容错性，能不能同时满足一致性和可用性呢？还是说要对他们进行取舍？&lt;br&gt;
&lt;img src=&#34;/post/distributed_system/images/cap_p.webp&#34; alt=&#34;cap_ok&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两种选择：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;第一：牺牲数据一致性，保证可用性。响应旧的数据V0给用户。
第二：牺牲可用性，保证数据一致性。阻塞等待，直到网络连接恢复，数据更新操作M完成之后，再给用户响应最新的数据V1。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个过程，证明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。&lt;/p&gt;
&lt;h3 id=&#34;3-cap原则权衡&#34;&gt;3. CAP原则权衡&lt;/h3&gt;
&lt;p&gt;通过CAP理论，我们知道无法同时满足一致性、可用性和分区容错性这三个特性.&lt;/p&gt;
&lt;h4 id=&#34;31-ca-without-p&#34;&gt;3.1. CA without P&lt;/h4&gt;
&lt;p&gt;如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。&lt;br&gt;
但分区不是你想不想的问题，而是始终会存在!&lt;/p&gt;
&lt;h4 id=&#34;32-cp-without-a&#34;&gt;3.2. CP without A&lt;/h4&gt;
&lt;p&gt;如果不要求A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。&lt;br&gt;
很多传统的数据库分布式事务都属于这种模式。&lt;/p&gt;
&lt;h4 id=&#34;33-ap-wihtout-c&#34;&gt;3.3. AP wihtout C&lt;/h4&gt;
&lt;p&gt;要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;对于多数大型互联网应用的场景，主机众多、部署分散。而且现在的集群规模越来越大，所以节点故障、网络故障是常态。这种应用一般要保证服务可用性达到N个9，即保证P和A，只有舍弃C（退而求其次保证最终一致性）。虽然某些地方会影响客户体验，但没达到造成用户流程的严重程度。&lt;br&gt;
对于涉及到钱财这样不能有一丝让步的场景，C必须保证。网络发生故障宁可停止服务，这是保证CA，舍弃P。&lt;/p&gt;
&lt;p&gt;孰优孰劣，没有定论，只能根据场景定夺，适合的才是最好的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考&lt;br&gt;
[https://www.ibm.com/cloud/learn/cap-theorem(https://www.ibm.com/cloud/learn/cap-theorem)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://towardsdatascience.com/cap-theorem-and-distributed-database-management-systems-5c2be977950e&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://towardsdatascience.com/cap-theorem-and-distributed-database-management-systems-5c2be977950e&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed/&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.analyticsvidhya.com/blog/2020/08/a-beginners-guide-to-cap-theorem-for-data-engineering/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.analyticsvidhya.com/blog/2020/08/a-beginners-guide-to-cap-theorem-for-data-engineering/&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/33999708&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/33999708&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://www.ruanyifeng.com/blog/2018/07/cap.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.ruanyifeng.com/blog/2018/07/cap.html&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844903621490901006&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6844903621490901006&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Algorithm: 1. Bubble Sort</title>
        <link>/p/algorithm-1.-bubble-sort/</link>
        <pubDate>Fri, 05 Mar 2021 14:30:27 +0800</pubDate>
        
        <guid>/p/algorithm-1.-bubble-sort/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about algorithms.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-what-is-bubble-sort&#34;&gt;1. What is Bubble Sort?&lt;/h3&gt;
&lt;p&gt;Bubble Sort is a sorting algorithm that is simple and obvious.&lt;br&gt;
We do it in the following steps:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. We iterate elements of an array in pairs and then switch them if the sequence of elements in a pair is not correct.
At the end of the iteration, the last element will be the biggest.

2. Repeat step one until the last biggest element.

3. End if there are no elements we need to compare.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://www.runoob.com/wp-content/uploads/2019/03/bubbleSort.gif&#34; alt=&#34;bubble_sort&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-time-and-space-efficiency&#34;&gt;2. Time and Space Efficiency&lt;/h3&gt;
&lt;p&gt;Since we cannot get a sorted array(N) by iterating array elements once,&lt;br&gt;
we should repeat the iteration multiple(N) times.&lt;br&gt;
Thus the bubble sort gets O(n^2) time.&lt;br&gt;
However, it doesn&amp;rsquo;t need extra memory as we swap elements when required.&lt;/p&gt;
&lt;h3 id=&#34;3-implementation&#34;&gt;3. Implementation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;BubbleSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;lastEnd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastEnd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastEnd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;lastEnd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lastEnd: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastEnd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Reference&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/w3cnote/bubble-sort.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.runoob.com/w3cnote/bubble-sort.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Algorithm: 2. Insert Sort</title>
        <link>/p/algorithm-2.-insert-sort/</link>
        <pubDate>Fri, 05 Mar 2021 14:30:27 +0800</pubDate>
        
        <guid>/p/algorithm-2.-insert-sort/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes about algorithms.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-what-is-insert-sort&#34;&gt;1. What is Insert Sort?&lt;/h3&gt;
&lt;p&gt;Anyone who has played poker would understand what insert sort is.&lt;br&gt;
Be cautious that elements to the left of the beginning index are already sorted, thus we can stop redundant comparison if the beginning indexed element is bigger than the previous one.&lt;/p&gt;
&lt;p&gt;Here We do it in the following steps:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. We start from the beginning index, which is the second one of an array,
compare it with the previous element,
and switch these two elements if the previous one is bigger.

2. We set the one behind the beginning index as the new beginning index.

3. Repeat steps 1 and 2 until the beginning index reaches the end of the array.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif&#34; alt=&#34;bubble_sort&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-time-and-space-efficiency&#34;&gt;2. Time and Space Efficiency&lt;/h3&gt;
&lt;p&gt;Since we repeat the iteration multiple(N) times and compare elements multiple(N) times.&lt;br&gt;
Thus the bubble sort gets O(n^2) time.&lt;br&gt;
However, it doesn&amp;rsquo;t need extra memory if we swap elements when required.&lt;/p&gt;
&lt;h3 id=&#34;3-implementation&#34;&gt;3. Implementation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;InsertSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;arrLen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arrLen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;// break to avoid redundant comparison, since elements before index i is already sorted
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;i: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;arr: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;i: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;arr: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Reference&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/w3cnote/insertion-sort.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.runoob.com/w3cnote/insertion-sort.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Note: Logic</title>
        <link>/p/note-logic/</link>
        <pubDate>Wed, 03 Mar 2021 19:00:52 +0800</pubDate>
        
        <guid>/p/note-logic/</guid>
        <description>&lt;h3 id=&#34;1-状态机-两杯酒交互后的数量&#34;&gt;1. 状态机: 两杯酒交互后的数量&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;调酒&lt;br&gt;
两个杯子(B1, B2)分别装1000ml酒, B1装红酒, B2装白酒;&lt;br&gt;
从B1倒100ml红酒到B2中;&lt;br&gt;
再从B2倒出100ml酒(非均匀混合体)到B1中;&lt;br&gt;
问题: B1中白酒多,还是B2中红酒多&lt;br&gt;
答案: 一样多&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;status 1&lt;br&gt;
B1装1000ml红酒, B2装1000ml白酒;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;/post/jobs_knowledge/images/wine_s1.png&#34; alt=&#34;wine_s1&#34;  /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;杯子&lt;/th&gt;
&lt;th&gt;红酒&lt;/th&gt;
&lt;th&gt;白酒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;B1&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;status 2&lt;br&gt;
从B1倒100ml红酒到B2中;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;/post/jobs_knowledge/images/wine_s2.png&#34; alt=&#34;wine_s2&#34;  /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;杯子&lt;/th&gt;
&lt;th&gt;红酒&lt;/th&gt;
&lt;th&gt;白酒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;B1&lt;/td&gt;
&lt;td&gt;1000-(100)=900&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B2&lt;/td&gt;
&lt;td&gt;0+(100)=100&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;step 3&lt;br&gt;
再从B2倒出100ml酒(非均匀混合体)到B1中&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;/post/jobs_knowledge/images/wine_s3.png&#34; alt=&#34;wine_s3&#34;  /&gt;&lt;br&gt;
从B2倒100ml混合酒到B1, 令B2倒入B1杯中的白酒容量为X,则B2倒入B1杯中的红酒容量则为100-X&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;杯子&lt;/th&gt;
&lt;th&gt;红酒&lt;/th&gt;
&lt;th&gt;白酒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;B1&lt;/td&gt;
&lt;td&gt;900+(100-X)&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B2&lt;/td&gt;
&lt;td&gt;100-(100-X)&lt;/td&gt;
&lt;td&gt;1000-X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;结果如下表:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;杯子&lt;/th&gt;
&lt;th&gt;红酒&lt;/th&gt;
&lt;th&gt;白酒&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;B1&lt;/td&gt;
&lt;td&gt;1000-X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B2&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;1000-X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;因此, B1中白酒和B2中红酒都是X&lt;/p&gt;
&lt;h3 id=&#34;2-集合题-编程多面手&#34;&gt;2. 集合题: 编程多面手&lt;/h3&gt;
&lt;p&gt;假如技术团队共有50人，其中会C语言的有36人，会JAVA语言的有44人，会GO语言的有32人,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;三个语言都会的最多有多少人?&lt;br&gt;
最多的人应该是最小集合的全集: 32&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三个语言都会的最少人数?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总人数:50人&lt;br&gt;
a. 用集合表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;能力\语言&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;JAVA&lt;/th&gt;
&lt;th&gt;GO&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;会&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不会&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;三个语言都不会的最大值是14+6+18=38, 则都会的最小值即为50-38=12
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;b. 用集合算数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A B C 的交集公式为:
AnBnC = AuBuC - (AnB + BnC + AnC) + (AnBnC)
(AnBnC)min = AuBuC - (AnB + BnC + AnC)max + (AnBnC)min

AuBuC = 36 + 44 + 32 = 112
(AnB + BnC + AnC)max =  (36 + 32 + 32) = 100
(AnBnC)min = 0
因此 (AnBnC)min = 112 - 100 + 0 = 12
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Note: Trees</title>
        <link>/p/note-trees/</link>
        <pubDate>Wed, 03 Mar 2021 19:00:52 +0800</pubDate>
        
        <guid>/p/note-trees/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;二叉树, 二叉搜索树(BST), 平衡二叉树(AVL), 红黑树, B树,B+树&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;二叉树&#34;&gt;二叉树&lt;/h4&gt;
&lt;p&gt;无序插入, 当需要查找的时候，还是得一个一个挨着去遍历查找&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/binary_tree.png&#34; alt=&#34;binary_tree&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;二叉搜索树bst&#34;&gt;二叉搜索树(BST)&lt;/h4&gt;
&lt;p&gt;插入的数据有序，左子树必须小于根节点，右子树必须大于根节点;&lt;br&gt;
使用二分查找来提高效率&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/bst.png&#34; alt=&#34;bst&#34;  /&gt;&lt;br&gt;
但是如果插入的顺序是升序或者降序的话，树的形状会变成如下：&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/bst_o_n.png&#34; alt=&#34;bst_o_n&#34;  /&gt;&lt;br&gt;
此时二叉搜索树就会退化成链表，时间复杂度又会变成O(n)&lt;/p&gt;
&lt;h4 id=&#34;平衡二叉树avl&#34;&gt;平衡二叉树(AVL)&lt;/h4&gt;
&lt;p&gt;为了解决上述问题，通过左旋转或右旋转让树平衡&lt;br&gt;
最短子树跟最长子树高度只差不能超过1&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/avl.webp&#34; alt=&#34;avl&#34;  /&gt;&lt;br&gt;
由图我们可以看到，当顺序插入的时候，会自动的进行旋转，以达到平衡&lt;br&gt;
但是会通过插入性能的损失来弥补查询性能的提升&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我们插入的数据很多时候，而查询很少的时候，由于插入数据会旋转同样会消耗很多时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-红黑树&#34;&gt;4. 红黑树&lt;/h4&gt;
&lt;p&gt;同样是经过左右旋让树平衡起来，还要变色的行为&lt;br&gt;
最长子树只要不超过最短子树的两倍即可&lt;br&gt;
查询性能和插入性能近似取得平衡&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但是随着数据的插入、发现树的深度会变深，树的深度会越来越深，意味着IO次数越多，影响数据读取的效率&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-b树&#34;&gt;5. B树&lt;/h4&gt;
&lt;p&gt;为了解决上述数据插入过多，树深度变深的问题，我们采用B树&lt;br&gt;
把原来的有序二叉树变成有序多叉树&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/b_tree.webp&#34; alt=&#34;b_tree&#34;  /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;举例： 如果要查询select * from table where id=14？
第一步，将磁盘一加载到内存中，发现14&amp;lt;16,寻找地址磁盘2
第二步，将磁盘二加载到内存中，发现14&amp;gt;11,寻找地址磁盘7
第三步，将磁盘七加载到内存中，发现14=14，读取data，取出data，结束
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;问题&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;B树不支持范围查询的快速查找&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;如果我们查询一个范围的数据，查找到范围一个边界时，需要回到根节点重新遍历查找，需要从根节点进行多次遍历，即便找到范围的另一个边界，查询效率会降低。
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;如果data存储的是行记录，行的大小随着列数的增多，所占空间会变大。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;这时，一个页中可存储的数据量就会变少，树相应就会变高，磁盘IO次数就会变大。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;6-b树&#34;&gt;6. B+树&lt;/h4&gt;
&lt;p&gt;B+树对B树进行了改进，把数据全放在了叶子节点中，叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/jobs_knowledge/images/b&amp;#43;tree.webp&#34; alt=&#34;b&amp;#43;tree&#34;  /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;例如： 查询范围 select * from table where id between 11 and 35？

第一步，将磁盘一加载到内存中，发现11&amp;lt;28,寻找地址磁盘2
第二步，将磁盘二加载到内存中，发现10&amp;gt;11&amp;gt;17,寻找地址磁盘5
第三步，将磁盘五加载到内存中，发现11=11，读取data
第四步，继续向右查询，读取磁盘5，发现35=35，读取11-35之间数据，结束
由此可见，这样的范围查询比B树速度提高了不少
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;B+树相对B树的优点&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;1. 叶子节点中才放数据
2. 非叶子节点中不存储数据
3. B+树每个节点包含更多个节点，这样做的好处，可以降低树的高度，同时将数据范围变成多个区间，区间越多查询越快
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;思考题&lt;br&gt;
为什么 MySQL 的索引要使用 B+ 树而不是其它树形结构?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;因为 B 树不管叶子节点还是非叶子节点，都会保存数据，这样导致在非叶子节点中能保存的指针数量变少（有些资料也称为扇出），指针少的情况下要保存大量数据，只能增加树的高度，导致 IO 操作变多，查询性能变低。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;7-b树的高度与数据量&#34;&gt;7. B+树的高度与数据量&lt;/h4&gt;
&lt;h5 id=&#34;71--innodb-索引数据结构&#34;&gt;7.1  InnoDB 索引数据结构&lt;/h5&gt;
&lt;p&gt;在计算机中磁盘存储数据最小单元是扇区，一个扇区的大小是 512 字节，&lt;br&gt;
而文件系统（例如XFS/EXT4）他的最小单元是块，一个块的大小是 4k，文件系统中一个文件大小只有1个字节，但不得不占磁盘上4KB的空间。&lt;br&gt;
而对于我们的 InnoDB 存储引擎也有自己的最小储存单元——页（Page），一个页的大小是 16K。&lt;br&gt;
Innodb 的所有数据文件（后缀为 ibd 的文件），他的大小始终都是 16384（16k）的整数倍。&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/innodb_block_size.png&#34; alt=&#34;innodb_block_size&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;磁盘扇区、文件系统、InnoDB 存储引擎都有各自的最小存储单元。&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/innodb_file_system.jpg&#34; alt=&#34;innodb_file_system&#34;  /&gt;&lt;br&gt;
MySQL中, InnoDB 页的大小默认是 16k:&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/innodb_page_size.png&#34; alt=&#34;innodb_page_size&#34;  /&gt;&lt;/p&gt;
&lt;p&gt;数据表中的数据都是存储在页中的，假设一行数据的大小是 1k，那么一个页可以存放 16 行这样的数据。&lt;br&gt;
1、InnoDB 存储引擎的最小存储单元是页，页可以用于存放数据也可以用于存放键值 + 指针，在 B+ 树中叶子节点存放数据，非叶子节点存放键值 + 指针。&lt;/p&gt;
&lt;p&gt;2、索引组织表通过非叶子节点的二分查找法以及指针确定数据在哪个页中，进而在去数据页中查找到需要的数据；&lt;/p&gt;
&lt;p&gt;假设 B+ 树高为 2，即存在一个根节点和若干个叶子节点，那么这棵 B+ 树的存放总记录数为：根节点指针数 * 单个叶子节点记录行数。&lt;br&gt;
上文我们已经说明单个叶子节点（页）中的记录数 =16K/1K=16（这里假设一行记录的数据大小为 1k)。&lt;/p&gt;
&lt;p&gt;非叶子节点能存放多少指针？&lt;br&gt;
假设主键 ID 为 bigint 类型，长度为 8 字节，而指针大小在 InnoDB 源码中设置为 6 字节，这样一共 14 字节，我们一个页中能存放多少这样的单元，其实就代表有多少指针，即 16384/14=1170。&lt;br&gt;
那么可以算出一棵高度为 2 的 B+ 树，能存放 1170&lt;em&gt;16=18720 条这样的数据记录。&lt;br&gt;
根据同样的原理我们可以算出一个高度为 3 的 B+ 树可以存放： 1170&lt;/em&gt;1170*16=21902400 条这样的记录。&lt;/p&gt;
&lt;p&gt;所以在 InnoDB 中 B+ 树高度一般为 1-3 层，它就能满足千万级的数据存储。&lt;/p&gt;
&lt;p&gt;在查找数据时一次页的查找代表一次 IO，所以通过主键索引查询通常只需要 1-3 次 IO 操作即可查找到数据。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://yq.aliyun.com/articles/692067&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;索引优化&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.jianshu.com/p/63bda04adf38&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.jianshu.com/p/63bda04adf38&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/86137284&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/86137284&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Note: Network</title>
        <link>/p/note-network/</link>
        <pubDate>Mon, 01 Mar 2021 19:00:52 +0800</pubDate>
        
        <guid>/p/note-network/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;http各版本的区别(http0.9, http1.0, http1.1, http2.0)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-httphttps&#34;&gt;1. HTTP&amp;amp;HTTPS&lt;/h2&gt;
&lt;h3 id=&#34;1-https证书的申请流程&#34;&gt;1. HTTPS证书的申请流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在服务器上生成CSR文件（证书申请文件，内容包括证书公钥、使用的Hash算法、申请的域名、公司名称、职位等信息）&lt;/li&gt;
&lt;li&gt;把CSR文件和其他可能的证件上传到CA认证机构&lt;/li&gt;
&lt;li&gt;CA机构收到证书申请之后，使用申请中的Hash算法，对部分内容进行摘要，然后使用CA机构自己的私钥对这段摘要信息进行签名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/post/jobs_knowledge/images/ca_sign_procedure.png&#34; alt=&#34;ca_sign_procedure&#34;  /&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;CA机构把签名过的证书通过发送给申请者。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2-https客户端和服务端的交互流程&#34;&gt;2. HTTPs客户端和服务端的交互流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/post/jobs_knowledge/images/https_interoperation.png&#34; alt=&#34;https_interoperation&#34;  /&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-客户端向服务器发出加密通信的请求&#34;&gt;1. 客户端向服务器发出加密通信的请求&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;(1) 支持的协议版本，比如 TLS 1.0
(2) 客户端生成的随机数 random1, 稍后用于生成 会话密钥
(3) 支持的加密算法， 比如RSA非对称加密
(4) 支持的压缩算法
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;2-服务器收到请求然后响应&#34;&gt;2. 服务器收到请求，然后响应&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;(1) 确认使用的加密通信协议，比如 TLS 1.0版本。 若客户端与服务器支持的版本不一致，则服务器关闭加密通信。
(2) 服务器生成随机数 random2, 稍后用于生成 会话密钥
(3) 确认使用的加密方法，比如 RSA非对称加密
(4) 服务器的证书
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3-客户端验证服务器证书&#34;&gt;3. 客户端验证服务器证书&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;验证流程&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;1. CA机构在签发证书的时候，用签名算法(sha256RSA)对证书内容进行摘要，用自己的私钥对摘要进行签名E
2. 浏览器用预置在系统中的CA机构的公钥对服务器证书进行验签：用CA机构的公钥解密签名后的摘要E
3. 验签通过后得到CA机构使用的证书摘要S
4. 浏览器用相同的签名算法对证书内容进行一次摘要S1，若得到的值S1与验证签之后得到的摘要S相同，则验签通过
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;生成随机密钥 pre-master secret&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;验证通过后，客户端生成一个随机数 pre-master secret, 然后用证书中的公钥进行加密，并传给服务端。
服务端端用私钥将其解密；
即客户端和服务端都有一套相同的数据：pre-master secret, random1, random2
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;pre-master secret&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;pre-master secret 前两个字节是TLS版本号。
在 Client 在第一次请求的时候会明文发送一份加密套件列表和当前支持的SSL/TLS版本号给服务端，
若服务端对密文中解密出来的pre-master版本号跟之前客户端发送的版本号不一致，则停止通信
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;4-服务端获取对称加密密钥&#34;&gt;4. 服务端获取对称加密密钥&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;服务端收到用公钥加密的内容，用私钥将其解密后，获得pre-master secret, random1, random2,
然后通过一定的算法生成sesson key和MAC算法密钥。
客户端也会使用radom1、radom2、pre-master secret，和同样的算法生成session Key和MAC算法的秘钥。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;5-在后续的交互中用session-key-和-mac-算法密钥对传输的内容进行加解密&#34;&gt;5. 在后续的交互中，用session key 和 MAC 算法密钥对传输的内容进行加解密&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;客户端：
  1. 用MAC密钥对内容进行摘要
  2. 用 session key对内容进行加密
服务端：
  1. 用sesion key对收到的数据进行解密
  2. 用 MAC 密钥验证内容的完整性
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;##　2. Tcp&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/tcp_status.png&#34; alt=&#34;tcp_status&#34;  title=&#34;TCP状态图&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-状态演示&#34;&gt;1. 状态演示&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;用nc启动一个服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;nc -l 8080
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;用nc客户端连接服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;nc 127.0.0.2 8080
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;查看网络状态&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;ss -atnp | grep :8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/post/jobs_knowledge/images/server_client_ports.png&#34; alt=&#34;tcp_ports&#34;  /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;其中0.0.0.0:8080是服务端的监听端口
127.0.0.2:8080 为服务端与客户端通信的连接
查看server的文件描述符
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/post/jobs_knowledge/images/server_fds.png&#34; alt=&#34;server_fds&#34;  /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0，1和2: 标准输入，标准输出和标准错误
3: 为监听文件
4: 为与客户端的连接文件
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为服务端只有一个监听端口，但是每个client都会建立一个fd，&lt;br&gt;
因此服务端会消耗大量的fd，但服务端的fd数量是有限的。&lt;br&gt;
4. 断开客户端，客户端连接状态为TIME-WAIT&lt;br&gt;
&lt;img src=&#34;/post/jobs_knowledge/images/client_time_wait.png&#34; alt=&#34;client_time_wait&#34;  /&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;若服务端未正确处理断开的客户端连接，则会出现大量的CLOSE-WAIT，同时会占用服务器大量的fd资源&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;服务器能打开的fd数量是有限的，当fd耗尽时，就无法建立新的连接了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-time_wait状态及其原因&#34;&gt;2. time_wait状态及其原因&lt;/h3&gt;
&lt;p&gt;主动断开连接的一方在ack对方的fin后，会进入TIME－WAIT状态。&lt;br&gt;
TIME-WAIT状态:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. TCP连接中，主动关闭连接的一方收到FIN命令后，会进入TIME-WAIT状态，并返回ACK命令
2. 保持2MSL时间（120秒）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;大量TIME-WAIT状态的存在，其原因是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 大量的短连接存在
2. HTTP请求中，若Connection 取值为close，服务端会主动关闭连接
3. TCP四次挥手过程中，为了保证ACK和接收延迟数据，设置TIME-WAIT为2倍的MSL。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-解决大量time-wait状态的方法&#34;&gt;3. 解决大量TIME-WAIT状态的方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1. 客户端
  使用长链接：HTTP请求的头部Connection设置为keep-alive, 这样服务端不会关闭连接，目前大量浏览器是这样处理的
2. 服务端
  a. 允许time_wait状态的socket被重用
  b. 缩短time_wait的时间
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4-time-wait存在的目的&#34;&gt;4. TIME-WAIT存在的目的&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可靠的实现TCP的全双工连接&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;  TCP四次挥手关闭连接时，最后一个ACK是由主动关闭连接的一方发出的；
  若这个ACK丢失，则对方会重发FIN请求；
  因此主动关闭方需要维护一个TIME－WAIT状态，处理对方重发的FIN
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;处理延迟到达的报文&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;因为网络的不稳定性，TCP报文可能会迟延到达，
为了避免延迟到达的报文被误认为是新TCP连接的数据，需要在允许新建TCP连接前，保持一个不可用的状态，
等待延迟报文的消失，一般设置为2MSL（Maximum Segment Lifetime：最大生存时间）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/post/jobs_knowledge/images/tcp_fin_timeout.png&#34; alt=&#34;tcp_fin_timeout&#34;  /&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-tcp协议控制算法&#34;&gt;5. tcp协议控制算法&lt;/h3&gt;
&lt;p&gt;####　1. 流量控制&lt;/p&gt;
&lt;h4 id=&#34;2-拥塞控制&#34;&gt;2. 拥塞控制&lt;/h4&gt;
&lt;p&gt;#####　１.慢启动&lt;br&gt;
#####　２.拥塞避免&lt;br&gt;
#####　３.拥塞发生&lt;br&gt;
#####　４.快恢复&lt;/p&gt;
&lt;p&gt;###　6. tcp与udp的区别，为什么是可靠连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.cioage.com/art/202008/623158.htm###&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cioage.com/art/202008/623158.htm###&lt;/a&gt;　&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/298214130&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/298214130&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Note: Redis</title>
        <link>/p/note-redis/</link>
        <pubDate>Fri, 26 Feb 2021 19:00:52 +0800</pubDate>
        
        <guid>/p/note-redis/</guid>
        <description>&lt;h4 id=&#34;redis&#34;&gt;Redis&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Redis数据类型及应用场景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis进程模型及其高效原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis有序集的实现方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Note: System and Programming</title>
        <link>/p/note-system-and-programming/</link>
        <pubDate>Fri, 26 Feb 2021 19:00:52 +0800</pubDate>
        
        <guid>/p/note-system-and-programming/</guid>
        <description>&lt;h3 id=&#34;1-channel-底层实现&#34;&gt;1. channel 底层实现&lt;/h3&gt;
&lt;h3 id=&#34;programming-language&#34;&gt;Programming Language&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Golang 和 C＋＋的区别及使用场景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Golang 的协程管理（GOP）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程，线程和协程的区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;make 和 new 的区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;channel 底层实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;channel如何唤醒goroutine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;golang GC 机制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;golang 单元测试及覆盖范围&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;系统调用&#34;&gt;系统调用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;poll, select 和 epoll的区别及其数据结构&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;data-structure&#34;&gt;Data Structure&lt;/h3&gt;
&lt;h4 id=&#34;b树和b树&#34;&gt;B树和B＋树&lt;/h4&gt;
&lt;h3 id=&#34;消息队列&#34;&gt;消息队列&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;RabbitMQ和Kafka的区别及优缺点&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;分布式&#34;&gt;分布式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分布式锁的应用和实现&lt;br&gt;
a. Redis&lt;br&gt;
b. Mysql&lt;br&gt;
c. zookeeper&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集群实现原理&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;算法&#34;&gt;算法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;挂气球&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;小明有一些气球想挂在墙上装饰，他希望相同颜色的气球不要挂在一起，写一个算法帮他得出一种可行的挂气球方式，
自行定义函数，输入和返回，如果无法做到相同颜色的气球不挂在一起
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;./leetcode.md&#34; &gt;leetcode&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;./newcoder.md&#34; &gt;newcoder&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;单项链接中环的判断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;固定数组队列读写实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排序&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;冒泡排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;归并排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;堆排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参考&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://i6448038.github.io/2019/04/11/go-channel/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://i6448038.github.io/2019/04/11/go-channel/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>MD: Mermaid for charts</title>
        <link>/p/md-mermaid-for-charts/</link>
        <pubDate>Mon, 14 Dec 2020 23:44:52 +0800</pubDate>
        
        <guid>/p/md-mermaid-for-charts/</guid>
        <description>&lt;p&gt;This passage is my learn notes for markdown.&lt;/p&gt;
&lt;h4 id=&#34;1-图标方向&#34;&gt;1. 图标方向&lt;/h4&gt;
&lt;p&gt;Mermaid支持多种图表方向,语法如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;graph 方向描述
  图表语句
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方向描述&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标示&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TB&lt;/td&gt;
&lt;td&gt;从上到下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BT&lt;/td&gt;
&lt;td&gt;从下到上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RL&lt;/td&gt;
&lt;td&gt;从右到左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LR&lt;/td&gt;
&lt;td&gt;从左到右&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;2-节点定义&#34;&gt;2. 节点定义&lt;/h4&gt;
&lt;p&gt;即流程图中每个文本块，包括开始、结束、处理、判断等。Mermaid 中每个节点都有一个 id，以及节点的文字。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表述&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id[文字]&lt;/td&gt;
&lt;td&gt;矩形节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id(文字)&lt;/td&gt;
&lt;td&gt;圆角矩形节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id((文字))&lt;/td&gt;
&lt;td&gt;圆形节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id&amp;gt;文字]&lt;/td&gt;
&lt;td&gt;右向旗帜状节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id{文字}&lt;/td&gt;
&lt;td&gt;菱形节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;需要注意的是，如果节点的文字中包含标点符号，需要时用双引号包裹起来。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;3-节点连线&#34;&gt;3. 节点连线&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表述&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;添加尾部箭头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;不添加尾部箭头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;单线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–text–&lt;/td&gt;
&lt;td&gt;单线上加文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;粗线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;==text==&lt;/td&gt;
&lt;td&gt;粗线加文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-.-&lt;/td&gt;
&lt;td&gt;虚线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-.text.-&lt;/td&gt;
&lt;td&gt;虚线加文字&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;4-子图表&#34;&gt;4. 子图表&lt;/h4&gt;
&lt;p&gt;使用下面语法添加子图表&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;subgraph 子图表名称
  子图表中的描述语句...
end
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;5-对fontawesome的支持&#34;&gt;5. 对fontawesome的支持&lt;/h4&gt;
&lt;p&gt;使用 fa: #图表名称# 的语法添加 fontawesome。&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Mermaid&#34; data-lang=&#34;Mermaid&#34;&gt;graph TB
    id1(圆形矩形)--普通线--&amp;gt;id2[矩形]
    subgraph 子图表
        id2==粗线==&amp;gt;id3{菱形}
        id3-.虚线.-id4&amp;gt;右向旗帜]
        id3--无箭头---id5((圆形))
    end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####　6. 序列图&lt;br&gt;
使用以下语法开始序列图&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sequenceDiagram
  [参与者１][消息线][参与者２]:消息体
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram
  张三-&amp;gt;&amp;gt;李四: 吃了吗
  李四-&amp;gt;&amp;gt;张三:　吃了
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####　7. 参与者&lt;br&gt;
上例中的张三、李四都是参与者，上例中的语法是最简单的，也可以明显表明参与者有哪些:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sequenceDiagram
    participant 参与者 1
    participant 参与者 2
    ...
    participant 简称 as 参与者 3 #该语法可以在接下来的描述中使用简称来代替参与者 3
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;8-消息线&#34;&gt;8. 消息线&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-&amp;gt;&lt;/td&gt;
&lt;td&gt;无箭头的实线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–&amp;gt;&lt;/td&gt;
&lt;td&gt;无箭头的虚线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&amp;raquo;&lt;/td&gt;
&lt;td&gt;有箭头的实线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–&amp;raquo;&lt;/td&gt;
&lt;td&gt;有箭头的虚线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-x&lt;/td&gt;
&lt;td&gt;末端为叉的实线（表示异步）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;–x&lt;/td&gt;
&lt;td&gt;末端为叉的虚线（表示异步）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;9-处理中&#34;&gt;9. 处理中&lt;/h4&gt;
&lt;p&gt;在消息线末尾增加 + ，则消息接收者进入当前消息的“处理中”状态；&lt;br&gt;
在消息线末尾增加 - ，则消息接收者离开当前消息的“处理中”状态。&lt;/p&gt;
&lt;p&gt;或者使用以下语法直接说明某个参与者进入“处理中”状态:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;activate 参与者
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;10-标注&#34;&gt;10. 标注&lt;/h4&gt;
&lt;p&gt;语法如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Note 位置表述 参与者: 标注文字
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中位置表述可以为&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表述&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;right of&lt;/td&gt;
&lt;td&gt;右侧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;left of&lt;/td&gt;
&lt;td&gt;左侧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;over&lt;/td&gt;
&lt;td&gt;在当中，可以横跨多个参与者&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;####　11. 循环&lt;br&gt;
语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;loop 循环条件
  循环语句...
end
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;12-判断&#34;&gt;12. 判断&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;alt cond1
  branch1 statements
else cond2        # else branch is optional
  branch2 statements
else ...
  ...
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果遇到无可选的情况，即没有 else 分支的情况，使用如下语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;opt cond
  branch statements
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;demo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Mermaid&#34; data-lang=&#34;Mermaid&#34;&gt;sequenceDiagram
  participant z as 张三
  participant l as 李四
  loop 日复一日
    z-&amp;gt;&amp;gt;l: 吃了吗您呐?
    l--&amp;gt;&amp;gt;z: 吃了,您呢?
    activate z
    Note left of z: 想了一下
    alt 还没吃
      z-xl: 还没呢,正准备回去吃
    else 已经吃了
      z-xl: 我也吃过了,哈哈
    end
    opt 大过年的
      l--&amp;gt;z: 祝您新年好!
    end
  end
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;13-甘特图gantt&#34;&gt;13. 甘特图(gantt)&lt;/h4&gt;
&lt;p&gt;甘特图是一类条形图，由Karol Adamiechi在1896年提出, 而在1910年Henry Gantt也独立的提出了此种图形表示。通常用在对项目终端元素和总结元素的开始及完成时间进行的描述。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;gantt
dateFormat YYYY-MM-DD

section S1
T1: 2014-01-01, 9d

section S2
T2: 2014-01-11, 9d

section S3
T3: 2014-01-02, 9d
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个复杂的甘特图：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;gantt
    dateFormat  YYYY-MM-DD
    title Adding GANTT diagram functionality to mermaid
    section A section
    Completed task            :done,    des1, 2014-01-06,2014-01-08
    Active task               :active,  des2, 2014-01-09, 3d
    Future task               :         des3, after des2, 5d
    Future task2               :         des4, after des3, 5d

    section Critical tasks
    Completed task in the critical line :crit, done, 2014-01-06,24h
    Implement parser and jison          :crit, done, after des1, 2d
    Create tests for parser             :crit, active, 3d
    Future task in critical line        :crit, 5d
    Create tests for renderer           :2d
    Add to mermaid                      :1d

    section Documentation
    Describe gantt syntax               :active, a1, after des1, 3d
    Add gantt diagram to demo page      :after a1  , 20h
    Add another diagram to demo page    :doc1, after a1  , 48h

    section Last section
    Describe gantt syntax               :after doc1, 3d
    Add gantt diagram to demo page      : 20h
    Add another diagram to demo page    : 48h
&lt;/code&gt;&lt;/pre&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标记&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;title&lt;/td&gt;
&lt;td&gt;标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dateFormat&lt;/td&gt;
&lt;td&gt;日期格式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;section&lt;/td&gt;
&lt;td&gt;模块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Completed&lt;/td&gt;
&lt;td&gt;已经完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Active&lt;/td&gt;
&lt;td&gt;当前正在进行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Future&lt;/td&gt;
&lt;td&gt;后续待处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;crit&lt;/td&gt;
&lt;td&gt;关键阶段&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;日期缺失&lt;/td&gt;
&lt;td&gt;默认从上一项完成后&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;中文示例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;gantt
    title 项目开发流程
    section 项目确定
        需求分析       :a1, 2016-06-22, 3d
        可行性报告     :after a1, 5d
        概念验证       : 5d
    section 项目实施
        概要设计      :2016-07-05, 5d
        详细设计      :2016-07-08, 10d
        编码          :2016-07-15, 10d
        测试          :2016-07-22, 5d
    section 发布验收
        发布: 2d
        验收: 3d
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;gantt
　　　dateFormat　YYYY-MM-DD
　　　title Adding GANTT diagram functionality to mermaid
　　　section A section
　　　Completed task　　:done, des1, 2014-01-06,2014-01-08
　　　Active task 　　　　:active, des2, 2014-01-09, 3d
　　　future task 　　　　:　　　  des3, after des2, 5d
　　　future task2　　　　:　　　  des4, after des3, 5d
　　　section Critical tasks
　　　Completed task in the critical line　:crit, done, 2014-01-06,24h
　　　Implement parser and json　　　　　　:crit, done, after des1, 2d
　　　Create tests for parser　　　　　　　:crit, active, 3d
　　　Future task in critical line　　　　　:crit, 5d
　　　Create tests for renderer　　　　　　:2d
　　　Add to ,mermaid　　　　　　　　　　　:1d
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;14--更多示例&#34;&gt;14.  更多示例&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;graph TD
A[Hard edge] --&amp;gt; |Link text| B(Round edge)
B --&amp;gt; C{Decision}
C --&amp;gt; |One| D[Result One]
C --&amp;gt; |Two| E[Result Two]
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&#34;language-Mermaid&#34; data-lang=&#34;Mermaid&#34;&gt;graph TB
    main --&amp;gt; parse --&amp;gt; execute;
    main --&amp;gt; init;
    main --&amp;gt; cleanup;
    execute --&amp;gt; make_string;
    execute --&amp;gt; printf
    init --&amp;gt; make_string;
    main --&amp;gt; printf;
    execute --&amp;gt; compare
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram
客户 -&amp;gt;&amp;gt; 银行柜台: 我要存钱
银行柜台 -&amp;gt;&amp;gt; 后台: 改一下这个账户数字哦
后台 -&amp;gt;&amp;gt; 银行柜台: 账户的数字改完了，明天起息
银行柜台 -&amp;gt;&amp;gt; 客户: 好了，给你回单，下一位
银行柜台 -&amp;gt;&amp;gt; Hello:what can I help you?
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;只要通过 -&amp;gt;&amp;gt; 和冒号 这种简单的文本标记，就能把各种关系和方向清晰的表达出来了。
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code class=&#34;language-Mermaid&#34; data-lang=&#34;Mermaid&#34;&gt;graph TD
  A(起床) --&amp;gt; B[洗漱]
  B --&amp;gt; C{扔硬币}
  C --&amp;gt;|正面朝上| D[喝牛奶]
  C --&amp;gt;|反面朝上| E[喝果汁]
  C --&amp;gt;|金枪不倒| F[(看情况)]
  A --&amp;gt;|穿衣服| G([跳绳])
  A --&amp;gt; H{{洗澡}}
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;引用&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.iminho.me/wiki/docs/mindoc/mermaid.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.iminho.me/wiki/docs/mindoc/mermaid.md&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844904147666337806&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6844904147666337806&lt;/a&gt;&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/thither_shore/article/details/52328313&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/thither_shore/article/details/52328313&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GA: 7. Dijkstra&#39;s algorithm</title>
        <link>/p/ga-7.-dijkstras-algorithm/</link>
        <pubDate>Sun, 13 Dec 2020 23:44:52 +0800</pubDate>
        
        <guid>/p/ga-7.-dijkstras-algorithm/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Weighted graphs: assigning weight to some edges.&lt;/li&gt;
&lt;li&gt;Dijkstra&amp;rsquo;s algorithm: What&amp;rsquo;s the shortest path to X?&lt;/li&gt;
&lt;li&gt;Cycles in graphs will make Dijkstra&amp;rsquo;s algorithm not work.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dijkstras-algorithm&#34;&gt;Dijkstra&amp;rsquo;s algorithm&lt;/h2&gt;
&lt;p&gt;Sometimes the shortest path is not the fastest path, since there are different weights with various edges.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/short_path.png&#34; width=&#34;70%&#34;/&gt; 
&lt;/figure&gt;
&lt;br&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/fast_path.png&#34; width=&#34;70%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In the figures above, you are going to walk from home to shool.&lt;br&gt;
By using BFS, we will find the shortest path A, while Dijkstra&amp;rsquo;s algorithm is better for us to find the fastest path.&lt;br&gt;
Therefore, you will choose path B instead of path A, since it will take you less time from home to school.&lt;/p&gt;
&lt;h2 id=&#34;four-steps-of-dijkstras-algorithm&#34;&gt;Four steps of Dijkstra&amp;rsquo;s algorithm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A. Find the node that will take you the least time to get to.&lt;/li&gt;
&lt;li&gt;B. Update the costs of this node&amp;rsquo;s neighbors.&lt;/li&gt;
&lt;li&gt;C. Repeat until you&amp;rsquo;ve done this for all nodes in the graph.&lt;/li&gt;
&lt;li&gt;D. Get the final path.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/dijkstra_step1.jpg&#34; width=&#34;50%&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;In the figure above, we want to walk from Begin to the End.&lt;br&gt;
Step A: It will take you 6 minutes from Begin to A and 2 minutes from Begin to B.&lt;/p&gt;
&lt;p&gt;Step B: Find how long it will take you to get to B&amp;rsquo;s neighbors by following edges from B.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You find that it will take less time to get to A and 7 minutes to get to End. Then, we update the costs.&lt;br&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/dijkstra_step2.jpg&#34; width=&#34;60%&amp;#34;&#34;/&gt; 
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Step C: Repeat steps above.&lt;/p&gt;
&lt;p&gt;Step A: Now, we find that Node A will take you less time to get to.&lt;br&gt;
Step B: Update the costs of neighbors of Node A.&lt;br&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/dijkstra_step3.jpg&#34; width=&#34;50%&amp;#34;&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Finally, we find that it only take us 6 minutes to get to the End.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember that Dijkstra&amp;rsquo;s algorithm can only be used in directed acyclic graphs, which is called DAGs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;trading-for-a-piano&#34;&gt;Trading for a piano&lt;/h2&gt;
&lt;p&gt;Here, the author provide an example to further illustrate Dijkstra&amp;rsquo;s algorithm.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/trade_graph.jpg&#34; width=&#34;50%&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;You have a book, and other people have other items, the relationship of which you can see from the figure above.&lt;br&gt;
In the figure, you want trade your book for the piano.&lt;br&gt;
To solve this problem, we should follow the steps of Dijkstra&amp;rsquo;s algorithm.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Find the node with the least cost.&lt;br&gt;
We can see from the figure that it costs you 0 to get to poster, which is our target.&lt;/li&gt;
&lt;li&gt;Step 2: Find the costs of it&amp;rsquo;s neighbors&lt;br&gt;
We compare the costs to it&amp;rsquo;s neighbors, and update the costs with smaller values and their parents(from which node we get to these neighbors).&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/trade_poster.jpg&#34; width=&#34;50%&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Repeat:&lt;/li&gt;
&lt;li&gt;Step 1: The node LP is the next one with the least cost.&lt;/li&gt;
&lt;li&gt;Step 2: Update the costs and parent of LP&amp;rsquo;s neighbors.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/trade_lp_neighbors.jpg&#34; width=&#34;50%&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Repeat:&lt;/li&gt;
&lt;li&gt;Step 1: The node Guitar is the next one with the least cost.&lt;/li&gt;
&lt;li&gt;Step 2: Update the costs and parent of Guitar&amp;rsquo;s neighbors.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/trade_guitar_neighbors.jpg&#34; width=&#34;50%&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Repeat:&lt;/li&gt;
&lt;li&gt;Step 1: the node Drum is the last one to be processed.&lt;/li&gt;
&lt;li&gt;Step 2: Update the costs and parent of Drum&amp;rsquo;s neighbors.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/trade_final_path.jpg&#34; width=&#34;50%&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Finally, we get the cheapest path: Book-&amp;gt;LP-&amp;gt;Drum-&amp;gt;Piano&lt;/p&gt;
&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;math&amp;#34;&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;util&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;poster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;poster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;guitar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;drum&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;guitar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;drum&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;guitar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;piano&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;drum&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;piano&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;piano&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;poster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;poster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;guitar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;guitar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MaxUint32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;drum&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;drum&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MaxUint32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;piano&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;piano&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MaxUint32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetDijkstraPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;nodeT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nodeT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nodeT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Parent&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;FindCheapestNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastMinCost&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;// Be careful that the minimal value we want must be bigger than the last minimal value.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;c1&#34;&gt;// And there will be no cheaper node than the last minimal cost
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastMinCost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tab&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tab&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Dijkstra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;finalPath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;totalCost&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;lastMinCost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;// 1. find the cheapst node
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;FindCheapestNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lastMinCost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cheapest node: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;util&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;lastMinCost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;

		&lt;span class=&#34;c1&#34;&gt;// 2. update it&amp;#39;s neighbors&amp;#39; cost and parent
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;neighbor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;neighborT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;neighbor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
				&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;neighbor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;neighbor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;neighborT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;neighbor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// update cost
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;nx&#34;&gt;neighborT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Parent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;// update parent
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;util&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ToStringIndent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;finalPath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetDijkstraPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;totalCost&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cost&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cost&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Dijkstra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;piano&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Dijkstra path: %s, cost: %d\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Output&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;cheapest node:  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;poster&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;Cost&amp;#34;&lt;/span&gt;:0&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
cheapest node:  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;Cost&amp;#34;&lt;/span&gt;:5&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
cheapest node:  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;guitar&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;Cost&amp;#34;&lt;/span&gt;:20&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
cheapest node:  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;drum&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;Cost&amp;#34;&lt;/span&gt;:25&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
cheapest node:  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;piano&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;drum&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;Cost&amp;#34;&lt;/span&gt;:35&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;drum&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;drum&amp;#34;&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cost&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;guitar&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;guitar&amp;#34;&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cost&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;lp&amp;#34;&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cost&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;piano&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;piano&amp;#34;&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;drum&amp;#34;&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cost&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;35&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
  &lt;span class=&#34;s2&#34;&gt;&amp;#34;poster&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;poster&amp;#34;&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Parent&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;,
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Cost&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
Dijkstra path: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;book lp drum piano&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, cost: &lt;span class=&#34;m&#34;&gt;35&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;negative-weight-edges&#34;&gt;Negative-weight edges&lt;/h2&gt;
&lt;h2 id=&#34;implementation-1&#34;&gt;Implementation&lt;/h2&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>GA: 6. Breadth-first search</title>
        <link>/p/ga-6.-breadth-first-search/</link>
        <pubDate>Thu, 10 Dec 2020 23:02:27 +0800</pubDate>
        
        <guid>/p/ga-6.-breadth-first-search/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;From this chapter we get to know graphs, which is a new data structure and can help us model a network.&lt;/li&gt;
&lt;li&gt;We also get to know a new algorhtim named breadth-first search, which can help us find the shortest path.&lt;/li&gt;
&lt;li&gt;We review the difference between directed and undirected graphs.&lt;/li&gt;
&lt;li&gt;We get to know a new sorting algorithm called topological sort, which can help us know dependent relationships between nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1-graphs&#34;&gt;1. Graphs&lt;/h2&gt;
&lt;p&gt;Graphs, which can reflect connections between nodes, are made up of nodes and edges.&lt;br&gt;
And the nodes connected directly to a node are called neghbors.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/graph_network.png&#34; width=&#34;70%&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;2-bfsbreadth-first-search&#34;&gt;2. BFS(Breadth-first search)&lt;/h2&gt;
&lt;p&gt;BFS can help us solve two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Is there a path from one node to another?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;What is the shortest path between the two nodes.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have a graph like this, and want to find a person whose name ends with character &amp;rsquo;m&#39;.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/graph_bfs.png&#34; width=&#34;60%&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Make a list of people to search.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Go to each person in the list and check whether this person&amp;rsquo;s name ends with &amp;rsquo;m&#39;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;If none of your friends&#39; name ends with &amp;rsquo;m&#39;, you have to see friends of your friends.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;When your search for someone from the list, add all of their friends to the list.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21-get-the-shortest-path&#34;&gt;2.1 Get the shortest path&lt;/h3&gt;
&lt;p&gt;As we can see from the graph, your friends are first-degree connections, and friends of them are second-degree connections.&lt;br&gt;
We should always search the first-degree connections before searching the second-degree connections, and so on.&lt;br&gt;
Thus, we use queue as the data structure to store the list.&lt;/p&gt;
&lt;h3 id=&#34;22-queues&#34;&gt;2.2 Queues&lt;/h3&gt;
&lt;p&gt;Compared with stack, which is LIFO(Last in, first out), queue is FIFO(First in, first out).&lt;br&gt;
It&amp;rsquo;s a very vivid picture, from which we can see this abstract concept.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/queue_stack1.png&#34; width=&#34;50%&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;3-implementing-the-graph&#34;&gt;3. Implementing the graph&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We should construct a graph that&amp;rsquo;s made up of nodes, each of which is connected to its neighboring nodes.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;We can map a node to all its neighbors by using a hash table.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example of Golang:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;you&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;claire&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;anuj&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;peggy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;peggy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;claire&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;thom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;jonny&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;anuj&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;peggy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;thom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;jonny&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;In the example above, Anuj is Bob&amp;rsquo;s neighbor, however, Bob isn&amp;rsquo;t Anju&amp;rsquo;s neighbor, since this graph is a directed graph.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-implementing-the-algorithm&#34;&gt;4. Implementing the algorithm&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;collections&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deque&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;search_queue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deque&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# creates a new queue&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;search_queue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;you&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Adds all of your neighbors to the search queue&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;searched&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;search_queue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# While the queue isn&amp;#39;t empty&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;search_queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;popleft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;# grabs the first person off the queue&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;searched&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person_is_seller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;# Checks whether the person is a mango seller&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; is a mango seller!&amp;#34;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;# Yes, they&amp;#39;re a mango seller.&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;search_queue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;# No, they aren&amp;#39;t. Add all of this person&amp;#39;s friends to the search queue.&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;searched&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;                                    &lt;span class=&#34;c1&#34;&gt;# If you reached here, no one in the queue was a mongo seller.&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;person_is_seller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;


&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;you&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;claire&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;anuj&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;peggy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;peggy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;claire&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;thom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;jonny&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;anuj&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;peggy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;thom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;jonny&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;you&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;you&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;claire&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;anuj&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;peggy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;peggy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;claire&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;thom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;jonny&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;anuj&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;peggy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;thom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;jonny&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;searchQueue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;searchQueue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;searchQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;you&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;searched&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;searchQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;//fmt.Println(&amp;#34;search_queue: &amp;#34;, searchQueue)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;searchQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;searchQueue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;searchQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;searched&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;personIsSeller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; is a mango seller!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;searchQueue&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;searchQueue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;searched&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;personIsSeller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;you&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;running-time&#34;&gt;Running time&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Since we&amp;rsquo;ll search the entire network, we&amp;rsquo;ll work through each edge.&lt;br&gt;
Thus, the running time is at least O(number of edges).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since We have a queue of every node to search and searching for each node cost time O(1),&lt;br&gt;
searching for every node will take O(number of nodes) total.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BFS takes O(V+E), in which V represent number of vertices, and E represents number of edges.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;BFS can tell us if there&amp;rsquo;s a path from A to B.&lt;/li&gt;
&lt;li&gt;If there&amp;rsquo;s a path between two nodes, BFS will find the shortest path.&lt;/li&gt;
&lt;li&gt;To find solutions of problems like &amp;ldquo;finding the shortest X&amp;rdquo;, we can model the problems as graphs and use BFS to solve them.&lt;/li&gt;
&lt;li&gt;There are arrows in directed graphs, following the direction of the arrows are the relationship.&lt;/li&gt;
&lt;li&gt;Since undirected graphs have no arrows, the relationship goes both ways.&lt;/li&gt;
&lt;li&gt;Queues are FIFO.&lt;/li&gt;
&lt;li&gt;Stacks are LIFO.&lt;/li&gt;
&lt;li&gt;We should use a queue to keep the Nodes, otherwise, we won&amp;rsquo;t find the shortest path.&lt;/li&gt;
&lt;li&gt;To avoid infinite loop, every node can only be checked once.&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>GA: 5. Hash tables</title>
        <link>/p/ga-5.-hash-tables/</link>
        <pubDate>Wed, 09 Dec 2020 23:09:04 +0800</pubDate>
        
        <guid>/p/ga-5.-hash-tables/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-requirements-for-hash-function&#34;&gt;1. Requirements for hash function&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It needs to be consistent.&lt;/li&gt;
&lt;li&gt;It should map different workds to different numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You get a hash table by putting a hash function and an array together.&lt;br&gt;
Hash tables use an array to store data since we can get an item from an array instantly(O(1)).&lt;/p&gt;
&lt;h2 id=&#34;2-use-cases&#34;&gt;2. Use cases&lt;/h2&gt;
&lt;h3 id=&#34;21--using-hash-tables-for-lookups&#34;&gt;2.1  Using hash tables for lookups&lt;/h3&gt;
&lt;p&gt;Hash tables make it easy to model a relationship from one item to another.&lt;br&gt;
Hash tables are used for lookups on a much larger scale.&lt;/p&gt;
&lt;h3 id=&#34;22-preventing-duplicate-entries&#34;&gt;2.2 Preventing duplicate entries&lt;/h3&gt;
&lt;p&gt;Keep in mind that the hash function would be really slow if you were storing elements in a array,&lt;br&gt;
since it would have to run a simple search(O(n)) over the entire list.&lt;br&gt;
However, you can get the value instantly if you store them in a hash table.&lt;br&gt;
Thus, checking for duplicates is very fast with a hash table.&lt;/p&gt;
&lt;h3 id=&#34;23-using-hash-tables-as-caching&#34;&gt;2.3 Using hash tables as caching&lt;/h3&gt;
&lt;p&gt;Caching is One of the final use of hash tables.&lt;br&gt;
Caching is widely used in websites, since the servers don&amp;rsquo;t have to do much work to find the requested data.&lt;br&gt;
Thus, caching is a common way to make things faster.&lt;/p&gt;
&lt;h2 id=&#34;3-collisions&#34;&gt;3. Collisions&lt;/h2&gt;
&lt;p&gt;Collision: two or more keys have been assigned the same slot.&lt;br&gt;
Since Collisions are bad, we need to work around them.&lt;br&gt;
We have many distinct ways to deal with collisions, the simplest one of which is this:&lt;br&gt;
If multiple keys map to the same slot, start a linked list at that slot.&lt;br&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/hash_collision.png&#34; width=&#34;50%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;However, if you have many keys startig with the letter A, you will only use one slot with a giant linked list.&lt;/li&gt;
&lt;li&gt;This will definitely slow down your hash table.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-performance&#34;&gt;4. Performance&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Action&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Hash(Average)&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Hash(Worst)&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Array&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Linked List&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Search&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(1)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(n)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(1)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Insert&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(1)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(n)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(n)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Delete&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(1)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(n)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(n)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We can see from the figure above that hash tables are as fast as arrays at searching,&lt;br&gt;
and are as fast as linked lists at inserts and delets.&lt;br&gt;
Nevertheless, hash tables are slow(O(n)) at all of those operations in the worst cases.&lt;br&gt;
In order not to hit the worst case performance with hash tables, we need to avoid collisions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A low load factor&lt;/li&gt;
&lt;li&gt;A good hash function&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;41-load-factor&#34;&gt;4.1 Load factor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Load Factor: Number of items in hash table / total number of slots&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, if your hash table has 5 slots and 2 of them used, the load factor would be 2/5.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the hash table is getting pretty full, we need to resize this table.&lt;/li&gt;
&lt;li&gt;And the rule of thumb is to make an array that is twice the size.&lt;/li&gt;
&lt;li&gt;Even though, the resizing takes some time, hash tables take O(1) on average.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-a-good-hash-function&#34;&gt;4.2 A good hash function&lt;/h3&gt;
&lt;p&gt;A good hash function districutes values in the array evenly.&lt;br&gt;
You can check the SHA function if your curiosity is great enough.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We can make a hash table by combining a hash function with an array.&lt;/li&gt;
&lt;li&gt;We need a hash function to minimize collisions.&lt;/li&gt;
&lt;li&gt;Hash tables have really fast search, insert, and delete.&lt;/li&gt;
&lt;li&gt;Hash tables are good for modeling relations from one item to another item.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;d better resize your hash table when your load facotor is greater than 0.7.&lt;/li&gt;
&lt;li&gt;Hash tables are widely used for caching data.&lt;/li&gt;
&lt;li&gt;Hash tables are great for catching duplicates.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GA: 4. Quicksort</title>
        <link>/p/ga-4.-quicksort/</link>
        <pubDate>Wed, 09 Dec 2020 08:32:27 +0800</pubDate>
        
        <guid>/p/ga-4.-quicksort/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This chapter I learned divide-and-conquer and quicksort, both of which can help me solve problems elegently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1-divide--conquer&#34;&gt;1. Divide &amp;amp; Conquer&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;It can take us some time to understand D&amp;amp;C. Therefore, we will see some problems to learn about it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;
&lt;p&gt;If you are a farmer with a large land and plan to divide this farmland evenly into square plots.&lt;br&gt;
Besides, the plots must be as big as possible.&lt;br&gt;
Before continuing your reading, think about how can you solve this problem?&lt;/p&gt;
&lt;p&gt;We can use D&amp;amp;C(Divde &amp;amp; Conquer) to solve this problem.&lt;br&gt;
To solve a problem using D&amp;amp;C, we should follow two steps:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Figure out the base case, which should be the simplest possible case.
2. Divide or decrease you problem until it becomes the base case.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Suppose you have a land of 30 * 50, now you have the largest square with side of 30.&lt;br&gt;
We have the rest of the land(20 * 30) and have the largest square of 20 * 20.&lt;br&gt;
Then we are left with a land of 10 * 10, which is the answer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findMaxEvenSquareR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findMaxEvenSquareR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-exercises&#34;&gt;2. Exercises:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Add up all numbers and return the total.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sumR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sumR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sumR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sumR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Write a recursive function to count the number of elements in a list&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;countEleR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;countEleR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Find the maximum number in a list&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findMaxR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;findMaxR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:])&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Write the D&amp;amp;C code for Binary Search&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;binarySearchR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binarySearchR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;binarySearchR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 1. figure out the base case
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;//. 2. reduce the problem and get to the base case
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mid&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;binarySearchR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Tip: When we got a recursive function involving an array, the base case is often an empty array or an array with one element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-quick-sort&#34;&gt;3. Quick Sort&lt;/h2&gt;
&lt;h3 id=&#34;31-quicksort-is-a-sorting-algorithm-which-is-much-faster-than-selection-sort-and-commonly-used-in-life&#34;&gt;3.1 Quicksort is a sorting algorithm, which is much faster than selection sort and commonly used in life.&lt;/h3&gt;
&lt;p&gt;The base case for quicksort are arrays that are empty and arrays with just one element.&lt;br&gt;
Using D&amp;amp;C, we can break down a array until we get the base case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Here are the steps for quick sort:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Pick an element from the array as the pivot&lt;/li&gt;
&lt;li&gt;Find the elements smaller than the privot and the elements larger than it(This is called Partitioning).&lt;/li&gt;
&lt;li&gt;Call quicksort recursively on the two sub-arrays.&lt;/li&gt;
&lt;li&gt;The sub-arrays get sorted, and then we combine the whole thing to get a sorted array.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;32--here-we-can-see-one-example-from-the-book&#34;&gt;3.2  Here we can see one example from the book.&lt;/h3&gt;
&lt;p&gt;After partitioning, we get three parts: numbers less than the pivot, the pivot and numbers greater than the pivot.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/quick_sort_m1.png&#34; width=&#34;50%&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Next, we&amp;rsquo;ll quick sort the two sub-arrays.&lt;/p&gt;
&lt;p&gt;Even though the two sub-arrays are not sorted, they&amp;rsquo;re partitioned.&lt;br&gt;
However, sorting the whole array would be pretty easy, if they were sorted.&lt;/p&gt;
&lt;p&gt;Then, we can combine the whole thing together, like this: left array + pivot + right array.&lt;br&gt;
We do this recursively and will get a sorted array.&lt;br&gt;
Here is the code, which would be easy to understand(In order to save space, We provide only the Golang code).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quickSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;pivot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;greater&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pivot&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;less&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;greater&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;greater&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;less: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;, pivot: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pivot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;, greater: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;greater&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;lessRet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quickSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;less&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;greaterRet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quickSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;greater&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lessRet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pivot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;greaterRet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;d come through the explanation above, you would find this code easy to understand.&lt;br&gt;
Nevertheless, it&amp;rsquo;s not efficent in memory.&lt;br&gt;
Here you can see codes optimized by using no extra memory space.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quickSortE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;pivot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// idx of element bigger than pivot
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pivot&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nf&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;quickSortE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;quickSortE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:])&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to have better performance, we use random element as the pivot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quickSortERand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Seed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;UnixNano&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;pIdx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Intn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;pivot&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pIdx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// idx of element bigger than pivot
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pivot&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nf&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;quickSortERand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
	&lt;span class=&#34;nf&#34;&gt;quickSortERand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:])&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4-big-o-notation&#34;&gt;4. Big O notation&lt;/h3&gt;
&lt;p&gt;Quicksort is unique since its speed depends on the pivot we use.&lt;br&gt;
Here we can see the most common Big O run times.&lt;br&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/search_time_m1.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Please pay attention to the example times in the chart because they are estimates of seconds per operation.&lt;br&gt;
Compared with Merged Sort, which is O(nlogn) and faster, quicksort is different:&lt;br&gt;
In the worst case, quicksorts takes O(n^2)time, which is as slow as selection sort.&lt;br&gt;
In the average case, quicksorts takes O(nlogn)time.&lt;/p&gt;
&lt;h3 id=&#34;5-merge-sort-vs-quicksort&#34;&gt;5. Merge Sort vs. Quicksort&lt;/h3&gt;
&lt;p&gt;For algorithms with O(n), there are a constant for every operation.&lt;br&gt;
Commonly, the constant is ignored, however, it&amp;rsquo;ll make a difference in some cases.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quick sort has a smaller constant than merge sort.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Therefore, if they&amp;rsquo;re both O(nlogn)time, quicksort will be faster.&lt;br&gt;
Besides, quicksort is faster in practice since it hits the average case way more often than the worst case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6-averge-case-vs-worst-case&#34;&gt;6. Averge case vs. Worst case&lt;/h3&gt;
&lt;p&gt;The performance of quicksort is heavily affected by the pivot.&lt;br&gt;
Suppose we always choose the first element as the pivot, and call quick with an sorted array.&lt;br&gt;
Since quicksort doesn&amp;rsquo;t to see whether the input array is already sorted, it will still try to sort it.&lt;/p&gt;
&lt;p&gt;As we can see in the following figure:&lt;br&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/quick_sort_worst.png&#34; width=&#34;70%&#34;/&gt; 
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Since we&amp;rsquo;re not splitting the array into two parts, one of the sub-arrays is always empty.&lt;br&gt;
As we always get O(n) in every level of the stack, we finally get O(n)*O(n) = O(n^2) time.&lt;br&gt;
Therefore, the call stack is so long that it takes O(n^2) time.&lt;/p&gt;
&lt;p&gt;On the other hand, if we make the middle element as the pivot, the call stack would be much shorter(O(logn).&lt;br&gt;
Therefore, we get operation time O(nlogn).&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;/post/grokking_algorithm/images/quick_sort_avg.png&#34; width=&#34;70%&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;However, the best case is also the average case.&lt;/li&gt;
&lt;li&gt;If we choose a random element in the array as the pivot, quicksort will have O(nlogn)time on average.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;Thank you for your effort to read this part of this passage.
What are included in this passage are my study notes about algorithm.
If you want to know more details about it, I strongly recommend you this book:
grokking algoriths: An illustrated guide for programmers and other curious people.
The author illustrates algorithms with pictures, which make people easily understand difficult questions.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;D&amp;amp;C works by splitting a problem into smaller parts. And the base case is usually an array with no or only one element.&lt;/li&gt;
&lt;li&gt;Choosing a random element as the pivot can make quicksort complete in O(nlog n) time on average.&lt;/li&gt;
&lt;li&gt;Quicksort is faster than merge sort since the constant in Big O notation matters.&lt;/li&gt;
&lt;li&gt;Since O(log n) is pretty faster than O(n) with a large list, the constant never matters for simple search versus binary search.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GA: 3. Recursion</title>
        <link>/p/ga-3.-recursion/</link>
        <pubDate>Tue, 08 Dec 2020 18:36:08 +0800</pubDate>
        
        <guid>/p/ga-3.-recursion/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In this chapter, I learned about recursion, which is very useful in many algorithms.&lt;br&gt;
Also, this chapter shows us how to break down a problem into a base case and a recursive case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-recursion&#34;&gt;1. Recursion&lt;/h2&gt;
&lt;p&gt;If you have a box containing more boxes, in which there will be no or more boxes.&lt;br&gt;
The key is in one of the boxes.&lt;br&gt;
How can you do to search for the key?&lt;/p&gt;
&lt;h3 id=&#34;11-solution-1&#34;&gt;1.1 Solution 1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Make a pile of boxes to check.&lt;/li&gt;
&lt;li&gt;Pick a box and look through it.&lt;/li&gt;
&lt;li&gt;Add a box to the pile to look through later, if you find one.&lt;/li&gt;
&lt;li&gt;If you find the key, you&amp;rsquo;re done.&lt;/li&gt;
&lt;li&gt;Repeat.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;12-solution-2&#34;&gt;1.2 Solution 2&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Look through a box.&lt;/li&gt;
&lt;li&gt;Go to step 1, if you find a box.&lt;/li&gt;
&lt;li&gt;If you find a key, you&amp;rsquo;re done.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Even though both solutions accomplish the same thing, the second one is clearer.&lt;/li&gt;
&lt;li&gt;However, loops have better performance in reality.&lt;/li&gt;
&lt;li&gt;Nevertheless, it&amp;rsquo;s essential to understand the concept since most significant algorithms use recursion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-base-case-and-recursive-case&#34;&gt;2. Base case and recursive case&lt;/h2&gt;
&lt;p&gt;We have to tell the function when to stop recursing in a recursive function.&lt;br&gt;
Thus, every recursive function has two parts: the base case, and the recurive case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;example&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;countdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# &amp;lt;------- Base case: we are done here.&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;       &lt;span class=&#34;c1&#34;&gt;# &amp;lt;----- Recursive case&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;countdown&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-stack&#34;&gt;3. Stack&lt;/h2&gt;
&lt;p&gt;Our computers also uses a stack internally named call stack.&lt;br&gt;
Here we use an example of factor to illustrate this concept:&lt;br&gt;
5! = 5 * 4 * 3 * 2 * 1 ==&amp;gt; 5! = 5 * 4!&lt;br&gt;
4! = 4 * 3!&lt;br&gt;
3! = 3 * 2!&lt;br&gt;
2! = 2 * 1!&lt;br&gt;
1! = 1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Recursive functions have two cases: the base case and the recursive case.&lt;/li&gt;
&lt;li&gt;Stacks have two operations: push and pop.&lt;/li&gt;
&lt;li&gt;All function calls go onto the call stack.&lt;/li&gt;
&lt;li&gt;The call stack can take up lot of memory if it gets large.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Github config for multiple users</title>
        <link>/p/github-config-for-multiple-users/</link>
        <pubDate>Sun, 06 Dec 2020 11:44:52 +0800</pubDate>
        
        <guid>/p/github-config-for-multiple-users/</guid>
        <description>&lt;h3 id=&#34;1-background&#34;&gt;1. Background&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;We sometimes use more than one github account to manage different repositories.
Even though we&#39;ve set the config file(~/.ssh/config) correctly and test(ssh -T git@github.com) correctly, 
it will promote &amp;quot;permission denied(public key)&amp;quot; while we hit git push.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;The problem is that we need to clarify different hosts for different users.&lt;/li&gt;
&lt;li&gt;And make the Host of url in you repository config the same as that of ~/.ssh/config&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-here-is-the-content-of-my-git-config-filesshconfig&#34;&gt;2. Here is the content of my git config file(~/.ssh/config):&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Host github1                        # Do make the Host distinct from each other
   Hostname github.com 
   User mingzhi999                  # This is your github account name
   IdentityFile ~/.ssh/id_rsa_git   # Please config your SSH key in your github settings

Host github2
   Hostname github.com 
   User lilu888 
   IdentityFile ~/.ssh/id_rsa_lilu_git
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-the-following-is-part-of-git-config-in-my-repository&#34;&gt;3. The following is part of git config in my repository&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;[remote &amp;quot;origin&amp;quot;]
	url = git@github2:lilu888/project.git
	fetch = +refs/heads/*:refs/remotes/origin/*

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Please pay attention to the format of url: git@Host:user/project.git&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-finally-there-will-be-no-error-with-git-push&#34;&gt;4. Finally, there will be no error with &amp;lsquo;git push&amp;rsquo;&lt;/h3&gt;
&lt;h4 id=&#34;references&#34;&gt;References&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;https://blog.csdn.net/cxrsdn/article/details/83274333
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>GA: 2. Selection sort</title>
        <link>/p/ga-2.-selection-sort/</link>
        <pubDate>Fri, 04 Dec 2020 23:44:52 +0800</pubDate>
        
        <guid>/p/ga-2.-selection-sort/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter-2-selection-sort&#34;&gt;Chapter 2: Selection Sort&lt;/h2&gt;
&lt;h3 id=&#34;1-tips-about-selection-sort&#34;&gt;1. Tips About Selection Sort&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Your computer’s memory is like a giant set of drawers.&lt;/li&gt;
&lt;li&gt;When you want to store multiple elements, use an array or a list.&lt;/li&gt;
&lt;li&gt;With an array, all your elements are stored right next to each other.&lt;/li&gt;
&lt;li&gt;With a list, elements are strewn all over, and one element stores the address of the next one.&lt;/li&gt;
&lt;li&gt;Arrays allow fast reads.&lt;/li&gt;
&lt;li&gt;Linked lists allow fast inserts and deletes.&lt;/li&gt;
&lt;li&gt;All elements in the array should be the same type (all ints, all doubles, and so on).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-codes-in-about-selection-sort&#34;&gt;2. Codes in about Selection Sort&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findSmallest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;smallest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;smallest_idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;smallest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;smallest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;smallest_idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;smallest_idx&lt;/span&gt; 

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;selectionSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;newArr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;smallest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;findSmallest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
        &lt;span class=&#34;n&#34;&gt;newArr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;smallest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newArr&lt;/span&gt; 

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;selectionSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findSmallest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;smallest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;smallest_idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;smallest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;smallest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;smallest_idx&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;idx&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;smallest_idx&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SelectionSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;arr: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;smallest_idx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;findSmallest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;smallest_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;smallest_idx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;smallest_idx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SelectionSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check out the &lt;a class=&#34;link&#34; href=&#34;https://jekyllrb.com/docs/home&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a class=&#34;link&#34; href=&#34;https://github.com/jekyll/jekyll&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;br&gt;
If you have questions, you can ask them on &lt;a class=&#34;link&#34; href=&#34;https://talk.jekyllrb.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GA: 1. Binary search</title>
        <link>/p/ga-1.-binary-search/</link>
        <pubDate>Thu, 03 Dec 2020 23:44:52 +0800</pubDate>
        
        <guid>/p/ga-1.-binary-search/</guid>
        <description>&lt;h1 id=&#34;statement&#34;&gt;Statement&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;This article is my study notes from the book: grokking algorithm: an illustrated guide for programmers and other curious people.&lt;/li&gt;
&lt;li&gt;Please refer to the original work for more details and indicate the source for reprinting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter-1-binary-search&#34;&gt;Chapter 1: Binary Search&lt;/h2&gt;
&lt;h3 id=&#34;1-tips-about-binary-search&#34;&gt;1. Tips About Binary Search&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;* Binary search is a lot faster than simple search.
* O(log n) is faster than O(n), but it gets a lot faster once the list of items you’re searching through grows.
* Algorithm speed isn’t measured in seconds.
* Algorithm times are measured in terms of growth of an algorithm.
* Algorithm times are written in Big O notation.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-codes-in-about-binary-search&#34;&gt;2. Codes in about Binary Search&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;binary_search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; 
        &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; 
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; 
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
            &lt;span class=&#34;n&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt; 


&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binary_search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binary_search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;BinarySearch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mid&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;high&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;low&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;my_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;BinarySearch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;BinarySearch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;my_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;five-big-o-run-times-sorted-from-fastest-to-slowest&#34;&gt;Five Big O run times sorted from fastest to slowest:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;* O(log n), also known as log time. Example: Binary search.
* O(n), also known as linear time. Example: Simple search.
* O(n * log n). Example: A fast sorting algorithm, like quicksort.
* O(n2). Example: A slow sorting algorithm, like selection sort.  
* O(n!). Example: A really slow algorithm, like the traveling salesperson.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check out the &lt;a class=&#34;link&#34; href=&#34;https://jekyllrb.com/docs/home&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a class=&#34;link&#34; href=&#34;https://github.com/jekyll/jekyll&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a class=&#34;link&#34; href=&#34;https://talk.jekyllrb.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TOEFL W2: Job performance and mood</title>
        <link>/p/toefl-w2-job-performance-and-mood/</link>
        <pubDate>Sat, 10 Oct 2020 17:16:02 +0800</pubDate>
        
        <guid>/p/toefl-w2-job-performance-and-mood/</guid>
        <description>&lt;p&gt;Some people may think that they can do a better job and make fewer mistakes if they deal with things in a serious mood.&lt;br&gt;
However, I believe that people should work out solutions with a light mood since it can bring them many benefits.&lt;/p&gt;
&lt;p&gt;Taking things easy can help people relax and perform better.&lt;br&gt;
According to a psychological report from China Daily, stress can have adverse effects on their jobs.&lt;br&gt;
For example, I was an engineer five years ago and often got lots of work every day. Sometimes, there would be at least ten machines with issues that need repair. The machines&#39; intricate system makes it challenging work since there were numerous electric lines and various equipment. And some of them are very sensitive to static electricity, so we must be careful and patient.&lt;br&gt;
Lots of people would be frustrated after hours of work. However, I found that I could do better and finish my job with high efficiency after drinking coffee and relaxation.&lt;br&gt;
Indeed, doing a job with relaxation can us improve work efficiency.&lt;/p&gt;
&lt;p&gt;Being happy can help people make friends more easily.&lt;br&gt;
People with a light mood are more likely to make a good impression on other people. Thus they think that you are a kind person and want to communicate with you.&lt;br&gt;
Take my brother Tom as an instance. He is a software engineer in a big company and gets lots of work every day. Even though he is often busy with his job, he manages to be happy and comfortable by listening to music. Besides, he is very kind and willing to help other people, making him very popular in the office. Moreover, he is used to taking a walk with his colleagues during the break because that can make him think clearly and less stressful.&lt;br&gt;
Since Tom is always easy with his work, we often see lots of friends at his house.&lt;/p&gt;
&lt;p&gt;Learn to be relaxed can be helpful to people&amp;rsquo;s health.&lt;br&gt;
We all know that being serious for a long time makes people feel tired, frustrated, and get health problems more frequently.&lt;br&gt;
In contrast, being relaxed can bring people more positive effects.&lt;br&gt;
For example, my father is a famous psychology doctor in a local hospital. And he often meets with lots of people with psychological problems. He often tells us that most people have no or less psychical issues at first. But after a long term of pressure, some of them don&amp;rsquo;t sleep well or have a good appetite. And finally, they get various problems, such as high blood pressure. Nevertheless, most of these health issues would disappear if they learned to relax.&lt;br&gt;
Therefore, people would be more healthy if they can deal with things in a light mood.&lt;/p&gt;
&lt;p&gt;In conclusion, dealing with works or studies with relaxation will have more benefits for people.&lt;br&gt;
It can help people work more efficiently, make new friends relatively quickly, and have less health problems.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TOEFL W2: Money spent on arts or sports</title>
        <link>/p/toefl-w2-money-spent-on-arts-or-sports/</link>
        <pubDate>Fri, 09 Oct 2020 10:09:03 +0800</pubDate>
        
        <guid>/p/toefl-w2-money-spent-on-arts-or-sports/</guid>
        <description>&lt;h3 id=&#34;ad-governments-should-spend-more-money-supporting-the-arts-than-supporting-athletics-such-as-an-olympic-team&#34;&gt;A/D: Governments should spend more money supporting the arts than supporting athletics such as an Olympic team.&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;[Opening Sentence] Even though there are limited government resources for arts and sports funding, money is often misspent on athletics and Olympic teams.&lt;br&gt;
[Thesis statement] However, I believe that governments should put more resources and money on art projects since it will bring a lot more benefits to society and people.&lt;/p&gt;
&lt;p&gt;[Topic 1] Through their creation of the arts, some people become larger-than-life inspirations to everyone.&lt;br&gt;
Hence, governments need to support these people as much as possible.&lt;br&gt;
[General Statement] Artists often serve as representatives of a nation’s culture.&lt;br&gt;
[Example] For example, great composers and other artists, such as Beethoven, Mozart, Van Gogh, and Rembrandt, are cultural icons in their home countries. Their genius is recognized worldwide.&lt;br&gt;
Without funding for art schools, orchestras, operas, and plays, future artists would have nowhere to improve their work.&lt;br&gt;
[Closing sentence] By providing funding for arts, governments can ensure a steady flow of cultural icons.&lt;/p&gt;
&lt;p&gt;[Topic 2] By enjoying artworks, people can relieve pressure in life and feel peaceful.&lt;br&gt;
[General Statement] Due to the burden load of work and life, most people live with tremendous pressure. However, it can help them forget things unhappy when they focus on the artwork.&lt;br&gt;
[Example] For instance, I work as a software engineer for one of the biggest game companies. I often work on more than three projects at the same time. Besides, there are always new requirements changed before the deadline, and we should report the progress every morning of Monday. Therefore, I often get tired and exhausted after the end of a day’s work. Nevertheless, I happened to found an art museum funded by the government in my community. Then I get used to visiting there every day after work. By walking through various artifacts for no more than fifteen minutes, I would feel relieved and forget anything unhappy.&lt;br&gt;
[Closing sentence] Indeed, if governments spend more money on art, it can provide more places for people to relax.&lt;/p&gt;
&lt;p&gt;[Topic 2] Besides, since Arts are essential in school education, governments should allocate more resources for arts.&lt;br&gt;
[General Statement] Many students study music and painting at a young age, and most of them are very talented artists. Without support from the governments, there would be no means for these future artists to develop their abilities.&lt;br&gt;
[Example] Take my country as an example. With financial support from the government, many schools have courses related to arts, such as music, painting, etc. Also, there are lots of professional art colleges where students can study the arts deeply. Through studying arts, we can learn about different cultures and their ideals.&lt;br&gt;
[Closing sentence] However, if the governments had not paid more attention to art, we would lose the chance to extend our knowledge about art.&lt;/p&gt;
&lt;p&gt;[Summary] In conclusion, governments should spend more money and put more resources to support the arts.&lt;br&gt;
[Final Comment] By funding the development of art, people can get inspired, feel less stressed, and have opportunities to study art.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tip&lt;br&gt;
If you follow the format above and get enough specific ideas and examples to support your points and practice a lot,&lt;br&gt;
you&amp;rsquo;ll get at least 25+ in your TOEFL writing.&lt;br&gt;
Of course, it&amp;rsquo;s based on large vocabulary of at least 8000+ and basic grammar knowledge.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>TOEFL W2: Rural areas or cities</title>
        <link>/p/toefl-w2-rural-areas-or-cities/</link>
        <pubDate>Sat, 15 Aug 2020 17:37:19 +0800</pubDate>
        
        <guid>/p/toefl-w2-rural-areas-or-cities/</guid>
        <description>&lt;p&gt;DO you agree or disagree with the following statement?&lt;br&gt;
People who live in small villages or farm areas are more satisfied with their lives than people who live in cities.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Some people may think that people living in rural areas, such as villages and farms, are more contented with their lives since there is a better environment in Villages and farms.&lt;br&gt;
In my opinion, however, most people are satisfied with living in cities because it can have more benefits than living in rural areas.&lt;/p&gt;
&lt;p&gt;For one thing, living in cities can help us make more friends.(social)&lt;br&gt;
Since there are many people from different regions in cities, we have more chances to know various people than in remote areas.&lt;br&gt;
For example, there are three famous art museums and five fantastic gyms near our community where you can see many people. Moreover, I like working out at the gym after work and on weekends. By exercising at the gym, I got a chance to know my best friends, who help me a lot in my life and encourage me to learn Spanish.&lt;br&gt;
Nevertheless, I couldn’t have a chance to make more friends if I had lived in rural areas.&lt;/p&gt;
&lt;p&gt;Besides, living in cities can save us lots of time and trouble. There are more malls and markets in towns for people to go shopping than in remote areas. (daily life)&lt;br&gt;
Even people from rural areas have to admit that living in rural areas is inconvenient. They often complain that they have to drive for more than one hour to buy living stuff or go to the hospital.&lt;br&gt;
According to a statistical analysis from China Daily, there is at least one merchandise market and one hospital in every city district, let alone numerous clinics distributing in different city communities. Thus, it will take us less than one hour to buy some fruits and vegetables, which make our lives more convenient.&lt;br&gt;
However, you have to spend half the day to go shopping if you live in remote areas.&lt;/p&gt;
&lt;p&gt;Furthermore, more job opportunities are available in cities than in rural areas. (career)&lt;br&gt;
We all know that companies are usually located in big cities since there are more talented people and developed transportation. According to a career analysis from the Times, the rate of changing jobs in cities is much higher than in rural areas because you can find a new job easily if you don’t like your current workplace.&lt;br&gt;
I live in Silly Valley, known as programmers’ heaven, where there are many famous companies.  As a software engineer, I’ve never worried that I cannot find a job. Also, there are always popular activities, in which you can know some people who want to find competent employees. Five years ago, I worked as an embedded software engineer in a small company. I was depressed and frustrated during the year I was there because of our boss’s bad temper. Then, I left there and found a job in another company.&lt;br&gt;
Thus, living in cities can have more opportunities in a career.&lt;/p&gt;
&lt;p&gt;In conclusion, people living in cities are more satisfied with their lives than people living in rural areas.&lt;br&gt;
Living in cities can help people make more friends, be more convenient, and provide more job opportunities.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TOEFL W2: New tech affect study</title>
        <link>/p/toefl-w2-new-tech-affect-study/</link>
        <pubDate>Mon, 10 Aug 2020 17:33:30 +0800</pubDate>
        
        <guid>/p/toefl-w2-new-tech-affect-study/</guid>
        <description>&lt;p&gt;Some people may think that young children should not use new technology and limit their use of technology because it is harmful to young children.&lt;br&gt;
In my opinion, however, new technology can be useful for children&amp;rsquo;s studies and bring them a lot more benefits.&lt;/p&gt;
&lt;p&gt;Using technology can help young students improve their study.&lt;br&gt;
Today, computers and the Internet are beneficial to students because there are many excellent computer tools related to study.&lt;br&gt;
Take me as an instance. I was interested in computer science and loved programming when I was in middle school ten years ago. But I encountered a big problem since I didn&amp;rsquo;t have enough money to buy a computer. Nevertheless, our teachers told us that there were lots of computers in our library, in which we can learn a lot about programming. Then, I would go to the computer library and stay until midnight every day.&lt;br&gt;
If not for the new technology, I would have no chance to improve my study and programming skills.&lt;/p&gt;
&lt;p&gt;Besides, the use of new technology can help young kids broaden their horizons.&lt;br&gt;
Through the Internet, young kids can learn a lot about different cultures and read various books from various countries and regions.&lt;br&gt;
For example, my brother Tom loves English literature. He often went to a bookstore downtown to read books. But it usually took him at least two hours to get there since he lived very far away from the downtown. However, his father bought him a computer last year. By reading information online, he can read lots of books and find interesting information about other cultures.&lt;br&gt;
With the help of new technology, it saved Tom a lot of trouble to study and broadened his horizons.&lt;/p&gt;
&lt;p&gt;Moreover, young students can also take online courses under some conditions.&lt;br&gt;
It&amp;rsquo;s not always convenient and efficient for students and teachers to meet in classrooms.&lt;br&gt;
Instead, studying and teaching online would be an excellent solution to this problem.&lt;br&gt;
Take the current world as an instance. After breaking a dangerous virus, many people are limited to their communities and keep a safe social distance.&lt;br&gt;
To limit the spread of the virus, governments closed many, and thus students can go nowhere buy stay at home. However, many teachers now teach their students through online programs. By studying online, children can continue their classes.&lt;br&gt;
Yet, children&amp;rsquo;s study would be affected without the help of technology.&lt;/p&gt;
&lt;p&gt;In conclusion, new technology is essential for young children and can benefit them a lot.&lt;br&gt;
With the assistance of modern technology, it can help young students improve their study, broaden their horizons, and study online conveniently.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>TOEFL W2: A/D: Teachers should assign students more tasks</title>
        <link>/p/toefl-w2-a/d-teachers-should-assign-students-more-tasks/</link>
        <pubDate>Sun, 09 Aug 2020 19:09:27 +0800</pubDate>
        
        <guid>/p/toefl-w2-a/d-teachers-should-assign-students-more-tasks/</guid>
        <description>&lt;p&gt;Many people may think that young students can learn a lot by doing a great deal of homework.&lt;br&gt;
However, teachers should assign their students with tasks that can be finished within thirty minutes since it will bring young students a lot more benefits.&lt;/p&gt;
&lt;p&gt;Fewer assignments with crucial elements can help young students study more efficiently.&lt;br&gt;
People commonly held that the more assignments to do, the more young students could learn.&lt;br&gt;
Many students are frustrated with the burden tasks and thus tend to finish the tasks quickly. Therefore, they don’t think deeply about the topics or get much improvement.&lt;br&gt;
Nevertheless, Tasks of high quality can be easy to be finished and help students learning things positively.&lt;br&gt;
For example, I once was a young student in the local primary school. And our teachers often gave us assignments that can we could finish in a short time. And students are often motivated because of the sense of achievement. Therefore, all students there have a positive attitude toward school and study.&lt;br&gt;
Even though we didn’t do many assignments, many students in our class get high scores in the final exams.&lt;/p&gt;
&lt;p&gt;Besides, fewer assignments can give students chances to make some friends.&lt;br&gt;
With fewer tasks to do, students will have more time to play with other young kids and know some people.&lt;br&gt;
Take My brother Tom as an instance. He was a timid boy who didn’t like talking much and had no friends when our family moved to a new community. However, he was fond of playing basketball and always do it in the playground with other kids. He has more time to play because he was able to finish the assignments in a short time. After years of practicing, he not only become more robust but also have lots of good friends.&lt;/p&gt;
&lt;p&gt;Moreover, fewer tasks also can help students find their interests and broaden their horizons.&lt;br&gt;
After they finish their jobs, young kids must be curious about other activities, such as music, painting, etc. which would be beneficial for their future development.&lt;br&gt;
According to a statistic report from China daily, young kids who spent most of their time doing homework usually didn’t perform well in their future careers. Whereas those students assigned fewer tasks at their young age are more likely to do well in their jobs and more content with their lives. Since these students often have more time to develop their interests in various fields, they usually have broader horizons and know better about what career they like.&lt;/p&gt;
&lt;p&gt;In conclusion, it will benefit children a lot; if teachers assign fewer tasks to their students. With less work to do, young students can work more efficiently in their studies, make more friends, and be more satisfied with their future lives.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I wrote this passage as practice to improve my TOEFL writing skill.&lt;br&gt;
I share it here to provide help for students who don&amp;rsquo;t know how to write a TOEFL essey.&lt;br&gt;
I would be very happy if you find it useful.&lt;br&gt;
Yet, you should only take it as an example and not copy it in your own answers.&lt;br&gt;
Otherwise, you were risking yourself and wouldn&amp;rsquo;t have a good score in your TOEFL test.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Resume</title>
        <link>/p/resume/</link>
        <pubDate>Fri, 06 Dec 2019 11:44:52 +0800</pubDate>
        
        <guid>/p/resume/</guid>
        <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;E-mail&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Github&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Li. Mingzhi&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;mailto:lmingzhi618@gmail.com&#34;&gt;lmingzhi618@gmail.com&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://github.com/mingzhi198&#34;&gt;https://github.com/mingzhi198&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;education-background&#34;&gt;Education Background&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;University&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Major&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Period&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Shenzhen University&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Software Engineering&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2016.3~2019.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Henan Institute of Technology&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Mechanical Manufacture and Automation&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2005.9~2008.7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;language-skills&#34;&gt;Language Skills&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Chinese&lt;/td&gt;
&lt;td&gt;Fluent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;English&lt;/td&gt;
&lt;td&gt;TOEFL: 102 (MyBest107), GRE:322&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;special-skills&#34;&gt;Special Skills&lt;/h3&gt;
&lt;p&gt;Good at troubleshooting, analyzing and solving problems.&lt;br&gt;
Good at optimizing interface performance, achieving high concurrent access and stability.&lt;/p&gt;
&lt;h3 id=&#34;professional-skills&#34;&gt;Professional Skills&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Familiar with Golang (2017 to present), C/C++, Python development under Linux&lt;/li&gt;
&lt;li&gt;Familiar with TCP/IP, HTTP network protocol&lt;/li&gt;
&lt;li&gt;Familiar with encryption algorithms (DES/AES/RSA/MD5/HASH)&lt;/li&gt;
&lt;li&gt;Familiar with GCC, GDB, Makefile, Blade, and other compilation and debugging tools, and proficient in Vim development&lt;/li&gt;
&lt;li&gt;Familiar with databases: MySQL, Redis, MongoDB, SQLite&lt;/li&gt;
&lt;li&gt;Familiar with message queues: RabbitMq.&lt;/li&gt;
&lt;li&gt;Familiar with RPC framework: Thrift, gRPC; Golang web framework: Beego, Gin&lt;/li&gt;
&lt;li&gt;Familiar with Golang database components such as gorm and redigo&lt;/li&gt;
&lt;li&gt;Familiar with Boost, POCO, and other open-source libraries, familiar with Docker&lt;/li&gt;
&lt;li&gt;Familiar with wrk (Lua) pressure measurement tool, pprof performance optimization tool&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;other-hubbies&#34;&gt;Other Hubbies&lt;/h3&gt;
&lt;p&gt;Reading, Music, Gym&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
