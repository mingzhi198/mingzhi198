<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zookeeper on Li. Mingzhi</title>
    <link>/categories/zookeeper/</link>
    <description>Recent content in Zookeeper on Li. Mingzhi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Mar 2021 18:36:08 +0800</lastBuildDate><atom:link href="/categories/zookeeper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ZK 1. Introduction to Zookeeper </title>
      <link>/p/zk-1.-introduction-to-zookeeper/</link>
      <pubDate>Wed, 24 Mar 2021 18:36:08 +0800</pubDate>
      
      <guid>/p/zk-1.-introduction-to-zookeeper/</guid>
      <description>Statement  该文是在下在看书过程中的学习笔记，仅限于学习交流，禁止用于商业用途。 非商业用途转载请注明出处，若要详细了解书中内容，请参考原作: MySQL技术内幕（InnoDB存储引擎）。  1. Nginx的五大模块 Nginx由不同功能的模块组成，这些模块会根据配置参数决定其行为。
在 configure的参数中，有为五大类模块：
 事件模块 默认编译的HTTP模块 默认不编译的HTTP模块 邮件代理服务相关的mail模块 其它模块  2. Nginx的8类配置项   虚拟主机与请求的分发
  文件路径的定义
  内存及磁盘资源的分配
  网络连接的设置
  MIME类型的设置
  对客户端请求的限制
  文件操作的优化
  对客户端请求的特殊处理
  参考
https://zhuanlan.zhihu.com/p/34156758
  </description>
    </item>
    
    <item>
      <title>ZK 1. Introduction to Zookeeper </title>
      <link>/p/zk-1.-introduction-to-zookeeper/</link>
      <pubDate>Wed, 24 Mar 2021 18:36:08 +0800</pubDate>
      
      <guid>/p/zk-1.-introduction-to-zookeeper/</guid>
      <description>Statement  This article is my study notes about Zookeeper. Please refer to the original work for more details and indicate the source for reprinting.  1. zookeeper是一个顺序一致性的分布式数据库 多个节点共同组成一个分布式集群，挂掉任意一个节点，
数据库仍然可以正常工作，客户端无感知故障切换。
客户端向任意一个节点写入数据，其它节点可以立即看到最新的数据。
2. zookeeper的内部是一个key/value存储引擎 key是以树状的形式构成了一个多级的层次结构，
每一个节点既可以存储数据，又可以作为一个目录存放下一级子节点。
3. zookeeper提供了创建、修改、和删除节点的api 如果父节点没有创建，字节点会创建失败。如果父节点还有子节点，父节点不可以被删除。
4. zookeeper和客户端之间以socket形式进行双向通讯 客户端可以主动调用服务器提供的api，服务器可以主动向客户端推送事件。
 有多种事件可以watch:
 节点的增删改 子节点的增删改 会话状态变更等。 5. zookeeper的事件有传递机制 字节点的增删改触发的事件会向上层依次传播，所有的父节点都可以收到字节点的数据变更事件;
所以层次太深或子节点太多会给服务器的事件系统带来压力。
6. zookeeper满足了CAP定理的分区容忍性P和强一致性C，牺牲了高性能A 但zookeeper的存储能力是有限的，当节点层次太深、子节点太多、或节点数据太大，都会影响数据库的稳定性。
 所以zookeeper不是一个用来做高并发高性能的数据库，zookeeper一般只用来存储配置信息。
 从下图可以看出当服务器节点增多时，复杂度会随之提升。
客户端连接zookeeper时会选择任意一个节点保持长链接，后续通信都是通过这个节点进行读写的。
如果该节点挂了，客户端会尝试去连接其它节点。
7. zookeeper 会话 服务器会为每个客户端连接维持一个会话对象，会话的ID会保存在客户端。
会话对象也是分布式的，意味着当一个节点挂掉了，客户端使用原有的会话ID去连接其它节点，
服务器维持的会话对象还继续存在，并不需要重新创建一个新的会话。
7.1 会话关闭  若客户端主动发送会话关闭消息，服务器的会话对象会立即删除。 若客户端不小心奔溃了，没有发送关闭消息，服务器的会话对象还会继续存在一段时间。   这个时间是会话的过期时间，在创建会话的时候客户端会提供这个参数，一般是10到30秒。</description>
    </item>
    
  </channel>
</rss>
