<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL技术内幕 on Li. Mingzhi</title>
    <link>/categories/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/</link>
    <description>Recent content in MySQL技术内幕 on Li. Mingzhi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Jun 2021 10:08:08 +0800</lastBuildDate><atom:link href="/categories/mysql%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MongoDB Index</title>
      <link>/p/mongodb-index/</link>
      <pubDate>Tue, 01 Jun 2021 10:08:08 +0800</pubDate>
      
      <guid>/p/mongodb-index/</guid>
      <description>Statement  This article is my study notes from mongodb manual. Please refer to the original work for more details and indicate the source for reprinting.  Index Names Evaluate the Performance of a Query db.inventory.find( { quantity: { $gte: 100, $lte: 200 } } ).explain(&amp;quot;executionStats&amp;quot;) query results:
{ &amp;quot;queryPlanner&amp;quot; : { &amp;quot;plannerVersion&amp;quot; : 1, &amp;quot;namespace&amp;quot; : &amp;quot;test.inventory&amp;quot;, &amp;quot;indexFilterSet&amp;quot; : false, &amp;quot;parsedQuery&amp;quot; : { &amp;quot;$and&amp;quot; : [ { &amp;quot;quantity&amp;quot; : { &amp;quot;$lte&amp;quot; : 200 } }, { &amp;quot;quantity&amp;quot; : { &amp;quot;$gte&amp;quot; : 100 } } ] }, &amp;quot;winningPlan&amp;quot; : { &amp;quot;stage&amp;quot; : &amp;quot;COLLSCAN&amp;quot;, &amp;quot;filter&amp;quot; : { &amp;quot;$and&amp;quot; : [ { &amp;quot;quantity&amp;quot; : { &amp;quot;$lte&amp;quot; : 200 } }, { &amp;quot;quantity&amp;quot; : { &amp;quot;$gte&amp;quot; : 100 } } ] }, &amp;quot;direction&amp;quot; : &amp;quot;forward&amp;quot; }, &amp;quot;rejectedPlans&amp;quot; : [ ] }, &amp;quot;executionStats&amp;quot; : { &amp;quot;executionSuccess&amp;quot; : true, &amp;quot;nReturned&amp;quot; : 3, &amp;quot;executionTimeMillis&amp;quot; : 0, &amp;quot;totalKeysExamined&amp;quot; : 0, &amp;quot;totalDocsExamined&amp;quot; : 10, &amp;quot;executionStages&amp;quot; : { &amp;quot;stage&amp;quot; : &amp;quot;COLLSCAN&amp;quot;, &amp;quot;filter&amp;quot; : { &amp;quot;$and&amp;quot; : [ { &amp;quot;quantity&amp;quot; : { &amp;quot;$lte&amp;quot; : 200 } }, { &amp;quot;quantity&amp;quot; : { &amp;quot;$gte&amp;quot; : 100 } } ] }, &amp;quot;nReturned&amp;quot; : 3, &amp;quot;executionTimeMillisEstimate&amp;quot; : 0, &amp;quot;works&amp;quot; : 12, &amp;quot;advanced&amp;quot; : 3, &amp;quot;needTime&amp;quot; : 8, &amp;quot;needYield&amp;quot; : 0, &amp;quot;saveState&amp;quot; : 0, &amp;quot;restoreState&amp;quot; : 0, &amp;quot;isEOF&amp;quot; : 1, &amp;quot;direction&amp;quot; : &amp;quot;forward&amp;quot;, &amp;quot;docsExamined&amp;quot; : 10 } }, &amp;quot;serverInfo&amp;quot; : { &amp;quot;host&amp;quot; : &amp;quot;sdj&amp;quot;, &amp;quot;port&amp;quot; : 27017, &amp;quot;version&amp;quot; : &amp;quot;4.</description>
    </item>
    
    <item>
      <title>cp4. Tables</title>
      <link>/p/cp4.-tables/</link>
      <pubDate>Mon, 05 Apr 2021 18:36:08 +0800</pubDate>
      
      <guid>/p/cp4.-tables/</guid>
      <description>Statement  该文是在下在看书过程中的学习笔记，仅限于学习交流，禁止用于商业用途。 非商业用途转载请注明出处，若要详细了解书中内容，请参考原作: MySQL技术内幕（InnoDB存储引擎）。  1. 索引组织表 InnoDB存储引擎的表是根据主键顺序组织存放的，这种存储方式的表被称为 索引组织表(index organized table)。
每张 InnoDB 表都有个主键(primary key),若在建表时未指定主键，则存储引擎会按如下方式指定主键：
 若表中有非空的唯一索引(unique not null), 则该列即为主键
若表中有多个非空唯一索引，则第一个定义的非空唯一索引为主键  CREATE TABLE `z` ( `a` int NOT NULL, `b` int DEFAULT NULL, `c` int NOT NULL, `d` int NOT NULL, UNIQUE KEY `d` (`d`), UNIQUE KEY `c` (`c`), UNIQUE KEY `b` (`b`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci mysql root@127.0.0.1:test&amp;gt; insert into z select 5, 6, 7, 8; Query OK, 1 row affected Time: 0.</description>
    </item>
    
    <item>
      <title>cp3. Files</title>
      <link>/p/cp3.-files/</link>
      <pubDate>Fri, 02 Apr 2021 18:36:08 +0800</pubDate>
      
      <guid>/p/cp3.-files/</guid>
      <description>Statement  该文是在下在看书过程中的学习笔记，仅限于学习交流，禁止用于商业用途。 非商业用途转载请注明出处，若要详细了解书中内容，请参考原作: MySQL技术内幕（InnoDB存储引擎）。  MySQL 数据库和 InnoDB 存储数据表的各种类型文件：
 参数文件 日志文件 socket文件 pid文件 MySQL表结构文件 存储引擎文件  1. 参数文件 MySQL不同于Oracle，即使没有参数文件也可以启动，此时所有的参数取决于编译MySQL时指定的默认值。
但MySQL的启动依赖数据库目录下的mysql加构文件。
1.1 参数 推荐可以通过命令SHOW VARIABLES 查看数据库中的所有参数，也可能通过LIKE来过滤参数
从MySQL5.1开始，可以通过information_schema架构下的GLOBAL_VARIABLES视图来进行查找。
1.2 参数类型  动态参数(dynamic)
可以在MySQL运行过程中修改的参数，global和session关键字，表明该参数的修改是基于当前会话，不是整个实例的生命周期。
但在下次启动MySQL实例还是会读取参数文件，因为若想修改的参数一直有效，用户需要修改参数文件。 静态参数(static)
对于静态变量的修改，会得到read only的错误提示  2. 日志文件 日志文件记录了MySQL数据库的各种类型活动，常见的日志文件有:
 错误日志(err log) 二进制日志(binlog) 慢查询日志(slow query log) 查询日志(log)  2.1 错误日志 错误日志文件记录对MySQL的启动、运动、和关闭过程。
用户可以通过命令SHOW VARIABLES LIKE &amp;lsquo;log_error&amp;rsquo;来定位该文件，如:
mysql root@127.0.0.1:test&amp;gt; show variables like &amp;#39;log_error&amp;#39; +---------------+--------------------------+ | Variable_name | Value | +---------------+--------------------------+ | log_error | /var/log/mysql/error.</description>
    </item>
    
    <item>
      <title>cp2. InnoDB</title>
      <link>/p/cp2.-innodb/</link>
      <pubDate>Wed, 24 Mar 2021 18:36:08 +0800</pubDate>
      
      <guid>/p/cp2.-innodb/</guid>
      <description>Statement  该文是在下在看书过程中的学习笔记，仅限于学习交流，禁止用于商业用途。 非商业用途转载请注明出处，若要详细了解书中内容，请参考原作: MySQL技术内幕（InnoDB存储引擎）。  1. InnoDB体系结构 InnoDB存储引擎有多个内存块组成的一个大的内存池，负责如下工作：
 维护所有进程/线程要访问的内部数据结构 缓存磁盘上的数据 重做日志(redo log)缓冲  1.1 后台线程 1. Master Thread 核心线程，负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性
2. IO Thread InnoDB存储引擎大量使用了AIO（Async IO)来处理写IO请求；
InnoDB 1.0版本之前共有4个IO Thread: write, read, insert buffer and log IO thread
 查看InnoDB中的 IO Thread:
 show engine innodb status\G 3. Purge Thread 事务被提交后，其所用的 undolog 可能不再需要，Purge Thread 可以回收已经使用并分配的 undo 页。
从InnoDB 1.2版本开始，支持多个 Purge Thread, 从而加快undo页的回收；
另外 Purge Thread 离散地读取 undo 页，可以利用磁盘的随机读取性能。
mysql root@127.0.0.1:test&amp;gt; show variables like &amp;#39;innodb_purge_threads&amp;#39; \G ***************************[ 1.</description>
    </item>
    
  </channel>
</rss>
