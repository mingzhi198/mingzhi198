<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Li. Mingzhi</title>
    <link>/categories/notes/</link>
    <description>Recent content in notes on Li. Mingzhi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Mar 2021 18:00:52 +0800</lastBuildDate><atom:link href="/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式: 一致性协议Raft</title>
      <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AEraft/</link>
      <pubDate>Wed, 10 Mar 2021 18:00:52 +0800</pubDate>
      
      <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AEraft/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.  1. 一致性协议Raft Raft 也是一个 一致性算法，和 Paxos 目标相同。但它还有另一个名字 - 易于理解的一致性算法。Paxos 和 Raft 都是为了实现 一致性 产生的。这个过程如同选举一样，参选者 需要说服 大多数选民 (服务器) 投票给他，一旦选定后就跟随其操作。Paxos 和 Raft 的区别在于选举的 具体过程 不同。
Raft 协议将 Server 进程分成三类，分别是 Leader，Candidate，Follower。一个 Server 进程在某一时刻，只能是其中 一种类型，但这不是固定的。不同的时刻，它可能拥有不同的类型，一个 Server 进程的类型是如何改变的，后面会有解释。
在一个由 Raft 协议组织的集群中有三类角色：
 Leader（领袖） Follower（群众） Candidate（候选人）  就像一个民主社会，领袖由民众投票选出。刚开始没有 领袖，所有集群中的 参与者 都是 群众，那么首先开启一轮大选。在大选期间 所有群众 都能参与竞选，这时所有群众的角色就变成了 候选人，民主投票选出领袖后就开始了这届领袖的任期，然后选举结束，所有除 领袖 的 候选人 又变回 群众角色 服从领袖领导。</description>
    </item>
    
    <item>
      <title>Golang: Channel底层实现</title>
      <link>/p/golang-channel%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 09 Mar 2021 15:00:52 +0800</pubDate>
      
      <guid>/p/golang-channel%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.   1. channel结构  buf 是有缓冲的channel所特有的结构，用来存储缓存数据。是个循环链表 sendx和recvx用于记录buf这个循环链表中的发送或者接收的index lock lock是个互斥锁 recvq和sendq分别是接收(&amp;lt;-channel)或者发送(channel &amp;lt;- xxx)的goroutine抽象出来的结构体(sudog)的队列。是个双向链表  hchan源码: src/runtime/chan.go
2. 创建channel ch := make(chan int, 5) 创建channel的时候会在内存中实例化一个hchan的结构体,并返回一个ch指针.
hchan包含了一个互斥锁, 让goroutine可以FIFO的方式进入一个结构体中.
3. channel中的队列 channel中有个缓存buf，是用来缓存数据的, 当使用send (ch &amp;lt;- xx)或者recv ( &amp;lt;-ch)的时候，首先要锁住hchan这个结构体。
然后开始send (ch &amp;lt;- xx)数据。
recv ( &amp;lt;-ch)是个逆向的操作，也是需要加锁。
recvx和sendx是根据循环链表buf的变动而改变的。
4. send/recv的细化操作 每一步的操作的细节可以细化为：</description>
    </item>
    
    <item>
      <title>System: 僵尸进程和孤独进程</title>
      <link>/p/system-%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%AD%A4%E7%8B%AC%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Tue, 09 Mar 2021 15:00:52 +0800</pubDate>
      
      <guid>/p/system-%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%AD%A4%E7%8B%AC%E8%BF%9B%E7%A8%8B/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.  进程 进程就是运行起来的一个程序，但是进程并不局限于执行起来的代码，他的作用范围还有很多，如存放数据的内存地址空间，执行线程，打开的文件，挂起的信号，处理器状态等。
进程在创建的时候开始存活，Linux系统会调用fork()方法复制一个现有进程来创建一个全新的进程，新产生的进程为子进程，创建者进程为父进程。当程序结束运行时，通过exit()系统调用退出执行，该进程占用的资源包括内存空间，线程等被释放掉。
2. 进程终结 当进程终结时候，系统需要释放他所占有的所有资源。进程通过exit()系统调用结束进程，这个调用可能是来自进程内部的exit()，也可能来自外部的信号。在结束时候，该进程会使用该系统调用释放自己的空间，包括引用的文件，内存描述符，还会给自己的父进程发送信号，给自己的子进程寻找一个父进程等操作。
调用结束后，此时该进程并没有完全从系统上消失，进程的进程描述符依然存在于系统中，存在的唯一目的就是向父进程提供信息。
与自然规律相反，进程的收尾工作总是由该进程的父进程来做的，父进程会通过wait()系统调用来释放该进程最后剩余的进程标识符，slab缓存等，该调用会阻塞当前父进程，直到某个子进程退出。
3. 僵尸进程 当进程exit()退出之后，他的父进程仍未结束,且没有通过wait()系统调用回收他的进程描述符的信息，该进程会继续停留在系统的进程表中，占用内核资源，这样的进程就是僵尸进程。
等到父进程退出之后，再来查看系统，该僵尸进程在系统中找不到了。
4. 孤儿进程 当一个进程正在运行时，他的父进程忽然退出，此时该进程就是一个孤儿进程。作为一个进程，需要找到一个父进程，否则这种进程在退出之后没人回收他的进程描述符，空耗内存。此时该进程会找到一个父进程，如果自己所在的进程组没人收养，那就作为init或systemd进程的子进程。
Init进程会为每一个子进程使用wait系统调用，确保不会产生僵尸进程。这里的wait系统调用指的是waitpid()，会传入一个要等待的进程Pid，等待的指定进程，而不阻塞当前进程去等待。
等到该进程退出后，该进程的进程描述符等信息会被init进程回收，不会形成僵尸进程。
5. 处置方式 孤儿进程会由init进程收养作为子进程，所以不会有什么危害；僵尸进程会占用进程号，以及未回收的文件描述符占用空间，如果产生大量的僵尸进程，将会导致系统无法分配进程号，说明父进程的代码编写有问题。
在理想情况下，可以通过kill命令杀死该进程的父进程来结束僵尸进程。当然也要结合具体场景来对待。
 参考
https://segmentfault.com/a/1190000038820321  </description>
    </item>
    
    <item>
      <title>Golang: 调度模型</title>
      <link>/p/golang-%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 08 Mar 2021 15:00:52 +0800</pubDate>
      
      <guid>/p/golang-%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9E%8B/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.   1. GMP模型 M指的是Machine，一个M直接关联了一个内核线程。
P指的是”processor”，代表了M所需的上下文环境，也是处理用户级代码逻辑的处理器。
G指的是Goroutine，其实本质上也是一种轻量级的线程。
三者关系如下图所示：
P(Processor)的数量是在启动时被设置为环境变量GOMAXPROCS的值，或者通过运行时调用函数runtime.GOMAXPROCS()进行设置。Processor数量固定意味着任意时刻只有固定数量的线程在运行go代码。Goroutine中就是我们要执行并发的代码。图中P正在执行的Goroutine为蓝色的；处于待执行状态的Goroutine为灰色的，灰色的Goroutine形成了一个队列runqueues
三者关系的宏观的图为：
需要上下文的目的，是当遇到内核线程阻塞的时候, 我们可以直接放开其他线程。
一个很简单的例子就是系统调用sysall，一个线程肯定不能同时执行代码和系统调用被阻塞，这个时候，此线程M需要放弃当前的上下文环境P，以便可以让其他的Goroutine被调度执行。
未完待续&amp;hellip;
 参考
https://i6448038.github.io/2017/12/04/golang-concurrency-principle/  </description>
    </item>
    
    <item>
      <title>分布式: 2PC理论</title>
      <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-2pc%E7%90%86%E8%AE%BA/</link>
      <pubDate>Fri, 05 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-2pc%E7%90%86%E8%AE%BA/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.  1. 背景 在分布式系统中发起一个事务，该事务涉及多个不同节点，那么为了保证事务 ACID 特性，就需要引入一个协调者来统一调度事务涉及的多个节点，被调度的节点称为事务参与者。由此衍生出 2PC 和 3PC 协议。
2. 2PC(两阶段提交，Two-Phase Commit) 分为两个阶段：Prepare 和 Commit
2.1 Prepare：提交事务请求   询问
协调者向所有参与者发送事务请求，询问是否可执行事务操作，然后等待各个参与者的响应。
  执行
各个参与者接收到协调者事务请求后，执行事务操作(例如更新一个关系型数据库表中的记录)，并将 Undo 和 Redo 信息记录事务日志中。
  响应
如果参与者成功执行了事务并写入 Undo 和 Redo 信息，则向协调者返回 YES 响应，否则返回 NO 响应。当然，参与者也可能宕机，从而不会返回响应。
  2.</description>
    </item>
    
    <item>
      <title>分布式: 3PC理论</title>
      <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-3pc%E7%90%86%E8%AE%BA/</link>
      <pubDate>Fri, 05 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-3pc%E7%90%86%E8%AE%BA/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.  1. 3PC(三阶段提交，Three-Phase Commit) 3PC 是在 2PC 的基础上，为了解决 2PC 的某些缺点而设计的。
3PC 分为三个阶段：CanCommit，PreCommit 和 doCommit。
1.1 CanCommit   事务询问
协调者向所有参与者发送事务 canCommit 请求，请求中包含事务内容，询问是否可以执行事务提交操作，并开始等待响应。
  反馈询问结果
参与者收到 canCommit 请求后，分析事务内容，判断自身是否可以执行事务，如果可以，那么就返回 Yes 响应，进入预备状态，否则返回 No 响应。
  此过程中并没有执行事务(对比 2PC 的 Prepare 阶段，参与者是执行了事务的)。
1.2 PreCommit PreCommit 阶段根据各参与者返回的 CanCommit 响应，决定下一步动作。如果收到了所有参与者的 Yes 响应，则执行事务预提交，否则(收到了至少一个 No 响应或一定时长内没有收到所有参与者的 Yes 响应，如 3PC 第一张图片中红色部分)，执行事务中断。</description>
    </item>
    
    <item>
      <title>分布式: BASE 理论</title>
      <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-base-%E7%90%86%E8%AE%BA/</link>
      <pubDate>Fri, 05 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-base-%E7%90%86%E8%AE%BA/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.  1. BASE理论 eBay的架构师Dan Pritchett源于对大规模分布式系统的实践总结，在ACM上发表文章提出BASE理论，BASE理论是对CAP理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。
BASE是指:
基本可用（Basically Available） 软状态（ Soft State） 最终一致性（ Eventual Consistency）   基本可用（Basically Available）
分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。
电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。
这就是损失部分可用性的体现。
  软状态（ Soft State）
允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。
  最终一致性（ Eventual Consistency）
系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。
  2. ACID和BASE的区别与联系 ACID是传统数据库常用的设计理念，追求强一致性模型。
BASE支持的是大型分布式系统，提出通过牺牲强一致性获得高可用性。
ACID和BASE代表了两种截然相反的设计哲学
在分布式系统设计的场景中，系统组件对一致性要求是不同的，因此ACID和BASE又会结合使用。</description>
    </item>
    
    <item>
      <title>分布式: CAP 定理</title>
      <link>/p/%E5%88%86%E5%B8%83%E5%BC%8F-cap-%E5%AE%9A%E7%90%86/</link>
      <pubDate>Fri, 05 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/%E5%88%86%E5%B8%83%E5%BC%8F-cap-%E5%AE%9A%E7%90%86/</guid>
      <description>Statement  This article is my study notes about distributed systems. Please refer to the original work for more details and indicate the source for reprinting.  1. 什么是CAP定理 CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性） 这三个基本需求，最多只能同时满足其中的2个。   Consistency（一致性）
指数据在多个副本之间能够保持一致的特性（严格的一致性）
  Availability（可用性）
指系统提供的服务必须一直处于可用的状态，每次请求都能获取到非错的响应（不保证获取的数据为最新数据）
  Partition tolerance（分区容错性）
分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障
  分区 在分布式系统中，不同的节点分布在不同的子网络中，由于一些特殊的原因，这些子节点之间出现了网络不通的状态， 但他们的内部子网络是正常的。从而导致了整个系统的环境被切分成了若干个孤立的区域，这就是分区。 2. 原理 2.1 定义 根据CAP原则定义，系统的一致性、可用性和分区容错性细分如下：
一致性： N1和N2的数据库V之间的数据是否完全一样。 可用性： N1和N2的对外部的请求能否做出正常的响应。 分区容错性：N1和N2之间的网络是否互通。 2.2 异常情况 假设一种极端情况，N1和N2之间的网络断开了，我们要支持这种网络异常。
相当于要满足分区容错性，能不能同时满足一致性和可用性呢？还是说要对他们进行取舍？
 两种选择：  第一：牺牲数据一致性，保证可用性。响应旧的数据V0给用户。 第二：牺牲可用性，保证数据一致性。阻塞等待，直到网络连接恢复，数据更新操作M完成之后，再给用户响应最新的数据V1。 这个过程，证明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。</description>
    </item>
    
    <item>
      <title>Note: Logic</title>
      <link>/p/note-logic/</link>
      <pubDate>Wed, 03 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/note-logic/</guid>
      <description>1. 状态机: 两杯酒交互后的数量  调酒
两个杯子(B1, B2)分别装1000ml酒, B1装红酒, B2装白酒;
从B1倒100ml红酒到B2中;
再从B2倒出100ml酒(非均匀混合体)到B1中;
问题: B1中白酒多,还是B2中红酒多
答案: 一样多   status 1
B1装1000ml红酒, B2装1000ml白酒;     杯子 红酒 白酒     B1 1000 0   B2 0 1000     status 2
从B1倒100ml红酒到B2中;     杯子 红酒 白酒     B1 1000-(100)=900 0   B2 0+(100)=100 1000     step 3</description>
    </item>
    
    <item>
      <title>Note: Trees</title>
      <link>/p/note-trees/</link>
      <pubDate>Wed, 03 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/note-trees/</guid>
      <description>二叉树, 二叉搜索树(BST), 平衡二叉树(AVL), 红黑树, B树,B+树  二叉树 无序插入, 当需要查找的时候，还是得一个一个挨着去遍历查找
二叉搜索树(BST) 插入的数据有序，左子树必须小于根节点，右子树必须大于根节点;
使用二分查找来提高效率
但是如果插入的顺序是升序或者降序的话，树的形状会变成如下：
此时二叉搜索树就会退化成链表，时间复杂度又会变成O(n)
平衡二叉树(AVL) 为了解决上述问题，通过左旋转或右旋转让树平衡
最短子树跟最长子树高度只差不能超过1
由图我们可以看到，当顺序插入的时候，会自动的进行旋转，以达到平衡
但是会通过插入性能的损失来弥补查询性能的提升
 当我们插入的数据很多时候，而查询很少的时候，由于插入数据会旋转同样会消耗很多时间  4. 红黑树 同样是经过左右旋让树平衡起来，还要变色的行为
最长子树只要不超过最短子树的两倍即可
查询性能和插入性能近似取得平衡
 但是随着数据的插入、发现树的深度会变深，树的深度会越来越深，意味着IO次数越多，影响数据读取的效率  5. B树 为了解决上述数据插入过多，树深度变深的问题，我们采用B树
把原来的有序二叉树变成有序多叉树
举例： 如果要查询select * from table where id=14？ 第一步，将磁盘一加载到内存中，发现14&amp;lt;16,寻找地址磁盘2 第二步，将磁盘二加载到内存中，发现14&amp;gt;11,寻找地址磁盘7 第三步，将磁盘七加载到内存中，发现14=14，读取data，取出data，结束  问题   B树不支持范围查询的快速查找  如果我们查询一个范围的数据，查找到范围一个边界时，需要回到根节点重新遍历查找，需要从根节点进行多次遍历，即便找到范围的另一个边界，查询效率会降低。 如果data存储的是行记录，行的大小随着列数的增多，所占空间会变大。  这时，一个页中可存储的数据量就会变少，树相应就会变高，磁盘IO次数就会变大。 6. B+树 B+树对B树进行了改进，把数据全放在了叶子节点中，叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表。
例如： 查询范围 select * from table where id between 11 and 35？ 第一步，将磁盘一加载到内存中，发现11&amp;lt;28,寻找地址磁盘2 第二步，将磁盘二加载到内存中，发现10&amp;gt;11&amp;gt;17,寻找地址磁盘5 第三步，将磁盘五加载到内存中，发现11=11，读取data 第四步，继续向右查询，读取磁盘5，发现35=35，读取11-35之间数据，结束 由此可见，这样的范围查询比B树速度提高了不少  B+树相对B树的优点  1.</description>
    </item>
    
    <item>
      <title>Note: Network</title>
      <link>/p/note-network/</link>
      <pubDate>Mon, 01 Mar 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/note-network/</guid>
      <description>http各版本的区别(http0.9, http1.0, http1.1, http2.0)  1. HTTP&amp;amp;HTTPS 1. HTTPS证书的申请流程  在服务器上生成CSR文件（证书申请文件，内容包括证书公钥、使用的Hash算法、申请的域名、公司名称、职位等信息） 把CSR文件和其他可能的证件上传到CA认证机构 CA机构收到证书申请之后，使用申请中的Hash算法，对部分内容进行摘要，然后使用CA机构自己的私钥对这段摘要信息进行签名  CA机构把签名过的证书通过发送给申请者。  2. HTTPs客户端和服务端的交互流程 1. 客户端向服务器发出加密通信的请求 (1) 支持的协议版本，比如 TLS 1.0 (2) 客户端生成的随机数 random1, 稍后用于生成 会话密钥 (3) 支持的加密算法， 比如RSA非对称加密 (4) 支持的压缩算法 2. 服务器收到请求，然后响应 (1) 确认使用的加密通信协议，比如 TLS 1.0版本。 若客户端与服务器支持的版本不一致，则服务器关闭加密通信。 (2) 服务器生成随机数 random2, 稍后用于生成 会话密钥 (3) 确认使用的加密方法，比如 RSA非对称加密 (4) 服务器的证书 3. 客户端验证服务器证书  验证流程  1. CA机构在签发证书的时候，用签名算法(sha256RSA)对证书内容进行摘要，用自己的私钥对摘要进行签名E 2. 浏览器用预置在系统中的CA机构的公钥对服务器证书进行验签：用CA机构的公钥解密签名后的摘要E 3. 验签通过后得到CA机构使用的证书摘要S 4. 浏览器用相同的签名算法对证书内容进行一次摘要S1，若得到的值S1与验证签之后得到的摘要S相同，则验签通过  生成随机密钥 pre-master secret  验证通过后，客户端生成一个随机数 pre-master secret, 然后用证书中的公钥进行加密，并传给服务端。 服务端端用私钥将其解密； 即客户端和服务端都有一套相同的数据：pre-master secret, random1, random2  pre-master secret  pre-master secret 前两个字节是TLS版本号。 在 Client 在第一次请求的时候会明文发送一份加密套件列表和当前支持的SSL/TLS版本号给服务端， 若服务端对密文中解密出来的pre-master版本号跟之前客户端发送的版本号不一致，则停止通信 4.</description>
    </item>
    
    <item>
      <title>Note: MySQL</title>
      <link>/p/note-mysql/</link>
      <pubDate>Fri, 26 Feb 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/note-mysql/</guid>
      <description>[TOC]
1. 事务 1.1 事务的四个重要特性(ACID)：  原子性（Atomicity）   事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。  一致性（Consistency）   指事务将数据库从一种状态转变为另一种一致的的状态。事务开始前和结束后，数据库的完整性约束没有被破坏。 例如工号带有唯一属性，如果经过一个修改工号的事务后，工号变的非唯一了，则表明一致性遭到了破坏。  隔离性（Isolation）   要求每个读写事务的对象对其他事务的操作对象能互相分离，即该事务提交前对其他事务不可见。 也可以理解为多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。 注：MySQL 通过锁机制来保证事务的隔离性。  持久性（Durability）   事务一旦提交，则其结果就是永久性的 1.2 事务的隔离级别  SQL 标准定义的四种隔离级别被 ANSI（美国国家标准学会）和 ISO/IEC（国际标准）采用，每种级别对事务的处理能力会有不同程度的影响。  READ UNCOMMITTED（读未提交）   初始化测试数据库： SET @@session.transaction_isolation = &#39;READ-UNCOMMITTED&#39;; create database test; use test; create table test(id int primary key); insert into test(id) values(1); 1. 打开终端1，开启一个事务，修改ID为1的记录更新为2： SET @@session.transaction_isolation = &#39;READ-UNCOMMITTED&#39;; begin; update test set id = 2 where id = 1; select * from test; -- 此时看到一条ID为2的记录 2.</description>
    </item>
    
    <item>
      <title>Note: Redis</title>
      <link>/p/note-redis/</link>
      <pubDate>Fri, 26 Feb 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/note-redis/</guid>
      <description>Redis   Redis数据类型及应用场景
  Redis进程模型及其高效原理
  Redis有序集的实现方式
  </description>
    </item>
    
    <item>
      <title>Note: System and Programming</title>
      <link>/p/note-system-and-programming/</link>
      <pubDate>Fri, 26 Feb 2021 19:00:52 +0800</pubDate>
      
      <guid>/p/note-system-and-programming/</guid>
      <description>1. channel 底层实现 Programming Language   Golang 和 C＋＋的区别及使用场景
  Golang 的协程管理（GOP）
  进程，线程和协程的区别
  make 和 new 的区别
  channel 底层实现
  channel如何唤醒goroutine
  golang GC 机制
  golang 单元测试及覆盖范围
  系统调用  poll, select 和 epoll的区别及其数据结构   Data Structure B树和B＋树 消息队列  RabbitMQ和Kafka的区别及优缺点  分布式   分布式锁的应用和实现
a. Redis
b. Mysql
c. zookeeper
  集群实现原理
  算法  挂气球  小明有一些气球想挂在墙上装饰，他希望相同颜色的气球不要挂在一起，写一个算法帮他得出一种可行的挂气球方式， 自行定义函数，输入和返回，如果无法做到相同颜色的气球不挂在一起 leetcode</description>
    </item>
    
  </channel>
</rss>
